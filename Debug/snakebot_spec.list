
snakebot_spec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f34  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080080d0  080080d0  000090d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008190  08008190  0000a0ac  2**0
                  CONTENTS
  4 .ARM          00000008  08008190  08008190  00009190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008198  08008198  0000a0ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008198  08008198  00009198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800819c  0800819c  0000919c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  080081a0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  200000b0  0800824c  0000a0b0  2**3
                  ALLOC
 10 ._user_heap_stack 00001000  200003f0  0800824c  0000a3f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a52  00000000  00000000  0000a0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003113  00000000  00000000  0001cb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  0001fc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d86  00000000  00000000  00020dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bf8  00000000  00000000  00021b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017060  00000000  00000000  0003973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000909fa  00000000  00000000  0005079e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a8c  00000000  00000000  000e11dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e5c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b0 	.word	0x200000b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080080b4 	.word	0x080080b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000b4 	.word	0x200000b4
 80001d4:	080080b4 	.word	0x080080b4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_CRC_Init+0x20>)
 8000eaa:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <MX_CRC_Init+0x24>)
 8000eac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <MX_CRC_Init+0x20>)
 8000eb0:	f003 fbfd 	bl	80046ae <HAL_CRC_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000eba:	f000 fda9 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000cc 	.word	0x200000cc
 8000ec8:	40023000 	.word	0x40023000

08000ecc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f08 <HAL_CRC_MspInit+0x3c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10d      	bne.n	8000efa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <HAL_CRC_MspInit+0x40>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a09      	ldr	r2, [pc, #36]	@ (8000f0c <HAL_CRC_MspInit+0x40>)
 8000ee8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <HAL_CRC_MspInit+0x40>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023000 	.word	0x40023000
 8000f0c:	40023800 	.word	0x40023800

08000f10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a3a      	ldr	r2, [pc, #232]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b38      	ldr	r3, [pc, #224]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b34      	ldr	r3, [pc, #208]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a33      	ldr	r2, [pc, #204]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b31      	ldr	r3, [pc, #196]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b2d      	ldr	r3, [pc, #180]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a2c      	ldr	r2, [pc, #176]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4b26      	ldr	r3, [pc, #152]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a25      	ldr	r2, [pc, #148]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <MX_GPIO_Init+0x108>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f9c:	481f      	ldr	r0, [pc, #124]	@ (800101c <MX_GPIO_Init+0x10c>)
 8000f9e:	f003 fdb9 	bl	8004b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS3_Pin|CS2_Pin|CS1_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000fa8:	481d      	ldr	r0, [pc, #116]	@ (8001020 <MX_GPIO_Init+0x110>)
 8000faa:	f003 fdb3 	bl	8004b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SLEEP_GPIO_Port, SLEEP_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	481c      	ldr	r0, [pc, #112]	@ (8001024 <MX_GPIO_Init+0x114>)
 8000fb4:	f003 fdae 	bl	8004b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4812      	ldr	r0, [pc, #72]	@ (800101c <MX_GPIO_Init+0x10c>)
 8000fd2:	f003 fc1b 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS3_Pin|CS2_Pin|CS1_Pin;
 8000fd6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	480c      	ldr	r0, [pc, #48]	@ (8001020 <MX_GPIO_Init+0x110>)
 8000ff0:	f003 fc0c 	bl	800480c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SLEEP_Pin;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SLEEP_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	@ (8001024 <MX_GPIO_Init+0x114>)
 800100c:	f003 fbfe 	bl	800480c <HAL_GPIO_Init>

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	@ 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	40020800 	.word	0x40020800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f003 f997 	bl	8004360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 f91b 	bl	800126c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  srand(HAL_GetTick());
 8001036:	f003 f9f9 	bl	800442c <HAL_GetTick>
 800103a:	4603      	mov	r3, r0
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fcd7 	bl	80019f0 <srand>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f7ff ff65 	bl	8000f10 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001046:	f002 fdf3 	bl	8003c30 <MX_TIM3_Init>
  MX_TIM4_Init();
 800104a:	f002 fe55 	bl	8003cf8 <MX_TIM4_Init>
  MX_SPI2_Init();
 800104e:	f002 fca5 	bl	800399c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001052:	f003 f8d3 	bl	80041fc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001056:	f002 fd9f 	bl	8003b98 <MX_TIM2_Init>
  MX_CRC_Init();
 800105a:	f7ff ff23 	bl	8000ea4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 800105e:	486e      	ldr	r0, [pc, #440]	@ (8001218 <main+0x1f0>)
 8001060:	f005 f802 	bl	8006068 <HAL_TIM_Base_Start_IT>
	//htim3.Instance->CCR1=50;
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001064:	2100      	movs	r1, #0
 8001066:	486d      	ldr	r0, [pc, #436]	@ (800121c <main+0x1f4>)
 8001068:	f005 f8b0 	bl	80061cc <HAL_TIM_PWM_Start>
	//htim4.Instance->CCR1=50;
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 800106c:	2100      	movs	r1, #0
 800106e:	486c      	ldr	r0, [pc, #432]	@ (8001220 <main+0x1f8>)
 8001070:	f005 f8ac 	bl	80061cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001074:	2104      	movs	r1, #4
 8001076:	4869      	ldr	r0, [pc, #420]	@ (800121c <main+0x1f4>)
 8001078:	f005 f8a8 	bl	80061cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 800107c:	2104      	movs	r1, #4
 800107e:	4868      	ldr	r0, [pc, #416]	@ (8001220 <main+0x1f8>)
 8001080:	f005 f8a4 	bl	80061cc <HAL_TIM_PWM_Start>
	//motor stuffs
	HAL_UART_Receive_IT (&huart2, Rx_data, 4);
 8001084:	2204      	movs	r2, #4
 8001086:	4967      	ldr	r1, [pc, #412]	@ (8001224 <main+0x1fc>)
 8001088:	4867      	ldr	r0, [pc, #412]	@ (8001228 <main+0x200>)
 800108a:	f006 f848 	bl	800711e <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	2108      	movs	r1, #8
 8001092:	4866      	ldr	r0, [pc, #408]	@ (800122c <main+0x204>)
 8001094:	f003 fd3e 	bl	8004b14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800109e:	4864      	ldr	r0, [pc, #400]	@ (8001230 <main+0x208>)
 80010a0:	f003 fd38 	bl	8004b14 <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_SET);
	//htim3.Instance->CCR1=50;
	//PID stuffs
	offset1=2.0/360;
 80010a4:	4963      	ldr	r1, [pc, #396]	@ (8001234 <main+0x20c>)
 80010a6:	a34c      	add	r3, pc, #304	@ (adr r3, 80011d8 <main+0x1b0>)
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	e9c1 2300 	strd	r2, r3, [r1]
	angle_setpoint1=180;
 80010b0:	4961      	ldr	r1, [pc, #388]	@ (8001238 <main+0x210>)
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	4b61      	ldr	r3, [pc, #388]	@ (800123c <main+0x214>)
 80010b8:	e9c1 2300 	strd	r2, r3, [r1]
	angle_setpoint2=180;
 80010bc:	4960      	ldr	r1, [pc, #384]	@ (8001240 <main+0x218>)
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b5e      	ldr	r3, [pc, #376]	@ (800123c <main+0x214>)
 80010c4:	e9c1 2300 	strd	r2, r3, [r1]
	//PID(&motor_1_PID,&rev,&PIDOut,&angle_setpoint, 2, 8, 0, _PID_P_ON_E, _PID_CD_DIRECT); //kinda fast rev
	PID(&motor_1_PID,&rev1,&PIDOut1,&angle_setpoint1, 5.7000, 57.0000, 0.1425, _PID_P_ON_E, _PID_CD_DIRECT); // first angular
 80010c8:	2300      	movs	r3, #0
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	2301      	movs	r3, #1
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	ed9f 2b43 	vldr	d2, [pc, #268]	@ 80011e0 <main+0x1b8>
 80010d4:	ed9f 1b44 	vldr	d1, [pc, #272]	@ 80011e8 <main+0x1c0>
 80010d8:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 80011f0 <main+0x1c8>
 80010dc:	4b56      	ldr	r3, [pc, #344]	@ (8001238 <main+0x210>)
 80010de:	4a59      	ldr	r2, [pc, #356]	@ (8001244 <main+0x21c>)
 80010e0:	4959      	ldr	r1, [pc, #356]	@ (8001248 <main+0x220>)
 80010e2:	485a      	ldr	r0, [pc, #360]	@ (800124c <main+0x224>)
 80010e4:	f000 fd04 	bl	8001af0 <PID>
	PID_SetMode(&motor_1_PID, _PID_MODE_AUTOMATIC);
 80010e8:	2101      	movs	r1, #1
 80010ea:	4858      	ldr	r0, [pc, #352]	@ (800124c <main+0x224>)
 80010ec:	f000 fe36 	bl	8001d5c <PID_SetMode>
	PID_SetSampleTime(&motor_1_PID,4);
 80010f0:	2104      	movs	r1, #4
 80010f2:	4856      	ldr	r0, [pc, #344]	@ (800124c <main+0x224>)
 80010f4:	f000 ffa6 	bl	8002044 <PID_SetSampleTime>
	PID_SetOutputLimits(&motor_1_PID, -100, 100);
 80010f8:	ed9f 1b3f 	vldr	d1, [pc, #252]	@ 80011f8 <main+0x1d0>
 80010fc:	ed9f 0b40 	vldr	d0, [pc, #256]	@ 8001200 <main+0x1d8>
 8001100:	4852      	ldr	r0, [pc, #328]	@ (800124c <main+0x224>)
 8001102:	f000 fe49 	bl	8001d98 <PID_SetOutputLimits>
	PID(&motor_2_PID,&rev2,&PIDOut2,&angle_setpoint2, 5.7000, 57.0000, 0.1425, _PID_P_ON_E, _PID_CD_DIRECT); // first angular
 8001106:	2300      	movs	r3, #0
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	2301      	movs	r3, #1
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	ed9f 2b34 	vldr	d2, [pc, #208]	@ 80011e0 <main+0x1b8>
 8001112:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 80011e8 <main+0x1c0>
 8001116:	ed9f 0b36 	vldr	d0, [pc, #216]	@ 80011f0 <main+0x1c8>
 800111a:	4b49      	ldr	r3, [pc, #292]	@ (8001240 <main+0x218>)
 800111c:	4a4c      	ldr	r2, [pc, #304]	@ (8001250 <main+0x228>)
 800111e:	494d      	ldr	r1, [pc, #308]	@ (8001254 <main+0x22c>)
 8001120:	484d      	ldr	r0, [pc, #308]	@ (8001258 <main+0x230>)
 8001122:	f000 fce5 	bl	8001af0 <PID>
	PID_SetMode(&motor_2_PID, _PID_MODE_AUTOMATIC);
 8001126:	2101      	movs	r1, #1
 8001128:	484b      	ldr	r0, [pc, #300]	@ (8001258 <main+0x230>)
 800112a:	f000 fe17 	bl	8001d5c <PID_SetMode>
	PID_SetSampleTime(&motor_2_PID,4);
 800112e:	2104      	movs	r1, #4
 8001130:	4849      	ldr	r0, [pc, #292]	@ (8001258 <main+0x230>)
 8001132:	f000 ff87 	bl	8002044 <PID_SetSampleTime>
	PID_SetOutputLimits(&motor_2_PID, -100, 100);
 8001136:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 80011f8 <main+0x1d0>
 800113a:	ed9f 0b31 	vldr	d0, [pc, #196]	@ 8001200 <main+0x1d8>
 800113e:	4846      	ldr	r0, [pc, #280]	@ (8001258 <main+0x230>)
 8001140:	f000 fe2a 	bl	8001d98 <PID_SetOutputLimits>
	Moving_Average_Init(&mot1_filterStruct);
 8001144:	4845      	ldr	r0, [pc, #276]	@ (800125c <main+0x234>)
 8001146:	f000 fc77 	bl	8001a38 <Moving_Average_Init>
	Moving_Average_Init(&mot2_filterStruct);
 800114a:	4845      	ldr	r0, [pc, #276]	@ (8001260 <main+0x238>)
 800114c:	f000 fc74 	bl	8001a38 <Moving_Average_Init>
	//set initial angle
	//cw(100);
	//HAL_Delay(500);
	//stop();
	HAL_UART_Transmit(&huart2, str, sizeof(str), 1000);
 8001150:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001154:	2298      	movs	r2, #152	@ 0x98
 8001156:	4943      	ldr	r1, [pc, #268]	@ (8001264 <main+0x23c>)
 8001158:	4833      	ldr	r0, [pc, #204]	@ (8001228 <main+0x200>)
 800115a:	f005 ff4e 	bl	8006ffa <HAL_UART_Transmit>
	//sprintf_min((char*)str,"test\n");//,angle2,revol2);
	HAL_UART_Transmit(&huart2,str,sizeof(str),0xff);
 800115e:	23ff      	movs	r3, #255	@ 0xff
 8001160:	2298      	movs	r2, #152	@ 0x98
 8001162:	4940      	ldr	r1, [pc, #256]	@ (8001264 <main+0x23c>)
 8001164:	4830      	ldr	r0, [pc, #192]	@ (8001228 <main+0x200>)
 8001166:	f005 ff48 	bl	8006ffa <HAL_UART_Transmit>
	tle5012_Rset();
 800116a:	f003 f819 	bl	80041a0 <tle5012_Rset>
	tle5012_Rset();
 800116e:	f003 f817 	bl	80041a0 <tle5012_Rset>
	tle5012_Rset();
 8001172:	f003 f815 	bl	80041a0 <tle5012_Rset>
	tle5012_Rset();
 8001176:	f003 f813 	bl	80041a0 <tle5012_Rset>
	read_sensors();
 800117a:	f000 fba9 	bl	80018d0 <read_sensors>
	read_sensors();
 800117e:	f000 fba7 	bl	80018d0 <read_sensors>
	read_sensors();
 8001182:	f000 fba5 	bl	80018d0 <read_sensors>
	read_sensors();
 8001186:	f000 fba3 	bl	80018d0 <read_sensors>
	read_sensors();
 800118a:	f000 fba1 	bl	80018d0 <read_sensors>
	read_sensors();
 800118e:	f000 fb9f 	bl	80018d0 <read_sensors>
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
	reset_motors();
 8001192:	f000 f94f 	bl	8001434 <reset_motors>
	tle5012_Rset();
 8001196:	f003 f803 	bl	80041a0 <tle5012_Rset>
	HAL_Delay(3000);
 800119a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800119e:	f003 f951 	bl	8004444 <HAL_Delay>
	angle_setpoint1=init_angle_1;
 80011a2:	4925      	ldr	r1, [pc, #148]	@ (8001238 <main+0x210>)
 80011a4:	a318      	add	r3, pc, #96	@ (adr r3, 8001208 <main+0x1e0>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	e9c1 2300 	strd	r2, r3, [r1]
	angle_setpoint2=init_angle_2;
 80011ae:	4924      	ldr	r1, [pc, #144]	@ (8001240 <main+0x218>)
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001268 <main+0x240>)
 80011b6:	e9c1 2300 	strd	r2, r3, [r1]
	goto_angle1(0.25);
 80011ba:	ed9f 0b15 	vldr	d0, [pc, #84]	@ 8001210 <main+0x1e8>
 80011be:	f000 f955 	bl	800146c <goto_angle1>
	goto_angle2(0.25);
 80011c2:	ed9f 0b13 	vldr	d0, [pc, #76]	@ 8001210 <main+0x1e8>
 80011c6:	f000 fa15 	bl	80015f4 <goto_angle2>
	  		}*/

	  		//sprintf_min((char*)string,"rx: %d%d%d%d%d%d \r\n",Rx_data[0],Rx_data[1],Rx_data[2],Rx_data[3],Rx_data[4],Rx_data[5]);
	  		//HAL_UART_Transmit(&huart2,string,sizeof(string),0xff);
	  		//sprintf_min((char*)string,"1: %.2f,%d,%.2f  2: %.2f,%d \r\n",angle_,revol,PIDOut,angle2,revol2);
	  read_sensors();
 80011ca:	f000 fb81 	bl	80018d0 <read_sensors>
	  print_debug();
 80011ce:	f000 faf1 	bl	80017b4 <print_debug>
  {
 80011d2:	bf00      	nop
 80011d4:	e7f9      	b.n	80011ca <main+0x1a2>
 80011d6:	bf00      	nop
 80011d8:	16c16c17 	.word	0x16c16c17
 80011dc:	3f76c16c 	.word	0x3f76c16c
 80011e0:	a3d70a3d 	.word	0xa3d70a3d
 80011e4:	3fc23d70 	.word	0x3fc23d70
 80011e8:	00000000 	.word	0x00000000
 80011ec:	404c8000 	.word	0x404c8000
 80011f0:	cccccccd 	.word	0xcccccccd
 80011f4:	4016cccc 	.word	0x4016cccc
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40590000 	.word	0x40590000
 8001200:	00000000 	.word	0x00000000
 8001204:	c0590000 	.word	0xc0590000
 8001208:	47ae147b 	.word	0x47ae147b
 800120c:	4032fae1 	.word	0x4032fae1
 8001210:	00000000 	.word	0x00000000
 8001214:	3fd00000 	.word	0x3fd00000
 8001218:	200002d0 	.word	0x200002d0
 800121c:	20000318 	.word	0x20000318
 8001220:	20000360 	.word	0x20000360
 8001224:	20000200 	.word	0x20000200
 8001228:	200003a8 	.word	0x200003a8
 800122c:	40020400 	.word	0x40020400
 8001230:	40020800 	.word	0x40020800
 8001234:	200001e8 	.word	0x200001e8
 8001238:	200001e0 	.word	0x200001e0
 800123c:	40668000 	.word	0x40668000
 8001240:	200001f8 	.word	0x200001f8
 8001244:	200001d8 	.word	0x200001d8
 8001248:	200000e8 	.word	0x200000e8
 800124c:	200000f8 	.word	0x200000f8
 8001250:	200001f0 	.word	0x200001f0
 8001254:	200000f0 	.word	0x200000f0
 8001258:	20000168 	.word	0x20000168
 800125c:	2000020c 	.word	0x2000020c
 8001260:	2000023c 	.word	0x2000023c
 8001264:	20000000 	.word	0x20000000
 8001268:	40324000 	.word	0x40324000

0800126c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b094      	sub	sp, #80	@ 0x50
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	f107 0320 	add.w	r3, r7, #32
 8001276:	2230      	movs	r2, #48	@ 0x30
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f006 feee 	bl	800805c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <SystemClock_Config+0xc8>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001298:	4a26      	ldr	r2, [pc, #152]	@ (8001334 <SystemClock_Config+0xc8>)
 800129a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129e:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <SystemClock_Config+0xc8>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	4b21      	ldr	r3, [pc, #132]	@ (8001338 <SystemClock_Config+0xcc>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a20      	ldr	r2, [pc, #128]	@ (8001338 <SystemClock_Config+0xcc>)
 80012b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <SystemClock_Config+0xcc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c8:	2301      	movs	r3, #1
 80012ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012cc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d2:	2302      	movs	r3, #2
 80012d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012dc:	2304      	movs	r3, #4
 80012de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80012e0:	2364      	movs	r3, #100	@ 0x64
 80012e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012e8:	2304      	movs	r3, #4
 80012ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ec:	f107 0320 	add.w	r3, r7, #32
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fc29 	bl	8004b48 <HAL_RCC_OscConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012fc:	f000 fb88 	bl	8001a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001300:	230f      	movs	r3, #15
 8001302:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001304:	2302      	movs	r3, #2
 8001306:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800130c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001310:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	2103      	movs	r1, #3
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fe8b 	bl	8005038 <HAL_RCC_ClockConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001328:	f000 fb72 	bl	8001a10 <Error_Handler>
  }
}
 800132c:	bf00      	nop
 800132e:	3750      	adds	r7, #80	@ 0x50
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	40007000 	.word	0x40007000

0800133c <ccw1>:

/* USER CODE BEGIN 4 */
void ccw1(int speed)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	speed=i_abs(speed);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f002 ffd3 	bl	80042f0 <i_abs>
 800134a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPSIOA,GPIO_PIN_7,GPIO_PIN_SET);
	htim3.Instance->CCR1=speed;
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <ccw1+0x28>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2=0;
 8001354:	4b03      	ldr	r3, [pc, #12]	@ (8001364 <ccw1+0x28>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2200      	movs	r2, #0
 800135a:	639a      	str	r2, [r3, #56]	@ 0x38

	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
	//htim4.Instance->CCR1=0;
	//htim4.Instance->CCR2=speed;
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000318 	.word	0x20000318

08001368 <ccw2>:

void ccw2(int speed)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	speed=i_abs(speed);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f002 ffbd 	bl	80042f0 <i_abs>
 8001376:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
	htim4.Instance->CCR1=0;
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <ccw2+0x28>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2200      	movs	r2, #0
 800137e:	635a      	str	r2, [r3, #52]	@ 0x34
	htim4.Instance->CCR2=speed;
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <ccw2+0x28>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000360 	.word	0x20000360

08001394 <cw1>:

void cw1(int speed)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	speed=i_abs(speed);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f002 ffa7 	bl	80042f0 <i_abs>
 80013a2:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
	htim3.Instance->CCR1=0;
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <cw1+0x28>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2200      	movs	r2, #0
 80013aa:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2=speed;
 80013ac:	4b03      	ldr	r3, [pc, #12]	@ (80013bc <cw1+0x28>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	639a      	str	r2, [r3, #56]	@ 0x38

	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
	//htim4.Instance->CCR1=speed;
	//htim4.Instance->CCR2=0;

}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000318 	.word	0x20000318

080013c0 <cw2>:

void cw2(int speed)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	speed=i_abs(speed);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f002 ff91 	bl	80042f0 <i_abs>
 80013ce:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
	htim4.Instance->CCR1=speed;
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <cw2+0x28>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	635a      	str	r2, [r3, #52]	@ 0x34
	htim4.Instance->CCR2=0;
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <cw2+0x28>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2200      	movs	r2, #0
 80013de:	639a      	str	r2, [r3, #56]	@ 0x38

}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000360 	.word	0x20000360

080013ec <stop1>:

void stop1()
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1=100;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <stop1+0x20>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2264      	movs	r2, #100	@ 0x64
 80013f6:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2=100;
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <stop1+0x20>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2264      	movs	r2, #100	@ 0x64
 80013fe:	639a      	str	r2, [r3, #56]	@ 0x38
	//htim4.Instance->CCR1=0;
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000318 	.word	0x20000318

08001410 <stop2>:

void stop2()
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
	htim4.Instance->CCR1=100;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <stop2+0x20>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2264      	movs	r2, #100	@ 0x64
 800141a:	635a      	str	r2, [r3, #52]	@ 0x34
	htim4.Instance->CCR2=100;
 800141c:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <stop2+0x20>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2264      	movs	r2, #100	@ 0x64
 8001422:	639a      	str	r2, [r3, #56]	@ 0x38
	//htim4.Instance->CCR1=0;
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000360 	.word	0x20000360

08001434 <reset_motors>:
void reset_motors()
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1=0;
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <reset_motors+0x30>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2200      	movs	r2, #0
 800143e:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2=0;
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <reset_motors+0x30>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2200      	movs	r2, #0
 8001446:	639a      	str	r2, [r3, #56]	@ 0x38
	htim4.Instance->CCR1=0;
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <reset_motors+0x34>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	635a      	str	r2, [r3, #52]	@ 0x34
	htim4.Instance->CCR2=0;
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <reset_motors+0x34>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2200      	movs	r2, #0
 8001456:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000318 	.word	0x20000318
 8001468:	20000360 	.word	0x20000360

0800146c <goto_angle1>:

void goto_angle1(double error)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	ed87 0b00 	vstr	d0, [r7]
	read_sensors();
 8001476:	f000 fa2b 	bl	80018d0 <read_sensors>
	abs_val=r_abs(rev1-angle_setpoint1);
 800147a:	4b57      	ldr	r3, [pc, #348]	@ (80015d8 <goto_angle1+0x16c>)
 800147c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001480:	4b56      	ldr	r3, [pc, #344]	@ (80015dc <goto_angle1+0x170>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7fe feab 	bl	80001e0 <__aeabi_dsub>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff fb3f 	bl	8000b14 <__aeabi_d2f>
 8001496:	4603      	mov	r3, r0
 8001498:	ee00 3a10 	vmov	s0, r3
 800149c:	f000 f96e 	bl	800177c <r_abs>
 80014a0:	ee10 3a10 	vmov	r3, s0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe fffb 	bl	80004a0 <__aeabi_f2d>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	494c      	ldr	r1, [pc, #304]	@ (80015e0 <goto_angle1+0x174>)
 80014b0:	e9c1 2300 	strd	r2, r3, [r1]
	while (abs_val>error)
 80014b4:	e07e      	b.n	80015b4 <goto_angle1+0x148>
	{
		read_sensors();
 80014b6:	f000 fa0b 	bl	80018d0 <read_sensors>
		abs_val=r_abs(rev1-angle_setpoint1);
 80014ba:	4b47      	ldr	r3, [pc, #284]	@ (80015d8 <goto_angle1+0x16c>)
 80014bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014c0:	4b46      	ldr	r3, [pc, #280]	@ (80015dc <goto_angle1+0x170>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7fe fe8b 	bl	80001e0 <__aeabi_dsub>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fb1f 	bl	8000b14 <__aeabi_d2f>
 80014d6:	4603      	mov	r3, r0
 80014d8:	ee00 3a10 	vmov	s0, r3
 80014dc:	f000 f94e 	bl	800177c <r_abs>
 80014e0:	ee10 3a10 	vmov	r3, s0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ffdb 	bl	80004a0 <__aeabi_f2d>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	493c      	ldr	r1, [pc, #240]	@ (80015e0 <goto_angle1+0x174>)
 80014f0:	e9c1 2300 	strd	r2, r3, [r1]
		PID_Compute(&motor_1_PID);
 80014f4:	483b      	ldr	r0, [pc, #236]	@ (80015e4 <goto_angle1+0x178>)
 80014f6:	f000 fb47 	bl	8001b88 <PID_Compute>
		if (PIDOut1>100.0)
 80014fa:	4b3b      	ldr	r3, [pc, #236]	@ (80015e8 <goto_angle1+0x17c>)
 80014fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	4b39      	ldr	r3, [pc, #228]	@ (80015ec <goto_angle1+0x180>)
 8001506:	f7ff fab3 	bl	8000a70 <__aeabi_dcmpgt>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <goto_angle1+0xb0>
		{
		PIDOut1=100.0;
 8001510:	4935      	ldr	r1, [pc, #212]	@ (80015e8 <goto_angle1+0x17c>)
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b35      	ldr	r3, [pc, #212]	@ (80015ec <goto_angle1+0x180>)
 8001518:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (PIDOut1<-100.0)
 800151c:	4b32      	ldr	r3, [pc, #200]	@ (80015e8 <goto_angle1+0x17c>)
 800151e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	4b32      	ldr	r3, [pc, #200]	@ (80015f0 <goto_angle1+0x184>)
 8001528:	f7ff fa84 	bl	8000a34 <__aeabi_dcmplt>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <goto_angle1+0xd2>
		{
		PIDOut1=-100.0;
 8001532:	492d      	ldr	r1, [pc, #180]	@ (80015e8 <goto_angle1+0x17c>)
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	4b2d      	ldr	r3, [pc, #180]	@ (80015f0 <goto_angle1+0x184>)
 800153a:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (PIDOut1<0)
 800153e:	4b2a      	ldr	r3, [pc, #168]	@ (80015e8 <goto_angle1+0x17c>)
 8001540:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	f7ff fa72 	bl	8000a34 <__aeabi_dcmplt>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00a      	beq.n	800156c <goto_angle1+0x100>
		{
		ccw1((int)PIDOut1);
 8001556:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <goto_angle1+0x17c>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fa90 	bl	8000a84 <__aeabi_d2iz>
 8001564:	4603      	mov	r3, r0
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fee8 	bl	800133c <ccw1>
		}
		if (PIDOut1>0) {
 800156c:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <goto_angle1+0x17c>)
 800156e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	f7ff fa79 	bl	8000a70 <__aeabi_dcmpgt>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00a      	beq.n	800159a <goto_angle1+0x12e>
		cw1((int)PIDOut1);
 8001584:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <goto_angle1+0x17c>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fa79 	bl	8000a84 <__aeabi_d2iz>
 8001592:	4603      	mov	r3, r0
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fefd 	bl	8001394 <cw1>
		}
		if (abs_val<=error)
 800159a:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <goto_angle1+0x174>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015a4:	f7ff fa5a 	bl	8000a5c <__aeabi_dcmpge>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d100      	bne.n	80015b0 <goto_angle1+0x144>
 80015ae:	e001      	b.n	80015b4 <goto_angle1+0x148>
		{
			stop1();
 80015b0:	f7ff ff1c 	bl	80013ec <stop1>
	while (abs_val>error)
 80015b4:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <goto_angle1+0x174>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015be:	f7ff fa39 	bl	8000a34 <__aeabi_dcmplt>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f47f af76 	bne.w	80014b6 <goto_angle1+0x4a>
			  			//angle_setpoint=rev;
		}
		//sprintf_min((char*)str,"%.2f,%.3f,%.5f,%d,%.2f,%.3f,%.3f\r\n",angle_,rev,angle2,rev2,PIDOut,angle_setpoint,angle_setpoint2,r_abs(rev-angle_setpoint));
		//HAL_UART_Transmit(&huart2,str,sizeof(str),0xff);
	}
	stop1();
 80015ca:	f7ff ff0f 	bl	80013ec <stop1>


}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200000e8 	.word	0x200000e8
 80015dc:	200001e0 	.word	0x200001e0
 80015e0:	20000270 	.word	0x20000270
 80015e4:	200000f8 	.word	0x200000f8
 80015e8:	200001d8 	.word	0x200001d8
 80015ec:	40590000 	.word	0x40590000
 80015f0:	c0590000 	.word	0xc0590000

080015f4 <goto_angle2>:

void goto_angle2(double error)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	ed87 0b00 	vstr	d0, [r7]

	read_sensors();
 80015fe:	f000 f967 	bl	80018d0 <read_sensors>
	abs_val=r_abs(rev1-angle_setpoint2);
 8001602:	4b57      	ldr	r3, [pc, #348]	@ (8001760 <goto_angle2+0x16c>)
 8001604:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001608:	4b56      	ldr	r3, [pc, #344]	@ (8001764 <goto_angle2+0x170>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7fe fde7 	bl	80001e0 <__aeabi_dsub>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fa7b 	bl	8000b14 <__aeabi_d2f>
 800161e:	4603      	mov	r3, r0
 8001620:	ee00 3a10 	vmov	s0, r3
 8001624:	f000 f8aa 	bl	800177c <r_abs>
 8001628:	ee10 3a10 	vmov	r3, s0
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff37 	bl	80004a0 <__aeabi_f2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	494c      	ldr	r1, [pc, #304]	@ (8001768 <goto_angle2+0x174>)
 8001638:	e9c1 2300 	strd	r2, r3, [r1]
	while (abs_val>error)
 800163c:	e07e      	b.n	800173c <goto_angle2+0x148>
	{
		read_sensors();
 800163e:	f000 f947 	bl	80018d0 <read_sensors>
		abs_val=r_abs(rev1-angle_setpoint2);
 8001642:	4b47      	ldr	r3, [pc, #284]	@ (8001760 <goto_angle2+0x16c>)
 8001644:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001648:	4b46      	ldr	r3, [pc, #280]	@ (8001764 <goto_angle2+0x170>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	f7fe fdc7 	bl	80001e0 <__aeabi_dsub>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff fa5b 	bl	8000b14 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	ee00 3a10 	vmov	s0, r3
 8001664:	f000 f88a 	bl	800177c <r_abs>
 8001668:	ee10 3a10 	vmov	r3, s0
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff17 	bl	80004a0 <__aeabi_f2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	493c      	ldr	r1, [pc, #240]	@ (8001768 <goto_angle2+0x174>)
 8001678:	e9c1 2300 	strd	r2, r3, [r1]
		PID_Compute(&motor_2_PID);
 800167c:	483b      	ldr	r0, [pc, #236]	@ (800176c <goto_angle2+0x178>)
 800167e:	f000 fa83 	bl	8001b88 <PID_Compute>
		if (PIDOut2>100.0)
 8001682:	4b3b      	ldr	r3, [pc, #236]	@ (8001770 <goto_angle2+0x17c>)
 8001684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b39      	ldr	r3, [pc, #228]	@ (8001774 <goto_angle2+0x180>)
 800168e:	f7ff f9ef 	bl	8000a70 <__aeabi_dcmpgt>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <goto_angle2+0xb0>
		{
		PIDOut2=100.0;
 8001698:	4935      	ldr	r1, [pc, #212]	@ (8001770 <goto_angle2+0x17c>)
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b35      	ldr	r3, [pc, #212]	@ (8001774 <goto_angle2+0x180>)
 80016a0:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (PIDOut2<-100.0)
 80016a4:	4b32      	ldr	r3, [pc, #200]	@ (8001770 <goto_angle2+0x17c>)
 80016a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	4b32      	ldr	r3, [pc, #200]	@ (8001778 <goto_angle2+0x184>)
 80016b0:	f7ff f9c0 	bl	8000a34 <__aeabi_dcmplt>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <goto_angle2+0xd2>
		{
		PIDOut2=-100.0;
 80016ba:	492d      	ldr	r1, [pc, #180]	@ (8001770 <goto_angle2+0x17c>)
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001778 <goto_angle2+0x184>)
 80016c2:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (PIDOut2<0)
 80016c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <goto_angle2+0x17c>)
 80016c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	f7ff f9ae 	bl	8000a34 <__aeabi_dcmplt>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00a      	beq.n	80016f4 <goto_angle2+0x100>
		{
		ccw2((int)PIDOut2);
 80016de:	4b24      	ldr	r3, [pc, #144]	@ (8001770 <goto_angle2+0x17c>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff f9cc 	bl	8000a84 <__aeabi_d2iz>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fe3a 	bl	8001368 <ccw2>
		}
		if (PIDOut2>0) {
 80016f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <goto_angle2+0x17c>)
 80016f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	f7ff f9b5 	bl	8000a70 <__aeabi_dcmpgt>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00a      	beq.n	8001722 <goto_angle2+0x12e>
		cw2((int)PIDOut2);
 800170c:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <goto_angle2+0x17c>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff f9b5 	bl	8000a84 <__aeabi_d2iz>
 800171a:	4603      	mov	r3, r0
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fe4f 	bl	80013c0 <cw2>
		}
		if (abs_val<=error)
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <goto_angle2+0x174>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800172c:	f7ff f996 	bl	8000a5c <__aeabi_dcmpge>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d100      	bne.n	8001738 <goto_angle2+0x144>
 8001736:	e001      	b.n	800173c <goto_angle2+0x148>
		{
			stop2();
 8001738:	f7ff fe6a 	bl	8001410 <stop2>
	while (abs_val>error)
 800173c:	4b0a      	ldr	r3, [pc, #40]	@ (8001768 <goto_angle2+0x174>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001746:	f7ff f975 	bl	8000a34 <__aeabi_dcmplt>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	f47f af76 	bne.w	800163e <goto_angle2+0x4a>
			  			//angle_setpoint=rev;
		}
		//sprintf_min((char*)str,"%.2f,%.3f,%.5f,%d,%.2f,%.3f,%.3f\r\n",angle_,rev,rev_rp,revol,PIDOut,angle_setpoint,r_abs(rev-angle_setpoint));
		//HAL_UART_Transmit(&huart2,str,sizeof(str),0xff);
	}
	stop2();
 8001752:	f7ff fe5d 	bl	8001410 <stop2>


}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200000e8 	.word	0x200000e8
 8001764:	200001f8 	.word	0x200001f8
 8001768:	20000270 	.word	0x20000270
 800176c:	20000168 	.word	0x20000168
 8001770:	200001f0 	.word	0x200001f0
 8001774:	40590000 	.word	0x40590000
 8001778:	c0590000 	.word	0xc0590000

0800177c <r_abs>:

float r_abs(float num)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	ed87 0a01 	vstr	s0, [r7, #4]
	if (num<0.0)
 8001786:	edd7 7a01 	vldr	s15, [r7, #4]
 800178a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	d505      	bpl.n	80017a0 <r_abs+0x24>
		{
			num=-num;
 8001794:	edd7 7a01 	vldr	s15, [r7, #4]
 8001798:	eef1 7a67 	vneg.f32	s15, s15
 800179c:	edc7 7a01 	vstr	s15, [r7, #4]
		}
	return num;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	ee07 3a90 	vmov	s15, r3
}
 80017a6:	eeb0 0a67 	vmov.f32	s0, s15
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <print_debug>:
void print_debug()
{
 80017b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017b8:	ed2d 8b04 	vpush	{d8-d9}
 80017bc:	b09f      	sub	sp, #124	@ 0x7c
 80017be:	af16      	add	r7, sp, #88	@ 0x58

	sprintf_min((char*)str,"%.2f,%.2f,%.3f,%.3f,%.5f,%.5f,%d,%d,%.2f,%.2f,%.2f,%.2f,%d \r\n",angle_,angle2,rev1,rev2,rev_rp1,rev_rp2,revol1,revol2,PIDOut1,PIDOut2,angle_setpoint1,angle_setpoint2,osc_state);//r_abs(rev1-angle_setpoint1));
 80017c0:	4b33      	ldr	r3, [pc, #204]	@ (8001890 <print_debug+0xdc>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe6b 	bl	80004a0 <__aeabi_f2d>
 80017ca:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80017ce:	4b31      	ldr	r3, [pc, #196]	@ (8001894 <print_debug+0xe0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fe64 	bl	80004a0 <__aeabi_f2d>
 80017d8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80017dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001898 <print_debug+0xe4>)
 80017de:	ed93 8b00 	vldr	d8, [r3]
 80017e2:	4b2e      	ldr	r3, [pc, #184]	@ (800189c <print_debug+0xe8>)
 80017e4:	ed93 9b00 	vldr	d9, [r3]
 80017e8:	4b2d      	ldr	r3, [pc, #180]	@ (80018a0 <print_debug+0xec>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fe57 	bl	80004a0 <__aeabi_f2d>
 80017f2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80017f6:	4b2b      	ldr	r3, [pc, #172]	@ (80018a4 <print_debug+0xf0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe50 	bl	80004a0 <__aeabi_f2d>
 8001800:	e9c7 0100 	strd	r0, r1, [r7]
 8001804:	4b28      	ldr	r3, [pc, #160]	@ (80018a8 <print_debug+0xf4>)
 8001806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180a:	461e      	mov	r6, r3
 800180c:	4b27      	ldr	r3, [pc, #156]	@ (80018ac <print_debug+0xf8>)
 800180e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001812:	461a      	mov	r2, r3
 8001814:	4b26      	ldr	r3, [pc, #152]	@ (80018b0 <print_debug+0xfc>)
 8001816:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <print_debug+0x100>)
 800181c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001820:	4b25      	ldr	r3, [pc, #148]	@ (80018b8 <print_debug+0x104>)
 8001822:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001826:	4b25      	ldr	r3, [pc, #148]	@ (80018bc <print_debug+0x108>)
 8001828:	e9d3 0100 	ldrd	r0, r1, [r3]
 800182c:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <print_debug+0x10c>)
 800182e:	f993 3000 	ldrsb.w	r3, [r3]
 8001832:	9314      	str	r3, [sp, #80]	@ 0x50
 8001834:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8001838:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 800183c:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8001840:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8001844:	920b      	str	r2, [sp, #44]	@ 0x2c
 8001846:	960a      	str	r6, [sp, #40]	@ 0x28
 8001848:	ed97 7b00 	vldr	d7, [r7]
 800184c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001850:	ed97 7b02 	vldr	d7, [r7, #8]
 8001854:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001858:	ed8d 9b04 	vstr	d9, [sp, #16]
 800185c:	ed8d 8b02 	vstr	d8, [sp, #8]
 8001860:	ed97 7b04 	vldr	d7, [r7, #16]
 8001864:	ed8d 7b00 	vstr	d7, [sp]
 8001868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800186c:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <print_debug+0x110>)
 800186e:	4816      	ldr	r0, [pc, #88]	@ (80018c8 <print_debug+0x114>)
 8001870:	f002 f878 	bl	8003964 <sprintf_>
	HAL_UART_Transmit(&huart2,str,sizeof(str),0xff);
 8001874:	23ff      	movs	r3, #255	@ 0xff
 8001876:	2298      	movs	r2, #152	@ 0x98
 8001878:	4913      	ldr	r1, [pc, #76]	@ (80018c8 <print_debug+0x114>)
 800187a:	4814      	ldr	r0, [pc, #80]	@ (80018cc <print_debug+0x118>)
 800187c:	f005 fbbd 	bl	8006ffa <HAL_UART_Transmit>
}
 8001880:	bf00      	nop
 8001882:	3724      	adds	r7, #36	@ 0x24
 8001884:	46bd      	mov	sp, r7
 8001886:	ecbd 8b04 	vpop	{d8-d9}
 800188a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800188e:	bf00      	nop
 8001890:	200000e0 	.word	0x200000e0
 8001894:	200000e4 	.word	0x200000e4
 8001898:	200000e8 	.word	0x200000e8
 800189c:	200000f0 	.word	0x200000f0
 80018a0:	200000d8 	.word	0x200000d8
 80018a4:	200000dc 	.word	0x200000dc
 80018a8:	200000d4 	.word	0x200000d4
 80018ac:	200000d6 	.word	0x200000d6
 80018b0:	200001d8 	.word	0x200001d8
 80018b4:	200001f0 	.word	0x200001f0
 80018b8:	200001e0 	.word	0x200001e0
 80018bc:	200001f8 	.word	0x200001f8
 80018c0:	2000009c 	.word	0x2000009c
 80018c4:	080080d0 	.word	0x080080d0
 80018c8:	20000000 	.word	0x20000000
 80018cc:	200003a8 	.word	0x200003a8

080018d0 <read_sensors>:
void read_sensors()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	angle_ = tle5012_ReadAngle();//Moving_Average_Compute(,&mot1_filterStruct);
 80018d4:	f002 fb34 	bl	8003f40 <tle5012_ReadAngle>
 80018d8:	eef0 7a40 	vmov.f32	s15, s0
 80018dc:	4b3b      	ldr	r3, [pc, #236]	@ (80019cc <read_sensors+0xfc>)
 80018de:	edc3 7a00 	vstr	s15, [r3]
	tle5012_ReadAngle2(&angle2);
 80018e2:	483b      	ldr	r0, [pc, #236]	@ (80019d0 <read_sensors+0x100>)
 80018e4:	f002 fb70 	bl	8003fc8 <tle5012_ReadAngle2>
	//angle2=Moving_Average_Compute(angle2,&mot2_filterStruct);
	revol1 = tle5012_ReadRevol(0);
 80018e8:	2000      	movs	r0, #0
 80018ea:	f002 fbb1 	bl	8004050 <tle5012_ReadRevol>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b38      	ldr	r3, [pc, #224]	@ (80019d4 <read_sensors+0x104>)
 80018f4:	801a      	strh	r2, [r3, #0]
	revol2 = tle5012_ReadRevol2(0);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f002 fbfe 	bl	80040f8 <tle5012_ReadRevol2>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b21a      	sxth	r2, r3
 8001900:	4b35      	ldr	r3, [pc, #212]	@ (80019d8 <read_sensors+0x108>)
 8001902:	801a      	strh	r2, [r3, #0]
	rev1=(revol1+(angle_/360))*360;
 8001904:	4b33      	ldr	r3, [pc, #204]	@ (80019d4 <read_sensors+0x104>)
 8001906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001912:	4b2e      	ldr	r3, [pc, #184]	@ (80019cc <read_sensors+0xfc>)
 8001914:	edd3 6a00 	vldr	s13, [r3]
 8001918:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 80019dc <read_sensors+0x10c>
 800191c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001924:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80019dc <read_sensors+0x10c>
 8001928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192c:	ee17 0a90 	vmov	r0, s15
 8001930:	f7fe fdb6 	bl	80004a0 <__aeabi_f2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4929      	ldr	r1, [pc, #164]	@ (80019e0 <read_sensors+0x110>)
 800193a:	e9c1 2300 	strd	r2, r3, [r1]
	rev2=(revol2+(angle2/360))*360;
 800193e:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <read_sensors+0x108>)
 8001940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800194c:	4b20      	ldr	r3, [pc, #128]	@ (80019d0 <read_sensors+0x100>)
 800194e:	edd3 6a00 	vldr	s13, [r3]
 8001952:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80019dc <read_sensors+0x10c>
 8001956:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800195a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80019dc <read_sensors+0x10c>
 8001962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001966:	ee17 0a90 	vmov	r0, s15
 800196a:	f7fe fd99 	bl	80004a0 <__aeabi_f2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	491c      	ldr	r1, [pc, #112]	@ (80019e4 <read_sensors+0x114>)
 8001974:	e9c1 2300 	strd	r2, r3, [r1]
	rev_rp1=(revol1+(angle_/360));
 8001978:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <read_sensors+0x104>)
 800197a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197e:	ee07 3a90 	vmov	s15, r3
 8001982:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <read_sensors+0xfc>)
 8001988:	edd3 6a00 	vldr	s13, [r3]
 800198c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80019dc <read_sensors+0x10c>
 8001990:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <read_sensors+0x118>)
 800199a:	edc3 7a00 	vstr	s15, [r3]
	rev_rp2=(revol2+(angle2/360));
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <read_sensors+0x108>)
 80019a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <read_sensors+0x100>)
 80019ae:	edd3 6a00 	vldr	s13, [r3]
 80019b2:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 80019dc <read_sensors+0x10c>
 80019b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <read_sensors+0x11c>)
 80019c0:	edc3 7a00 	vstr	s15, [r3]
	print_debug();
 80019c4:	f7ff fef6 	bl	80017b4 <print_debug>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200000e0 	.word	0x200000e0
 80019d0:	200000e4 	.word	0x200000e4
 80019d4:	200000d4 	.word	0x200000d4
 80019d8:	200000d6 	.word	0x200000d6
 80019dc:	43b40000 	.word	0x43b40000
 80019e0:	200000e8 	.word	0x200000e8
 80019e4:	200000f0 	.word	0x200000f0
 80019e8:	200000d8 	.word	0x200000d8
 80019ec:	200000dc 	.word	0x200000dc

080019f0 <srand>:
				}
	}

}

void srand(uint32_t s) {
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    seed = s;
 80019f8:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <srand+0x1c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000098 	.word	0x20000098

08001a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
}
 8001a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(10);
 8001a18:	200a      	movs	r0, #10
 8001a1a:	f002 fd13 	bl	8004444 <HAL_Delay>
	  HAL_UART_Transmit(&huart2,str,sizeof(str),1000);
 8001a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a22:	2298      	movs	r2, #152	@ 0x98
 8001a24:	4902      	ldr	r1, [pc, #8]	@ (8001a30 <Error_Handler+0x20>)
 8001a26:	4803      	ldr	r0, [pc, #12]	@ (8001a34 <Error_Handler+0x24>)
 8001a28:	f005 fae7 	bl	8006ffa <HAL_UART_Transmit>
	  HAL_Delay(10);
 8001a2c:	bf00      	nop
 8001a2e:	e7f3      	b.n	8001a18 <Error_Handler+0x8>
 8001a30:	20000000 	.word	0x20000000
 8001a34:	200003a8 	.word	0x200003a8

08001a38 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	filter_struct->Sum = 0;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	629a      	str	r2, [r3, #40]	@ 0x28
	filter_struct->WindowPointer = 0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
	
	for(uint32_t i=0; i<WindowLength; i++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	e007      	b.n	8001a64 <Moving_Average_Init+0x2c>
	{
		filter_struct->History[i] = 0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	2100      	movs	r1, #0
 8001a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t i=0; i<WindowLength; i++)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3301      	adds	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b09      	cmp	r3, #9
 8001a68:	d9f4      	bls.n	8001a54 <Moving_Average_Init+0x1c>
	}
}
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001aa8:	f7fe ffe2 	bl	8000a70 <__aeabi_dcmpgt>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8001abe:	e011      	b.n	8001ae4 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001acc:	f7fe ffb2 	bl	8000a34 <__aeabi_dcmplt>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d100      	bne.n	8001ad8 <PID_Init+0x60>
}
 8001ad6:	e005      	b.n	8001ae4 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	0000      	movs	r0, r0
	...

08001af0 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	@ 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6278      	str	r0, [r7, #36]	@ 0x24
 8001af8:	6239      	str	r1, [r7, #32]
 8001afa:	61fa      	str	r2, [r7, #28]
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	ed87 0b04 	vstr	d0, [r7, #16]
 8001b02:	ed87 1b02 	vstr	d1, [r7, #8]
 8001b06:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	6a3a      	ldr	r2, [r7, #32]
 8001b14:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	2200      	movs	r2, #0
 8001b20:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001b22:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8001b78 <PID+0x88>
 8001b26:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001b80 <PID+0x90>
 8001b2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b2c:	f000 f934 	bl	8001d98 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	2264      	movs	r2, #100	@ 0x64
 8001b34:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8001b36:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b3e:	f000 fa41 	bl	8001fc4 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8001b42:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001b46:	4619      	mov	r1, r3
 8001b48:	ed97 2b00 	vldr	d2, [r7]
 8001b4c:	ed97 1b02 	vldr	d1, [r7, #8]
 8001b50:	ed97 0b04 	vldr	d0, [r7, #16]
 8001b54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b56:	f000 f98d 	bl	8001e74 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8001b5a:	f002 fc67 	bl	800442c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	1ad2      	subs	r2, r2, r3
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	605a      	str	r2, [r3, #4]
	
}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	@ 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	f3af 8000 	nop.w
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	406fe000 	.word	0x406fe000
	...

08001b88 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b08c      	sub	sp, #48	@ 0x30
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	785b      	ldrb	r3, [r3, #1]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <PID_Compute+0x14>
	{
		return _FALSE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e0db      	b.n	8001d54 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8001b9c:	f002 fc46 	bl	800442c <HAL_GetTick>
 8001ba0:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	6a3a      	ldr	r2, [r7, #32]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	f0c0 80cd 	bcc.w	8001d52 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd0:	f7fe fb06 	bl	80001e0 <__aeabi_dsub>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001be2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001be6:	f7fe fafb 	bl	80001e0 <__aeabi_dsub>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001bfe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c02:	f7fe fca5 	bl	8000550 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	f7fe fae9 	bl	80001e4 <__adddf3>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d114      	bne.n	8001c4e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001c30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c34:	f7fe fc8c 	bl	8000550 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	4629      	mov	r1, r5
 8001c40:	f7fe face 	bl	80001e0 <__aeabi_dsub>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001c5a:	f7fe ff09 	bl	8000a70 <__aeabi_dcmpgt>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001c70:	e010      	b.n	8001c94 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001c7e:	f7fe fed9 	bl	8000a34 <__aeabi_dcmplt>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00b      	beq.n	8001cb4 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ca2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ca6:	f7fe fc53 	bl	8000550 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001cb2:	e005      	b.n	8001cc0 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001ccc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cd0:	f7fe fc3e 	bl	8000550 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4620      	mov	r0, r4
 8001cda:	4629      	mov	r1, r5
 8001cdc:	f7fe fa80 	bl	80001e0 <__aeabi_dsub>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ce8:	f7fe fa7c 	bl	80001e4 <__adddf3>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		
		if (output > uPID->OutMax)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001cfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001cfe:	f7fe feb7 	bl	8000a70 <__aeabi_dcmpgt>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001d0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001d12:	e00e      	b.n	8001d32 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001d1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d1e:	f7fe fe89 	bl	8000a34 <__aeabi_dcmplt>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001d2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d3a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d44:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d4c:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8001d52:	2300      	movs	r3, #0
	}
	
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3730      	adds	r7, #48	@ 0x30
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bdb0      	pop	{r4, r5, r7, pc}

08001d5c <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	bf0c      	ite	eq
 8001d6e:	2301      	moveq	r3, #1
 8001d70:	2300      	movne	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d006      	beq.n	8001d8a <PID_SetMode+0x2e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	785b      	ldrb	r3, [r3, #1]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff fe77 	bl	8001a78 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	705a      	strb	r2, [r3, #1]
	
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6178      	str	r0, [r7, #20]
 8001da0:	ed87 0b02 	vstr	d0, [r7, #8]
 8001da4:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001db0:	f7fe fe54 	bl	8000a5c <__aeabi_dcmpge>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d158      	bne.n	8001e6c <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8001dba:	6979      	ldr	r1, [r7, #20]
 8001dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dc0:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 8001dc4:	6979      	ldr	r1, [r7, #20]
 8001dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dca:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	785b      	ldrb	r3, [r3, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d04b      	beq.n	8001e6e <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001de4:	f7fe fe44 	bl	8000a70 <__aeabi_dcmpgt>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001df8:	e9c1 2300 	strd	r2, r3, [r1]
 8001dfc:	e012      	b.n	8001e24 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001e0c:	f7fe fe12 	bl	8000a34 <__aeabi_dcmplt>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001e20:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001e30:	f7fe fe1e 	bl	8000a70 <__aeabi_dcmpgt>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001e40:	6979      	ldr	r1, [r7, #20]
 8001e42:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001e46:	e012      	b.n	8001e6e <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001e54:	f7fe fdee 	bl	8000a34 <__aeabi_dcmplt>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d007      	beq.n	8001e6e <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001e64:	6979      	ldr	r1, [r7, #20]
 8001e66:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001e6a:	e000      	b.n	8001e6e <PID_SetOutputLimits+0xd6>
		return;
 8001e6c:	bf00      	nop
		}
		else { }
		
	}
	
}
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	@ 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	61f8      	str	r0, [r7, #28]
 8001e7c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001e80:	ed87 1b02 	vstr	d1, [r7, #8]
 8001e84:	ed87 2b00 	vstr	d2, [r7]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e98:	f7fe fdcc 	bl	8000a34 <__aeabi_dcmplt>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 8089 	bne.w	8001fb6 <PID_SetTunings2+0x142>
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001eb0:	f7fe fdc0 	bl	8000a34 <__aeabi_dcmplt>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d17d      	bne.n	8001fb6 <PID_SetTunings2+0x142>
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ec6:	f7fe fdb5 	bl	8000a34 <__aeabi_dcmplt>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d172      	bne.n	8001fb6 <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	7efa      	ldrb	r2, [r7, #27]
 8001ed4:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001ed6:	7efb      	ldrb	r3, [r7, #27]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001ee8:	69f9      	ldr	r1, [r7, #28]
 8001eea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001eee:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001ef2:	69f9      	ldr	r1, [r7, #28]
 8001ef4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ef8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001efc:	69f9      	ldr	r1, [r7, #28]
 8001efe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f02:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe faa6 	bl	800045c <__aeabi_ui2d>
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc0 <PID_SetTunings2+0x14c>)
 8001f16:	f7fe fc45 	bl	80007a4 <__aeabi_ddiv>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8001f22:	69f9      	ldr	r1, [r7, #28]
 8001f24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f28:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001f2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f34:	f7fe fb0c 	bl	8000550 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	69f9      	ldr	r1, [r7, #28]
 8001f3e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f4a:	f7fe fc2b 	bl	80007a4 <__aeabi_ddiv>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	69f9      	ldr	r1, [r7, #28]
 8001f54:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	78db      	ldrb	r3, [r3, #3]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d12b      	bne.n	8001fb8 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001f66:	f04f 0000 	mov.w	r0, #0
 8001f6a:	f04f 0100 	mov.w	r1, #0
 8001f6e:	f7fe f937 	bl	80001e0 <__aeabi_dsub>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	69f9      	ldr	r1, [r7, #28]
 8001f78:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001f82:	f04f 0000 	mov.w	r0, #0
 8001f86:	f04f 0100 	mov.w	r1, #0
 8001f8a:	f7fe f929 	bl	80001e0 <__aeabi_dsub>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	69f9      	ldr	r1, [r7, #28]
 8001f94:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001f9e:	f04f 0000 	mov.w	r0, #0
 8001fa2:	f04f 0100 	mov.w	r1, #0
 8001fa6:	f7fe f91b 	bl	80001e0 <__aeabi_dsub>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	69f9      	ldr	r1, [r7, #28]
 8001fb0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8001fb4:	e000      	b.n	8001fb8 <PID_SetTunings2+0x144>
		return;
 8001fb6:	bf00      	nop
		
	}
	
}
 8001fb8:	3728      	adds	r7, #40	@ 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	408f4000 	.word	0x408f4000

08001fc4 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	785b      	ldrb	r3, [r3, #1]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d02e      	beq.n	8002036 <PID_SetControllerDirection+0x72>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	78db      	ldrb	r3, [r3, #3]
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d029      	beq.n	8002036 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001fe8:	f04f 0000 	mov.w	r0, #0
 8001fec:	f04f 0100 	mov.w	r1, #0
 8001ff0:	f7fe f8f6 	bl	80001e0 <__aeabi_dsub>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002004:	f04f 0000 	mov.w	r0, #0
 8002008:	f04f 0100 	mov.w	r1, #0
 800200c:	f7fe f8e8 	bl	80001e0 <__aeabi_dsub>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002020:	f04f 0000 	mov.w	r0, #0
 8002024:	f04f 0100 	mov.w	r1, #0
 8002028:	f7fe f8da 	bl	80001e0 <__aeabi_dsub>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	70da      	strb	r2, [r3, #3]
	
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002044:	b5b0      	push	{r4, r5, r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	dd2e      	ble.n	80020b2 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002054:	6838      	ldr	r0, [r7, #0]
 8002056:	f7fe fa11 	bl	800047c <__aeabi_i2d>
 800205a:	4604      	mov	r4, r0
 800205c:	460d      	mov	r5, r1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe f9fa 	bl	800045c <__aeabi_ui2d>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4620      	mov	r0, r4
 800206e:	4629      	mov	r1, r5
 8002070:	f7fe fb98 	bl	80007a4 <__aeabi_ddiv>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002082:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002086:	f7fe fa63 	bl	8000550 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800209a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800209e:	f7fe fb81 	bl	80007a4 <__aeabi_ddiv>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	609a      	str	r2, [r3, #8]
		
	}
	
}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bdb0      	pop	{r4, r5, r7, pc}

080020ba <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	4603      	mov	r3, r0
 80020c8:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d204      	bcs.n	80020dc <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4413      	add	r3, r2
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	701a      	strb	r2, [r3, #0]
  }
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	4603      	mov	r3, r0
 80020f6:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	e002      	b.n	800211a <_strnlen_s+0x16>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3301      	adds	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <_strnlen_s+0x28>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	1e5a      	subs	r2, r3, #1
 8002126:	603a      	str	r2, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f3      	bne.n	8002114 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	1ad3      	subs	r3, r2, r3
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	2b2f      	cmp	r3, #47	@ 0x2f
 800214c:	d904      	bls.n	8002158 <_is_digit+0x1a>
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	2b39      	cmp	r3, #57	@ 0x39
 8002152:	d801      	bhi.n	8002158 <_is_digit+0x1a>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <_is_digit+0x1c>
 8002158:	2300      	movs	r3, #0
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	b2db      	uxtb	r3, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002178:	e00e      	b.n	8002198 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4618      	mov	r0, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	1c59      	adds	r1, r3, #1
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6011      	str	r1, [r2, #0]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	4403      	add	r3, r0
 8002194:	3b30      	subs	r3, #48	@ 0x30
 8002196:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ffcd 	bl	800213e <_is_digit>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1e7      	bne.n	800217a <_atoi+0xe>
  }
  return i;
 80021aa:	68fb      	ldr	r3, [r7, #12]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80021c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d125      	bne.n	800221c <_out_rev+0x68>
 80021d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d120      	bne.n	800221c <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80021da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e00a      	b.n	80021f6 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	1c53      	adds	r3, r2, #1
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	68fc      	ldr	r4, [r7, #12]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68b9      	ldr	r1, [r7, #8]
 80021ec:	2020      	movs	r0, #32
 80021ee:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	3301      	adds	r3, #1
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d3f0      	bcc.n	80021e0 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80021fe:	e00d      	b.n	800221c <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002202:	3b01      	subs	r3, #1
 8002204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800220a:	4413      	add	r3, r2
 800220c:	7818      	ldrb	r0, [r3, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	1c53      	adds	r3, r2, #1
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	68fc      	ldr	r4, [r7, #12]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	47a0      	blx	r4
  while (len) {
 800221c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ee      	bne.n	8002200 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00e      	beq.n	800224a <_out_rev+0x96>
    while (idx - start_idx < width) {
 800222c:	e007      	b.n	800223e <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	1c53      	adds	r3, r2, #1
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	68fc      	ldr	r4, [r7, #12]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	2020      	movs	r0, #32
 800223c:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002246:	429a      	cmp	r2, r3
 8002248:	d8f1      	bhi.n	800222e <_out_rev+0x7a>
    }
  }

  return idx;
 800224a:	687b      	ldr	r3, [r7, #4]
}
 800224c:	4618      	mov	r0, r3
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd90      	pop	{r4, r7, pc}

08002254 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af04      	add	r7, sp, #16
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d136      	bne.n	80022da <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800226c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d018      	beq.n	80022a4 <_ntoa_format+0x50>
 8002272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d013      	beq.n	80022a4 <_ntoa_format+0x50>
 800227c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d104      	bne.n	800228e <_ntoa_format+0x3a>
 8002284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <_ntoa_format+0x50>
      width--;
 800228e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002290:	3b01      	subs	r3, #1
 8002292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002294:	e006      	b.n	80022a4 <_ntoa_format+0x50>
      buf[len++] = '0';
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	61fa      	str	r2, [r7, #28]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4413      	add	r3, r2
 80022a0:	2230      	movs	r2, #48	@ 0x30
 80022a2:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d20a      	bcs.n	80022c2 <_ntoa_format+0x6e>
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b1f      	cmp	r3, #31
 80022b0:	d9f1      	bls.n	8002296 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80022b2:	e006      	b.n	80022c2 <_ntoa_format+0x6e>
      buf[len++] = '0';
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	61fa      	str	r2, [r7, #28]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4413      	add	r3, r2
 80022be:	2230      	movs	r2, #48	@ 0x30
 80022c0:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80022c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d006      	beq.n	80022da <_ntoa_format+0x86>
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d202      	bcs.n	80022da <_ntoa_format+0x86>
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b1f      	cmp	r3, #31
 80022d8:	d9ec      	bls.n	80022b4 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80022da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d058      	beq.n	8002396 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80022e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d116      	bne.n	800231c <_ntoa_format+0xc8>
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <_ntoa_format+0xc8>
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d003      	beq.n	8002304 <_ntoa_format+0xb0>
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002300:	429a      	cmp	r2, r3
 8002302:	d10b      	bne.n	800231c <_ntoa_format+0xc8>
      len--;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	3b01      	subs	r3, #1
 8002308:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <_ntoa_format+0xc8>
 8002310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002312:	2b10      	cmp	r3, #16
 8002314:	d102      	bne.n	800231c <_ntoa_format+0xc8>
        len--;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b01      	subs	r3, #1
 800231a:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	2b10      	cmp	r3, #16
 8002320:	d10f      	bne.n	8002342 <_ntoa_format+0xee>
 8002322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10a      	bne.n	8002342 <_ntoa_format+0xee>
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b1f      	cmp	r3, #31
 8002330:	d807      	bhi.n	8002342 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	61fa      	str	r2, [r7, #28]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4413      	add	r3, r2
 800233c:	2278      	movs	r2, #120	@ 0x78
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	e01f      	b.n	8002382 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	2b10      	cmp	r3, #16
 8002346:	d10f      	bne.n	8002368 <_ntoa_format+0x114>
 8002348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234a:	f003 0320 	and.w	r3, r3, #32
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <_ntoa_format+0x114>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	2b1f      	cmp	r3, #31
 8002356:	d807      	bhi.n	8002368 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	61fa      	str	r2, [r7, #28]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4413      	add	r3, r2
 8002362:	2258      	movs	r2, #88	@ 0x58
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	e00c      	b.n	8002382 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	2b02      	cmp	r3, #2
 800236c:	d109      	bne.n	8002382 <_ntoa_format+0x12e>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	2b1f      	cmp	r3, #31
 8002372:	d806      	bhi.n	8002382 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	61fa      	str	r2, [r7, #28]
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4413      	add	r3, r2
 800237e:	2262      	movs	r2, #98	@ 0x62
 8002380:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	2b1f      	cmp	r3, #31
 8002386:	d806      	bhi.n	8002396 <_ntoa_format+0x142>
      buf[len++] = '0';
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	61fa      	str	r2, [r7, #28]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4413      	add	r3, r2
 8002392:	2230      	movs	r2, #48	@ 0x30
 8002394:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	2b1f      	cmp	r3, #31
 800239a:	d824      	bhi.n	80023e6 <_ntoa_format+0x192>
    if (negative) {
 800239c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <_ntoa_format+0x160>
      buf[len++] = '-';
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	61fa      	str	r2, [r7, #28]
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4413      	add	r3, r2
 80023ae:	222d      	movs	r2, #45	@ 0x2d
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e018      	b.n	80023e6 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80023b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	61fa      	str	r2, [r7, #28]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4413      	add	r3, r2
 80023c8:	222b      	movs	r2, #43	@ 0x2b
 80023ca:	701a      	strb	r2, [r3, #0]
 80023cc:	e00b      	b.n	80023e6 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80023ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <_ntoa_format+0x192>
      buf[len++] = ' ';
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	61fa      	str	r2, [r7, #28]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4413      	add	r3, r2
 80023e2:	2220      	movs	r2, #32
 80023e4:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80023e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e8:	9303      	str	r3, [sp, #12]
 80023ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f7ff fed9 	bl	80021b4 <_out_rev>
 8002402:	4603      	mov	r3, r0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b096      	sub	sp, #88	@ 0x58
 8002410:	af08      	add	r7, sp, #32
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 800241e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002426:	f023 0310 	bic.w	r3, r3, #16
 800242a:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800242c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <_ntoa_long+0x30>
 8002436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d032      	beq.n	80024a2 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 800243c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800243e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002440:	fbb3 f2f2 	udiv	r2, r3, r2
 8002444:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002446:	fb01 f202 	mul.w	r2, r1, r2
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002450:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002454:	2b09      	cmp	r3, #9
 8002456:	d804      	bhi.n	8002462 <_ntoa_long+0x56>
 8002458:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800245c:	3330      	adds	r3, #48	@ 0x30
 800245e:	b2da      	uxtb	r2, r3
 8002460:	e00d      	b.n	800247e <_ntoa_long+0x72>
 8002462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002464:	f003 0320 	and.w	r3, r3, #32
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <_ntoa_long+0x64>
 800246c:	2241      	movs	r2, #65	@ 0x41
 800246e:	e000      	b.n	8002472 <_ntoa_long+0x66>
 8002470:	2261      	movs	r2, #97	@ 0x61
 8002472:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002476:	4413      	add	r3, r2
 8002478:	b2db      	uxtb	r3, r3
 800247a:	3b0a      	subs	r3, #10
 800247c:	b2da      	uxtb	r2, r3
 800247e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002480:	1c59      	adds	r1, r3, #1
 8002482:	6379      	str	r1, [r7, #52]	@ 0x34
 8002484:	3338      	adds	r3, #56	@ 0x38
 8002486:	443b      	add	r3, r7
 8002488:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800248c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800248e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002490:	fbb2 f3f3 	udiv	r3, r2, r3
 8002494:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002496:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <_ntoa_long+0x96>
 800249c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800249e:	2b1f      	cmp	r3, #31
 80024a0:	d9cc      	bls.n	800243c <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80024a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a4:	9306      	str	r3, [sp, #24]
 80024a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024a8:	9305      	str	r3, [sp, #20]
 80024aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024ac:	9304      	str	r3, [sp, #16]
 80024ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024b0:	9303      	str	r3, [sp, #12]
 80024b2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80024b6:	9302      	str	r3, [sp, #8]
 80024b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f7ff fec3 	bl	8002254 <_ntoa_format>
 80024ce:	4603      	mov	r3, r0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3738      	adds	r7, #56	@ 0x38
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b096      	sub	sp, #88	@ 0x58
 80024dc:	af08      	add	r7, sp, #32
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 80024ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024ee:	4313      	orrs	r3, r2
 80024f0:	d103      	bne.n	80024fa <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80024f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024f4:	f023 0310 	bic.w	r3, r3, #16
 80024f8:	663b      	str	r3, [r7, #96]	@ 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80024fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <_ntoa_long_long+0x34>
 8002504:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002508:	4313      	orrs	r3, r2
 800250a:	d037      	beq.n	800257c <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 800250c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002514:	f7fe fb4e 	bl	8000bb4 <__aeabi_uldivmod>
 8002518:	4613      	mov	r3, r2
 800251a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800251e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002522:	2b09      	cmp	r3, #9
 8002524:	d804      	bhi.n	8002530 <_ntoa_long_long+0x58>
 8002526:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800252a:	3330      	adds	r3, #48	@ 0x30
 800252c:	b2da      	uxtb	r2, r3
 800252e:	e00d      	b.n	800254c <_ntoa_long_long+0x74>
 8002530:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <_ntoa_long_long+0x66>
 800253a:	2241      	movs	r2, #65	@ 0x41
 800253c:	e000      	b.n	8002540 <_ntoa_long_long+0x68>
 800253e:	2261      	movs	r2, #97	@ 0x61
 8002540:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002544:	4413      	add	r3, r2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	3b0a      	subs	r3, #10
 800254a:	b2da      	uxtb	r2, r3
 800254c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800254e:	1c59      	adds	r1, r3, #1
 8002550:	6379      	str	r1, [r7, #52]	@ 0x34
 8002552:	3338      	adds	r3, #56	@ 0x38
 8002554:	443b      	add	r3, r7
 8002556:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800255a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800255e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002562:	f7fe fb27 	bl	8000bb4 <__aeabi_uldivmod>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800256e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002572:	4313      	orrs	r3, r2
 8002574:	d002      	beq.n	800257c <_ntoa_long_long+0xa4>
 8002576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002578:	2b1f      	cmp	r3, #31
 800257a:	d9c7      	bls.n	800250c <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800257c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800257e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002580:	9206      	str	r2, [sp, #24]
 8002582:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002584:	9205      	str	r2, [sp, #20]
 8002586:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002588:	9204      	str	r2, [sp, #16]
 800258a:	9303      	str	r3, [sp, #12]
 800258c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002590:	9302      	str	r3, [sp, #8]
 8002592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	f107 0310 	add.w	r3, r7, #16
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f7ff fe56 	bl	8002254 <_ntoa_format>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3738      	adds	r7, #56	@ 0x38
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	0000      	movs	r0, r0
 80025b4:	0000      	movs	r0, r0
	...

080025b8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b09d      	sub	sp, #116	@ 0x74
 80025bc:	af04      	add	r7, sp, #16
 80025be:	6178      	str	r0, [r7, #20]
 80025c0:	6139      	str	r1, [r7, #16]
 80025c2:	60fa      	str	r2, [r7, #12]
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  double diff = 0.0;
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80025da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025e2:	f7fe fa1d 	bl	8000a20 <__aeabi_dcmpeq>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10f      	bne.n	800260c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80025ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025ee:	9303      	str	r3, [sp, #12]
 80025f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025f2:	9302      	str	r3, [sp, #8]
 80025f4:	2303      	movs	r3, #3
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	4ba7      	ldr	r3, [pc, #668]	@ (8002898 <_ftoa+0x2e0>)
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	6939      	ldr	r1, [r7, #16]
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7ff fdd6 	bl	80021b4 <_out_rev>
 8002608:	4603      	mov	r3, r0
 800260a:	e222      	b.n	8002a52 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 800260c:	f04f 32ff 	mov.w	r2, #4294967295
 8002610:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 8002614:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002618:	f7fe fa0c 	bl	8000a34 <__aeabi_dcmplt>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00f      	beq.n	8002642 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002622:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002624:	9303      	str	r3, [sp, #12]
 8002626:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002628:	9302      	str	r3, [sp, #8]
 800262a:	2304      	movs	r3, #4
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	4b9b      	ldr	r3, [pc, #620]	@ (800289c <_ftoa+0x2e4>)
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	6939      	ldr	r1, [r7, #16]
 8002638:	6978      	ldr	r0, [r7, #20]
 800263a:	f7ff fdbb 	bl	80021b4 <_out_rev>
 800263e:	4603      	mov	r3, r0
 8002640:	e207      	b.n	8002a52 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8002642:	f04f 32ff 	mov.w	r2, #4294967295
 8002646:	4b96      	ldr	r3, [pc, #600]	@ (80028a0 <_ftoa+0x2e8>)
 8002648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800264c:	f7fe fa10 	bl	8000a70 <__aeabi_dcmpgt>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d01d      	beq.n	8002692 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002656:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <_ftoa+0xac>
 8002660:	4b90      	ldr	r3, [pc, #576]	@ (80028a4 <_ftoa+0x2ec>)
 8002662:	e000      	b.n	8002666 <_ftoa+0xae>
 8002664:	4b90      	ldr	r3, [pc, #576]	@ (80028a8 <_ftoa+0x2f0>)
 8002666:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002668:	f002 0204 	and.w	r2, r2, #4
 800266c:	2a00      	cmp	r2, #0
 800266e:	d001      	beq.n	8002674 <_ftoa+0xbc>
 8002670:	2204      	movs	r2, #4
 8002672:	e000      	b.n	8002676 <_ftoa+0xbe>
 8002674:	2203      	movs	r2, #3
 8002676:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002678:	9103      	str	r1, [sp, #12]
 800267a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800267c:	9102      	str	r1, [sp, #8]
 800267e:	9201      	str	r2, [sp, #4]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	6939      	ldr	r1, [r7, #16]
 8002688:	6978      	ldr	r0, [r7, #20]
 800268a:	f7ff fd93 	bl	80021b4 <_out_rev>
 800268e:	4603      	mov	r3, r0
 8002690:	e1df      	b.n	8002a52 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002692:	a37d      	add	r3, pc, #500	@ (adr r3, 8002888 <_ftoa+0x2d0>)
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800269c:	f7fe f9e8 	bl	8000a70 <__aeabi_dcmpgt>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <_ftoa+0x102>
 80026a6:	a37a      	add	r3, pc, #488	@ (adr r3, 8002890 <_ftoa+0x2d8>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026b0:	f7fe f9c0 	bl	8000a34 <__aeabi_dcmplt>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00f      	beq.n	80026da <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80026ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026bc:	9302      	str	r3, [sp, #8]
 80026be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	ed97 0b00 	vldr	d0, [r7]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	6939      	ldr	r1, [r7, #16]
 80026d0:	6978      	ldr	r0, [r7, #20]
 80026d2:	f000 f9c9 	bl	8002a68 <_etoa>
 80026d6:	4603      	mov	r3, r0
 80026d8:	e1bb      	b.n	8002a52 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  if (value < 0) {
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026ec:	f7fe f9a2 	bl	8000a34 <__aeabi_dcmplt>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00e      	beq.n	8002714 <_ftoa+0x15c>
    negative = true;
 80026f6:	2301      	movs	r3, #1
 80026f8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    value = 0 - value;
 80026fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002700:	f04f 0000 	mov.w	r0, #0
 8002704:	f04f 0100 	mov.w	r1, #0
 8002708:	f7fd fd6a 	bl	80001e0 <__aeabi_dsub>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002714:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10d      	bne.n	800273a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800271e:	2306      	movs	r3, #6
 8002720:	673b      	str	r3, [r7, #112]	@ 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002722:	e00a      	b.n	800273a <_ftoa+0x182>
    buf[len++] = '0';
 8002724:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800272a:	3360      	adds	r3, #96	@ 0x60
 800272c:	443b      	add	r3, r7
 800272e:	2230      	movs	r2, #48	@ 0x30
 8002730:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002734:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002736:	3b01      	subs	r3, #1
 8002738:	673b      	str	r3, [r7, #112]	@ 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800273a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800273c:	2b1f      	cmp	r3, #31
 800273e:	d802      	bhi.n	8002746 <_ftoa+0x18e>
 8002740:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002742:	2b09      	cmp	r3, #9
 8002744:	d8ee      	bhi.n	8002724 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002746:	e9d7 0100 	ldrd	r0, r1, [r7]
 800274a:	f7fe f99b 	bl	8000a84 <__aeabi_d2iz>
 800274e:	4603      	mov	r3, r0
 8002750:	657b      	str	r3, [r7, #84]	@ 0x54
  double tmp = (value - whole) * pow10[prec];
 8002752:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002754:	f7fd fe92 	bl	800047c <__aeabi_i2d>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002760:	f7fd fd3e 	bl	80001e0 <__aeabi_dsub>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	4a4f      	ldr	r2, [pc, #316]	@ (80028ac <_ftoa+0x2f4>)
 800276e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	f7fd feea 	bl	8000550 <__aeabi_dmul>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  unsigned long frac = (unsigned long)tmp;
 8002784:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002788:	f7fe f9a4 	bl	8000ad4 <__aeabi_d2uiz>
 800278c:	4603      	mov	r3, r0
 800278e:	653b      	str	r3, [r7, #80]	@ 0x50
  diff = tmp - frac;
 8002790:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002792:	f7fd fe63 	bl	800045c <__aeabi_ui2d>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800279e:	f7fd fd1f 	bl	80001e0 <__aeabi_dsub>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  if (diff > 0.5) {
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	4b40      	ldr	r3, [pc, #256]	@ (80028b0 <_ftoa+0x2f8>)
 80027b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80027b4:	f7fe f95c 	bl	8000a70 <__aeabi_dcmpgt>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <_ftoa+0x234>
    ++frac;
 80027be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027c0:	3301      	adds	r3, #1
 80027c2:	653b      	str	r3, [r7, #80]	@ 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80027c4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80027c6:	f7fd fe49 	bl	800045c <__aeabi_ui2d>
 80027ca:	4a38      	ldr	r2, [pc, #224]	@ (80028ac <_ftoa+0x2f4>)
 80027cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fe f941 	bl	8000a5c <__aeabi_dcmpge>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01a      	beq.n	8002816 <_ftoa+0x25e>
      frac = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	653b      	str	r3, [r7, #80]	@ 0x50
      ++whole;
 80027e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e6:	3301      	adds	r3, #1
 80027e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80027ea:	e014      	b.n	8002816 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	4b2f      	ldr	r3, [pc, #188]	@ (80028b0 <_ftoa+0x2f8>)
 80027f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80027f6:	f7fe f91d 	bl	8000a34 <__aeabi_dcmplt>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002800:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002802:	2b00      	cmp	r3, #0
 8002804:	d004      	beq.n	8002810 <_ftoa+0x258>
 8002806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d002      	beq.n	8002816 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002812:	3301      	adds	r3, #1
 8002814:	653b      	str	r3, [r7, #80]	@ 0x50
  }

  if (prec == 0U) {
 8002816:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002818:	2b00      	cmp	r3, #0
 800281a:	d14b      	bne.n	80028b4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800281c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800281e:	f7fd fe2d 	bl	800047c <__aeabi_i2d>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	e9d7 0100 	ldrd	r0, r1, [r7]
 800282a:	f7fd fcd9 	bl	80001e0 <__aeabi_dsub>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002836:	2301      	movs	r3, #1
 8002838:	461c      	mov	r4, r3
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	4b1c      	ldr	r3, [pc, #112]	@ (80028b0 <_ftoa+0x2f8>)
 8002840:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002844:	f7fe f8f6 	bl	8000a34 <__aeabi_dcmplt>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <_ftoa+0x29a>
 800284e:	2300      	movs	r3, #0
 8002850:	461c      	mov	r4, r3
 8002852:	b2e3      	uxtb	r3, r4
 8002854:	f083 0301 	eor.w	r3, r3, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <_ftoa+0x2ba>
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <_ftoa+0x2f8>)
 8002864:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002868:	f7fe f902 	bl	8000a70 <__aeabi_dcmpgt>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d064      	beq.n	800293c <_ftoa+0x384>
 8002872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8081 	beq.w	8002980 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800287e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002880:	3301      	adds	r3, #1
 8002882:	657b      	str	r3, [r7, #84]	@ 0x54
 8002884:	e07c      	b.n	8002980 <_ftoa+0x3c8>
 8002886:	bf00      	nop
 8002888:	00000000 	.word	0x00000000
 800288c:	41cdcd65 	.word	0x41cdcd65
 8002890:	00000000 	.word	0x00000000
 8002894:	c1cdcd65 	.word	0xc1cdcd65
 8002898:	08008110 	.word	0x08008110
 800289c:	08008114 	.word	0x08008114
 80028a0:	7fefffff 	.word	0x7fefffff
 80028a4:	0800811c 	.word	0x0800811c
 80028a8:	08008124 	.word	0x08008124
 80028ac:	08008128 	.word	0x08008128
 80028b0:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80028b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80028b8:	e01f      	b.n	80028fa <_ftoa+0x342>
      --count;
 80028ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028bc:	3b01      	subs	r3, #1
 80028be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80028c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80028c2:	4b66      	ldr	r3, [pc, #408]	@ (8002a5c <_ftoa+0x4a4>)
 80028c4:	fba3 2301 	umull	r2, r3, r3, r1
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	1aca      	subs	r2, r1, r3
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028d8:	1c59      	adds	r1, r3, #1
 80028da:	65f9      	str	r1, [r7, #92]	@ 0x5c
 80028dc:	3230      	adds	r2, #48	@ 0x30
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	3360      	adds	r3, #96	@ 0x60
 80028e2:	443b      	add	r3, r7
 80028e4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80028e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028ea:	4a5c      	ldr	r2, [pc, #368]	@ (8002a5c <_ftoa+0x4a4>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	08db      	lsrs	r3, r3, #3
 80028f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80028f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80028fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028fc:	2b1f      	cmp	r3, #31
 80028fe:	d9dc      	bls.n	80028ba <_ftoa+0x302>
 8002900:	e009      	b.n	8002916 <_ftoa+0x35e>
        break;
 8002902:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002904:	e007      	b.n	8002916 <_ftoa+0x35e>
      buf[len++] = '0';
 8002906:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800290c:	3360      	adds	r3, #96	@ 0x60
 800290e:	443b      	add	r3, r7
 8002910:	2230      	movs	r2, #48	@ 0x30
 8002912:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002916:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002918:	2b1f      	cmp	r3, #31
 800291a:	d804      	bhi.n	8002926 <_ftoa+0x36e>
 800291c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800291e:	1e5a      	subs	r2, r3, #1
 8002920:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1ef      	bne.n	8002906 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002928:	2b1f      	cmp	r3, #31
 800292a:	d829      	bhi.n	8002980 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800292c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002932:	3360      	adds	r3, #96	@ 0x60
 8002934:	443b      	add	r3, r7
 8002936:	222e      	movs	r2, #46	@ 0x2e
 8002938:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800293c:	e020      	b.n	8002980 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800293e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002940:	4b47      	ldr	r3, [pc, #284]	@ (8002a60 <_ftoa+0x4a8>)
 8002942:	fb83 1302 	smull	r1, r3, r3, r2
 8002946:	1099      	asrs	r1, r3, #2
 8002948:	17d3      	asrs	r3, r2, #31
 800294a:	1ac9      	subs	r1, r1, r3
 800294c:	460b      	mov	r3, r1
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	1ad1      	subs	r1, r2, r3
 8002956:	b2ca      	uxtb	r2, r1
 8002958:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800295a:	1c59      	adds	r1, r3, #1
 800295c:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800295e:	3230      	adds	r2, #48	@ 0x30
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	3360      	adds	r3, #96	@ 0x60
 8002964:	443b      	add	r3, r7
 8002966:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800296a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800296c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a60 <_ftoa+0x4a8>)
 800296e:	fb82 1203 	smull	r1, r2, r2, r3
 8002972:	1092      	asrs	r2, r2, #2
 8002974:	17db      	asrs	r3, r3, #31
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	657b      	str	r3, [r7, #84]	@ 0x54
 800297a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002980:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002982:	2b1f      	cmp	r3, #31
 8002984:	d9db      	bls.n	800293e <_ftoa+0x386>
 8002986:	e000      	b.n	800298a <_ftoa+0x3d2>
      break;
 8002988:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800298a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d123      	bne.n	80029dc <_ftoa+0x424>
 8002994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01e      	beq.n	80029dc <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800299e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d014      	beq.n	80029ce <_ftoa+0x416>
 80029a4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d104      	bne.n	80029b6 <_ftoa+0x3fe>
 80029ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <_ftoa+0x416>
      width--;
 80029b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029b8:	3b01      	subs	r3, #1
 80029ba:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80029bc:	e007      	b.n	80029ce <_ftoa+0x416>
      buf[len++] = '0';
 80029be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80029c4:	3360      	adds	r3, #96	@ 0x60
 80029c6:	443b      	add	r3, r7
 80029c8:	2230      	movs	r2, #48	@ 0x30
 80029ca:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80029ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80029d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d202      	bcs.n	80029dc <_ftoa+0x424>
 80029d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029d8:	2b1f      	cmp	r3, #31
 80029da:	d9f0      	bls.n	80029be <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80029dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029de:	2b1f      	cmp	r3, #31
 80029e0:	d827      	bhi.n	8002a32 <_ftoa+0x47a>
    if (negative) {
 80029e2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <_ftoa+0x444>
      buf[len++] = '-';
 80029ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80029f0:	3360      	adds	r3, #96	@ 0x60
 80029f2:	443b      	add	r3, r7
 80029f4:	222d      	movs	r2, #45	@ 0x2d
 80029f6:	f803 2c48 	strb.w	r2, [r3, #-72]
 80029fa:	e01a      	b.n	8002a32 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80029fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a0c:	3360      	adds	r3, #96	@ 0x60
 8002a0e:	443b      	add	r3, r7
 8002a10:	222b      	movs	r2, #43	@ 0x2b
 8002a12:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002a16:	e00c      	b.n	8002a32 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8002a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <_ftoa+0x47a>
      buf[len++] = ' ';
 8002a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a28:	3360      	adds	r3, #96	@ 0x60
 8002a2a:	443b      	add	r3, r7
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002a32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a34:	9303      	str	r3, [sp, #12]
 8002a36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a38:	9302      	str	r3, [sp, #8]
 8002a3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	f107 0318 	add.w	r3, r7, #24
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	6939      	ldr	r1, [r7, #16]
 8002a4a:	6978      	ldr	r0, [r7, #20]
 8002a4c:	f7ff fbb2 	bl	80021b4 <_out_rev>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3764      	adds	r7, #100	@ 0x64
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd90      	pop	{r4, r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	cccccccd 	.word	0xcccccccd
 8002a60:	66666667 	.word	0x66666667
 8002a64:	00000000 	.word	0x00000000

08002a68 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a6c:	b09f      	sub	sp, #124	@ 0x7c
 8002a6e:	af06      	add	r7, sp, #24
 8002a70:	6278      	str	r0, [r7, #36]	@ 0x24
 8002a72:	6239      	str	r1, [r7, #32]
 8002a74:	61fa      	str	r2, [r7, #28]
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002a7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a84:	f7fd ffcc 	bl	8000a20 <__aeabi_dcmpeq>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d014      	beq.n	8002ab8 <_etoa+0x50>
 8002a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a92:	4bc1      	ldr	r3, [pc, #772]	@ (8002d98 <_etoa+0x330>)
 8002a94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a98:	f7fd ffea 	bl	8000a70 <__aeabi_dcmpgt>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <_etoa+0x50>
 8002aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa6:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 8002aaa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002aae:	f7fd ffc1 	bl	8000a34 <__aeabi_dcmplt>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d012      	beq.n	8002ade <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002ab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002abc:	9302      	str	r3, [sp, #8]
 8002abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	ed97 0b04 	vldr	d0, [r7, #16]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	6a39      	ldr	r1, [r7, #32]
 8002ad4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ad6:	f7ff fd6f 	bl	80025b8 <_ftoa>
 8002ada:	4603      	mov	r3, r0
 8002adc:	e23f      	b.n	8002f5e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	461e      	mov	r6, r3
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002aee:	f7fd ffa1 	bl	8000a34 <__aeabi_dcmplt>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <_etoa+0x94>
 8002af8:	2300      	movs	r3, #0
 8002afa:	461e      	mov	r6, r3
 8002afc:	f887 6053 	strb.w	r6, [r7, #83]	@ 0x53
  if (negative) {
 8002b00:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d009      	beq.n	8002b1c <_etoa+0xb4>
    value = -value;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	ed97 7b00 	vldr	d7, [r7]
 8002b18:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002b1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002b28:	2306      	movs	r3, #6
 8002b2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002b2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b32:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002b36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	0d0a      	lsrs	r2, r1, #20
 8002b44:	2300      	movs	r3, #0
 8002b46:	4613      	mov	r3, r2
 8002b48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b4c:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8002b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b56:	4690      	mov	r8, r2
 8002b58:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8002b5c:	4644      	mov	r4, r8
 8002b5e:	f049 557f 	orr.w	r5, r9, #1069547520	@ 0x3fc00000
 8002b62:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8002b66:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002b6a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002b6c:	f7fd fc86 	bl	800047c <__aeabi_i2d>
 8002b70:	a37d      	add	r3, pc, #500	@ (adr r3, 8002d68 <_etoa+0x300>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd fceb 	bl	8000550 <__aeabi_dmul>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	a37b      	add	r3, pc, #492	@ (adr r3, 8002d70 <_etoa+0x308>)
 8002b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b88:	f7fd fb2c 	bl	80001e4 <__adddf3>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4614      	mov	r4, r2
 8002b92:	461d      	mov	r5, r3
 8002b94:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	4b7f      	ldr	r3, [pc, #508]	@ (8002d9c <_etoa+0x334>)
 8002b9e:	f7fd fb1f 	bl	80001e0 <__aeabi_dsub>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	a373      	add	r3, pc, #460	@ (adr r3, 8002d78 <_etoa+0x310>)
 8002bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb0:	f7fd fcce 	bl	8000550 <__aeabi_dmul>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4620      	mov	r0, r4
 8002bba:	4629      	mov	r1, r5
 8002bbc:	f7fd fb12 	bl	80001e4 <__adddf3>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f7fd ff5c 	bl	8000a84 <__aeabi_d2iz>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002bd0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002bd2:	f7fd fc53 	bl	800047c <__aeabi_i2d>
 8002bd6:	a36a      	add	r3, pc, #424	@ (adr r3, 8002d80 <_etoa+0x318>)
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	f7fd fcb8 	bl	8000550 <__aeabi_dmul>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	4b6c      	ldr	r3, [pc, #432]	@ (8002da0 <_etoa+0x338>)
 8002bee:	f7fd faf9 	bl	80001e4 <__adddf3>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f7fd ff43 	bl	8000a84 <__aeabi_d2iz>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002c02:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002c04:	f7fd fc3a 	bl	800047c <__aeabi_i2d>
 8002c08:	a35f      	add	r3, pc, #380	@ (adr r3, 8002d88 <_etoa+0x320>)
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	f7fd fc9f 	bl	8000550 <__aeabi_dmul>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4614      	mov	r4, r2
 8002c18:	461d      	mov	r5, r3
 8002c1a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002c1c:	f7fd fc2e 	bl	800047c <__aeabi_i2d>
 8002c20:	a35b      	add	r3, pc, #364	@ (adr r3, 8002d90 <_etoa+0x328>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd fc93 	bl	8000550 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4620      	mov	r0, r4
 8002c30:	4629      	mov	r1, r5
 8002c32:	f7fd fad5 	bl	80001e0 <__aeabi_dsub>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  const double z2 = z * z;
 8002c3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c42:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002c46:	f7fd fc83 	bl	8000550 <__aeabi_dmul>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002c52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c54:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002c58:	17da      	asrs	r2, r3, #31
 8002c5a:	469a      	mov	sl, r3
 8002c5c:	4693      	mov	fp, r2
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002c70:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002c74:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	f7fd fab2 	bl	80001e4 <__adddf3>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4690      	mov	r8, r2
 8002c86:	4699      	mov	r9, r3
 8002c88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c8c:	f04f 0000 	mov.w	r0, #0
 8002c90:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002c94:	f7fd faa4 	bl	80001e0 <__aeabi_dsub>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4692      	mov	sl, r2
 8002c9e:	469b      	mov	fp, r3
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	4b3f      	ldr	r3, [pc, #252]	@ (8002da4 <_etoa+0x33c>)
 8002ca6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002caa:	f7fd fd7b 	bl	80007a4 <__aeabi_ddiv>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	4b3b      	ldr	r3, [pc, #236]	@ (8002da8 <_etoa+0x340>)
 8002cbc:	f7fd fa92 	bl	80001e4 <__adddf3>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002cc8:	f7fd fd6c 	bl	80007a4 <__aeabi_ddiv>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	4b34      	ldr	r3, [pc, #208]	@ (8002dac <_etoa+0x344>)
 8002cda:	f7fd fa83 	bl	80001e4 <__adddf3>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002ce6:	f7fd fd5d 	bl	80007a4 <__aeabi_ddiv>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4650      	mov	r0, sl
 8002cf0:	4659      	mov	r1, fp
 8002cf2:	f7fd fa77 	bl	80001e4 <__adddf3>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4640      	mov	r0, r8
 8002cfc:	4649      	mov	r1, r9
 8002cfe:	f7fd fd51 	bl	80007a4 <__aeabi_ddiv>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	4b28      	ldr	r3, [pc, #160]	@ (8002db0 <_etoa+0x348>)
 8002d10:	f7fd fa68 	bl	80001e4 <__adddf3>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4620      	mov	r0, r4
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	f7fd fc18 	bl	8000550 <__aeabi_dmul>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8002d28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d30:	f7fd fe80 	bl	8000a34 <__aeabi_dcmplt>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <_etoa+0x2ee>
    expval--;
 8002d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    conv.F /= 10;
 8002d40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	4b17      	ldr	r3, [pc, #92]	@ (8002da8 <_etoa+0x340>)
 8002d4a:	f7fd fd2b 	bl	80007a4 <__aeabi_ddiv>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002d56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d58:	2b63      	cmp	r3, #99	@ 0x63
 8002d5a:	dc2b      	bgt.n	8002db4 <_etoa+0x34c>
 8002d5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d5e:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8002d62:	db27      	blt.n	8002db4 <_etoa+0x34c>
 8002d64:	2304      	movs	r3, #4
 8002d66:	e026      	b.n	8002db6 <_etoa+0x34e>
 8002d68:	509f79fb 	.word	0x509f79fb
 8002d6c:	3fd34413 	.word	0x3fd34413
 8002d70:	8b60c8b3 	.word	0x8b60c8b3
 8002d74:	3fc68a28 	.word	0x3fc68a28
 8002d78:	636f4361 	.word	0x636f4361
 8002d7c:	3fd287a7 	.word	0x3fd287a7
 8002d80:	0979a371 	.word	0x0979a371
 8002d84:	400a934f 	.word	0x400a934f
 8002d88:	bbb55516 	.word	0xbbb55516
 8002d8c:	40026bb1 	.word	0x40026bb1
 8002d90:	fefa39ef 	.word	0xfefa39ef
 8002d94:	3fe62e42 	.word	0x3fe62e42
 8002d98:	7fefffff 	.word	0x7fefffff
 8002d9c:	3ff80000 	.word	0x3ff80000
 8002da0:	3fe00000 	.word	0x3fe00000
 8002da4:	402c0000 	.word	0x402c0000
 8002da8:	40240000 	.word	0x40240000
 8002dac:	40180000 	.word	0x40180000
 8002db0:	3ff00000 	.word	0x3ff00000
 8002db4:	2305      	movs	r3, #5
 8002db6:	65bb      	str	r3, [r7, #88]	@ 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002db8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d03d      	beq.n	8002e40 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002dc4:	a368      	add	r3, pc, #416	@ (adr r3, 8002f68 <_etoa+0x500>)
 8002dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dce:	f7fd fe45 	bl	8000a5c <__aeabi_dcmpge>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d024      	beq.n	8002e22 <_etoa+0x3ba>
 8002dd8:	a365      	add	r3, pc, #404	@ (adr r3, 8002f70 <_etoa+0x508>)
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002de2:	f7fd fe27 	bl	8000a34 <__aeabi_dcmplt>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01a      	beq.n	8002e22 <_etoa+0x3ba>
      if ((int)prec > expval) {
 8002dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002df0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002df2:	429a      	cmp	r2, r3
 8002df4:	da07      	bge.n	8002e06 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8002df6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e04:	e002      	b.n	8002e0c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8002e0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      // no characters in exponent
      minwidth = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	65bb      	str	r3, [r7, #88]	@ 0x58
      expval   = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e20:	e00e      	b.n	8002e40 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002e22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <_etoa+0x3d8>
 8002e2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d004      	beq.n	8002e40 <_etoa+0x3d8>
        --prec;
 8002e36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e44:	657b      	str	r3, [r7, #84]	@ 0x54
  if (width > minwidth) {
 8002e46:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002e4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d904      	bls.n	8002e5a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002e50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e58:	e001      	b.n	8002e5e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8002e5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <_etoa+0x40c>
 8002e6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // rescale the float value
  if (expval) {
 8002e74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <_etoa+0x426>
    value /= conv.F;
 8002e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e82:	f7fd fc8f 	bl	80007a4 <__aeabi_ddiv>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	637b      	str	r3, [r7, #52]	@ 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002e92:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d006      	beq.n	8002ea8 <_etoa+0x440>
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	e003      	b.n	8002eb0 <_etoa+0x448>
 8002ea8:	ed97 7b04 	vldr	d7, [r7, #16]
 8002eac:	ed87 7b02 	vstr	d7, [r7, #8]
 8002eb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002eb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002eb8:	9302      	str	r3, [sp, #8]
 8002eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	ed97 0b02 	vldr	d0, [r7, #8]
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	6a39      	ldr	r1, [r7, #32]
 8002ece:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ed0:	f7ff fb72 	bl	80025b8 <_ftoa>
 8002ed4:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8002ed6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d03f      	beq.n	8002f5c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002edc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <_etoa+0x484>
 8002ee8:	2045      	movs	r0, #69	@ 0x45
 8002eea:	e000      	b.n	8002eee <_etoa+0x486>
 8002eec:	2065      	movs	r0, #101	@ 0x65
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	1c53      	adds	r3, r2, #1
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	6a39      	ldr	r1, [r7, #32]
 8002efa:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8002efc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bfb8      	it	lt
 8002f02:	425b      	neglt	r3, r3
 8002f04:	4618      	mov	r0, r3
 8002f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f08:	0fdb      	lsrs	r3, r3, #31
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f0e:	3a01      	subs	r2, #1
 8002f10:	2105      	movs	r1, #5
 8002f12:	9105      	str	r1, [sp, #20]
 8002f14:	9204      	str	r2, [sp, #16]
 8002f16:	2200      	movs	r2, #0
 8002f18:	9203      	str	r2, [sp, #12]
 8002f1a:	220a      	movs	r2, #10
 8002f1c:	9202      	str	r2, [sp, #8]
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	9000      	str	r0, [sp, #0]
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	6a39      	ldr	r1, [r7, #32]
 8002f28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f2a:	f7ff fa6f 	bl	800240c <_ntoa_long>
 8002f2e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00f      	beq.n	8002f5c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002f3c:	e007      	b.n	8002f4e <_etoa+0x4e6>
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	1c53      	adds	r3, r2, #1
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	6a39      	ldr	r1, [r7, #32]
 8002f4a:	2020      	movs	r0, #32
 8002f4c:	47a0      	blx	r4
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d8f0      	bhi.n	8002f3e <_etoa+0x4d6>
    }
  }
  return idx;
 8002f5c:	69fb      	ldr	r3, [r7, #28]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3764      	adds	r7, #100	@ 0x64
 8002f62:	46bd      	mov	sp, r7
 8002f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f68:	eb1c432d 	.word	0xeb1c432d
 8002f6c:	3f1a36e2 	.word	0x3f1a36e2
 8002f70:	00000000 	.word	0x00000000
 8002f74:	412e8480 	.word	0x412e8480

08002f78 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f7c:	b0a3      	sub	sp, #140	@ 0x8c
 8002f7e:	af0a      	add	r7, sp, #40	@ 0x28
 8002f80:	6178      	str	r0, [r7, #20]
 8002f82:	6139      	str	r1, [r7, #16]
 8002f84:	60fa      	str	r2, [r7, #12]
 8002f86:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!buffer) {
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 84cf 	bne.w	8003932 <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8002f94:	4ba8      	ldr	r3, [pc, #672]	@ (8003238 <_vsnprintf+0x2c0>)
 8002f96:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8002f98:	f000 bccb 	b.w	8003932 <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b25      	cmp	r3, #37	@ 0x25
 8002fa2:	d00d      	beq.n	8002fc0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	7818      	ldrb	r0, [r3, #0]
 8002fa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002faa:	1c53      	adds	r3, r2, #1
 8002fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fae:	697c      	ldr	r4, [r7, #20]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6939      	ldr	r1, [r7, #16]
 8002fb4:	47a0      	blx	r4
      format++;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	60bb      	str	r3, [r7, #8]
      continue;
 8002fbc:	f000 bcb9 	b.w	8003932 <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    do {
      switch (*format) {
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	3b20      	subs	r3, #32
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d857      	bhi.n	8003084 <_vsnprintf+0x10c>
 8002fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fdc <_vsnprintf+0x64>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	0800305d 	.word	0x0800305d
 8002fe0:	08003085 	.word	0x08003085
 8002fe4:	08003085 	.word	0x08003085
 8002fe8:	08003071 	.word	0x08003071
 8002fec:	08003085 	.word	0x08003085
 8002ff0:	08003085 	.word	0x08003085
 8002ff4:	08003085 	.word	0x08003085
 8002ff8:	08003085 	.word	0x08003085
 8002ffc:	08003085 	.word	0x08003085
 8003000:	08003085 	.word	0x08003085
 8003004:	08003085 	.word	0x08003085
 8003008:	08003049 	.word	0x08003049
 800300c:	08003085 	.word	0x08003085
 8003010:	08003035 	.word	0x08003035
 8003014:	08003085 	.word	0x08003085
 8003018:	08003085 	.word	0x08003085
 800301c:	08003021 	.word	0x08003021
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003020:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	3301      	adds	r3, #1
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	2301      	movs	r3, #1
 8003030:	653b      	str	r3, [r7, #80]	@ 0x50
 8003032:	e02a      	b.n	800308a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003034:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003036:	f043 0302 	orr.w	r3, r3, #2
 800303a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	3301      	adds	r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	2301      	movs	r3, #1
 8003044:	653b      	str	r3, [r7, #80]	@ 0x50
 8003046:	e020      	b.n	800308a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003048:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800304a:	f043 0304 	orr.w	r3, r3, #4
 800304e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	3301      	adds	r3, #1
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	2301      	movs	r3, #1
 8003058:	653b      	str	r3, [r7, #80]	@ 0x50
 800305a:	e016      	b.n	800308a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800305c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800305e:	f043 0308 	orr.w	r3, r3, #8
 8003062:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	3301      	adds	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	2301      	movs	r3, #1
 800306c:	653b      	str	r3, [r7, #80]	@ 0x50
 800306e:	e00c      	b.n	800308a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003070:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003072:	f043 0310 	orr.w	r3, r3, #16
 8003076:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	3301      	adds	r3, #1
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	2301      	movs	r3, #1
 8003080:	653b      	str	r3, [r7, #80]	@ 0x50
 8003082:	e002      	b.n	800308a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8003084:	2300      	movs	r3, #0
 8003086:	653b      	str	r3, [r7, #80]	@ 0x50
 8003088:	bf00      	nop
      }
    } while (n);
 800308a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800308c:	2b00      	cmp	r3, #0
 800308e:	d19c      	bne.n	8002fca <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (_is_digit(*format)) {
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff f850 	bl	800213e <_is_digit>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d006      	beq.n	80030b2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 80030a4:	f107 0308 	add.w	r3, r7, #8
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f85f 	bl	800216c <_atoi>
 80030ae:	65b8      	str	r0, [r7, #88]	@ 0x58
 80030b0:	e01a      	b.n	80030e8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80030b8:	d116      	bne.n	80030e8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 80030ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030be:	1d1a      	adds	r2, r3, #4
 80030c0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if (w < 0) {
 80030c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da07      	bge.n	80030de <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 80030ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        width = (unsigned int)-w;
 80030d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d8:	425b      	negs	r3, r3
 80030da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030dc:	e001      	b.n	80030e2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80030de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e0:	65bb      	str	r3, [r7, #88]	@ 0x58
      }
      format++;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	657b      	str	r3, [r7, #84]	@ 0x54
    if (*format == '.') {
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80030f2:	d127      	bne.n	8003144 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80030f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
      format++;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	3301      	adds	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff f819 	bl	800213e <_is_digit>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d006      	beq.n	8003120 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8003112:	f107 0308 	add.w	r3, r7, #8
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff f828 	bl	800216c <_atoi>
 800311c:	6578      	str	r0, [r7, #84]	@ 0x54
 800311e:	e011      	b.n	8003144 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b2a      	cmp	r3, #42	@ 0x2a
 8003126:	d10d      	bne.n	8003144 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003128:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800312c:	1d1a      	adds	r2, r3, #4
 800312e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	637b      	str	r3, [r7, #52]	@ 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003138:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800313c:	657b      	str	r3, [r7, #84]	@ 0x54
        format++;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	3301      	adds	r3, #1
 8003142:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	3b68      	subs	r3, #104	@ 0x68
 800314a:	2b12      	cmp	r3, #18
 800314c:	d866      	bhi.n	800321c <_vsnprintf+0x2a4>
 800314e:	a201      	add	r2, pc, #4	@ (adr r2, 8003154 <_vsnprintf+0x1dc>)
 8003150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003154:	080031c7 	.word	0x080031c7
 8003158:	0800321d 	.word	0x0800321d
 800315c:	080031fd 	.word	0x080031fd
 8003160:	0800321d 	.word	0x0800321d
 8003164:	080031a1 	.word	0x080031a1
 8003168:	0800321d 	.word	0x0800321d
 800316c:	0800321d 	.word	0x0800321d
 8003170:	0800321d 	.word	0x0800321d
 8003174:	0800321d 	.word	0x0800321d
 8003178:	0800321d 	.word	0x0800321d
 800317c:	0800321d 	.word	0x0800321d
 8003180:	0800321d 	.word	0x0800321d
 8003184:	080031ed 	.word	0x080031ed
 8003188:	0800321d 	.word	0x0800321d
 800318c:	0800321d 	.word	0x0800321d
 8003190:	0800321d 	.word	0x0800321d
 8003194:	0800321d 	.word	0x0800321d
 8003198:	0800321d 	.word	0x0800321d
 800319c:	0800320d 	.word	0x0800320d
      case 'l' :
        flags |= FLAGS_LONG;
 80031a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	3301      	adds	r3, #1
 80031ac:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b6c      	cmp	r3, #108	@ 0x6c
 80031b4:	d134      	bne.n	8003220 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 80031b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	3301      	adds	r3, #1
 80031c2:	60bb      	str	r3, [r7, #8]
        }
        break;
 80031c4:	e02c      	b.n	8003220 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 80031c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	3301      	adds	r3, #1
 80031d2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b68      	cmp	r3, #104	@ 0x68
 80031da:	d123      	bne.n	8003224 <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 80031dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	3301      	adds	r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
        }
        break;
 80031ea:	e01b      	b.n	8003224 <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80031ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	3301      	adds	r3, #1
 80031f8:	60bb      	str	r3, [r7, #8]
        break;
 80031fa:	e014      	b.n	8003226 <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80031fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003202:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	3301      	adds	r3, #1
 8003208:	60bb      	str	r3, [r7, #8]
        break;
 800320a:	e00c      	b.n	8003226 <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800320c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800320e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003212:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3301      	adds	r3, #1
 8003218:	60bb      	str	r3, [r7, #8]
        break;
 800321a:	e004      	b.n	8003226 <_vsnprintf+0x2ae>
      default :
        break;
 800321c:	bf00      	nop
 800321e:	e002      	b.n	8003226 <_vsnprintf+0x2ae>
        break;
 8003220:	bf00      	nop
 8003222:	e000      	b.n	8003226 <_vsnprintf+0x2ae>
        break;
 8003224:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b67      	cmp	r3, #103	@ 0x67
 800322c:	f300 80b8 	bgt.w	80033a0 <_vsnprintf+0x428>
 8003230:	2b25      	cmp	r3, #37	@ 0x25
 8003232:	da27      	bge.n	8003284 <_vsnprintf+0x30c>
 8003234:	e370      	b.n	8003918 <_vsnprintf+0x9a0>
 8003236:	bf00      	nop
 8003238:	080020e9 	.word	0x080020e9
 800323c:	3b69      	subs	r3, #105	@ 0x69
 800323e:	2201      	movs	r2, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	f249 0241 	movw	r2, #36929	@ 0x9041
 8003248:	401a      	ands	r2, r3
 800324a:	2a00      	cmp	r2, #0
 800324c:	bf14      	ite	ne
 800324e:	2201      	movne	r2, #1
 8003250:	2200      	moveq	r2, #0
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	2a00      	cmp	r2, #0
 8003256:	f040 80aa 	bne.w	80033ae <_vsnprintf+0x436>
 800325a:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 800325e:	2a00      	cmp	r2, #0
 8003260:	bf14      	ite	ne
 8003262:	2201      	movne	r2, #1
 8003264:	2200      	moveq	r2, #0
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	2a00      	cmp	r2, #0
 800326a:	f040 82fb 	bne.w	8003864 <_vsnprintf+0x8ec>
 800326e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003272:	2b00      	cmp	r3, #0
 8003274:	bf14      	ite	ne
 8003276:	2301      	movne	r3, #1
 8003278:	2300      	moveq	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	f040 828d 	bne.w	800379c <_vsnprintf+0x824>
 8003282:	e349      	b.n	8003918 <_vsnprintf+0x9a0>
 8003284:	3b25      	subs	r3, #37	@ 0x25
 8003286:	2b42      	cmp	r3, #66	@ 0x42
 8003288:	f200 8346 	bhi.w	8003918 <_vsnprintf+0x9a0>
 800328c:	a201      	add	r2, pc, #4	@ (adr r2, 8003294 <_vsnprintf+0x31c>)
 800328e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003292:	bf00      	nop
 8003294:	08003901 	.word	0x08003901
 8003298:	08003919 	.word	0x08003919
 800329c:	08003919 	.word	0x08003919
 80032a0:	08003919 	.word	0x08003919
 80032a4:	08003919 	.word	0x08003919
 80032a8:	08003919 	.word	0x08003919
 80032ac:	08003919 	.word	0x08003919
 80032b0:	08003919 	.word	0x08003919
 80032b4:	08003919 	.word	0x08003919
 80032b8:	08003919 	.word	0x08003919
 80032bc:	08003919 	.word	0x08003919
 80032c0:	08003919 	.word	0x08003919
 80032c4:	08003919 	.word	0x08003919
 80032c8:	08003919 	.word	0x08003919
 80032cc:	08003919 	.word	0x08003919
 80032d0:	08003919 	.word	0x08003919
 80032d4:	08003919 	.word	0x08003919
 80032d8:	08003919 	.word	0x08003919
 80032dc:	08003919 	.word	0x08003919
 80032e0:	08003919 	.word	0x08003919
 80032e4:	08003919 	.word	0x08003919
 80032e8:	08003919 	.word	0x08003919
 80032ec:	08003919 	.word	0x08003919
 80032f0:	08003919 	.word	0x08003919
 80032f4:	08003919 	.word	0x08003919
 80032f8:	08003919 	.word	0x08003919
 80032fc:	08003919 	.word	0x08003919
 8003300:	08003919 	.word	0x08003919
 8003304:	08003919 	.word	0x08003919
 8003308:	08003919 	.word	0x08003919
 800330c:	08003919 	.word	0x08003919
 8003310:	08003919 	.word	0x08003919
 8003314:	080036b5 	.word	0x080036b5
 8003318:	08003665 	.word	0x08003665
 800331c:	080036b5 	.word	0x080036b5
 8003320:	08003919 	.word	0x08003919
 8003324:	08003919 	.word	0x08003919
 8003328:	08003919 	.word	0x08003919
 800332c:	08003919 	.word	0x08003919
 8003330:	08003919 	.word	0x08003919
 8003334:	08003919 	.word	0x08003919
 8003338:	08003919 	.word	0x08003919
 800333c:	08003919 	.word	0x08003919
 8003340:	08003919 	.word	0x08003919
 8003344:	08003919 	.word	0x08003919
 8003348:	08003919 	.word	0x08003919
 800334c:	08003919 	.word	0x08003919
 8003350:	08003919 	.word	0x08003919
 8003354:	08003919 	.word	0x08003919
 8003358:	08003919 	.word	0x08003919
 800335c:	08003919 	.word	0x08003919
 8003360:	080033af 	.word	0x080033af
 8003364:	08003919 	.word	0x08003919
 8003368:	08003919 	.word	0x08003919
 800336c:	08003919 	.word	0x08003919
 8003370:	08003919 	.word	0x08003919
 8003374:	08003919 	.word	0x08003919
 8003378:	08003919 	.word	0x08003919
 800337c:	08003919 	.word	0x08003919
 8003380:	08003919 	.word	0x08003919
 8003384:	08003919 	.word	0x08003919
 8003388:	080033af 	.word	0x080033af
 800338c:	08003725 	.word	0x08003725
 8003390:	080033af 	.word	0x080033af
 8003394:	080036b5 	.word	0x080036b5
 8003398:	08003665 	.word	0x08003665
 800339c:	080036b5 	.word	0x080036b5
 80033a0:	2b78      	cmp	r3, #120	@ 0x78
 80033a2:	f300 82b9 	bgt.w	8003918 <_vsnprintf+0x9a0>
 80033a6:	2b69      	cmp	r3, #105	@ 0x69
 80033a8:	f6bf af48 	bge.w	800323c <_vsnprintf+0x2c4>
 80033ac:	e2b4      	b.n	8003918 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b78      	cmp	r3, #120	@ 0x78
 80033b4:	d003      	beq.n	80033be <_vsnprintf+0x446>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b58      	cmp	r3, #88	@ 0x58
 80033bc:	d102      	bne.n	80033c4 <_vsnprintf+0x44c>
          base = 16U;
 80033be:	2310      	movs	r3, #16
 80033c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033c2:	e013      	b.n	80033ec <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b6f      	cmp	r3, #111	@ 0x6f
 80033ca:	d102      	bne.n	80033d2 <_vsnprintf+0x45a>
          base =  8U;
 80033cc:	2308      	movs	r3, #8
 80033ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033d0:	e00c      	b.n	80033ec <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b62      	cmp	r3, #98	@ 0x62
 80033d8:	d102      	bne.n	80033e0 <_vsnprintf+0x468>
          base =  2U;
 80033da:	2302      	movs	r3, #2
 80033dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033de:	e005      	b.n	80033ec <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 80033e0:	230a      	movs	r3, #10
 80033e2:	64bb      	str	r3, [r7, #72]	@ 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80033e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033e6:	f023 0310 	bic.w	r3, r3, #16
 80033ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b58      	cmp	r3, #88	@ 0x58
 80033f2:	d103      	bne.n	80033fc <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 80033f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033f6:	f043 0320 	orr.w	r3, r3, #32
 80033fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b69      	cmp	r3, #105	@ 0x69
 8003402:	d007      	beq.n	8003414 <_vsnprintf+0x49c>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b64      	cmp	r3, #100	@ 0x64
 800340a:	d003      	beq.n	8003414 <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800340c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800340e:	f023 030c 	bic.w	r3, r3, #12
 8003412:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8003414:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 800341e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b69      	cmp	r3, #105	@ 0x69
 800342c:	d004      	beq.n	8003438 <_vsnprintf+0x4c0>
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b64      	cmp	r3, #100	@ 0x64
 8003434:	f040 8098 	bne.w	8003568 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003438:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800343a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800343e:	2b00      	cmp	r3, #0
 8003440:	d031      	beq.n	80034a6 <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003442:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003446:	3307      	adds	r3, #7
 8003448:	f023 0307 	bic.w	r3, r3, #7
 800344c:	f103 0208 	add.w	r2, r3, #8
 8003450:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003458:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800345c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	da06      	bge.n	8003472 <_vsnprintf+0x4fa>
 8003464:	2100      	movs	r1, #0
 8003466:	f1d2 0800 	rsbs	r8, r2, #0
 800346a:	eb61 0903 	sbc.w	r9, r1, r3
 800346e:	4642      	mov	r2, r8
 8003470:	464b      	mov	r3, r9
 8003472:	69f9      	ldr	r1, [r7, #28]
 8003474:	0fc9      	lsrs	r1, r1, #31
 8003476:	b2c9      	uxtb	r1, r1
 8003478:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800347a:	2400      	movs	r4, #0
 800347c:	4682      	mov	sl, r0
 800347e:	46a3      	mov	fp, r4
 8003480:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003482:	9008      	str	r0, [sp, #32]
 8003484:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003486:	9007      	str	r0, [sp, #28]
 8003488:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800348a:	9006      	str	r0, [sp, #24]
 800348c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003490:	9102      	str	r1, [sp, #8]
 8003492:	e9cd 2300 	strd	r2, r3, [sp]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800349a:	6939      	ldr	r1, [r7, #16]
 800349c:	6978      	ldr	r0, [r7, #20]
 800349e:	f7ff f81b 	bl	80024d8 <_ntoa_long_long>
 80034a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80034a4:	e0da      	b.n	800365c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80034a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d020      	beq.n	80034f2 <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 80034b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034b4:	1d1a      	adds	r2, r3, #4
 80034b6:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	627b      	str	r3, [r7, #36]	@ 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bfb8      	it	lt
 80034c4:	425b      	neglt	r3, r3
 80034c6:	4619      	mov	r1, r3
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	0fdb      	lsrs	r3, r3, #31
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80034d0:	9205      	str	r2, [sp, #20]
 80034d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034d4:	9204      	str	r2, [sp, #16]
 80034d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034d8:	9203      	str	r2, [sp, #12]
 80034da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034dc:	9202      	str	r2, [sp, #8]
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	9100      	str	r1, [sp, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034e6:	6939      	ldr	r1, [r7, #16]
 80034e8:	6978      	ldr	r0, [r7, #20]
 80034ea:	f7fe ff8f 	bl	800240c <_ntoa_long>
 80034ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80034f0:	e0b4      	b.n	800365c <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80034f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d007      	beq.n	800350c <_vsnprintf+0x594>
 80034fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003500:	1d1a      	adds	r2, r3, #4
 8003502:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e012      	b.n	8003532 <_vsnprintf+0x5ba>
 800350c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800350e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <_vsnprintf+0x5ae>
 8003516:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800351a:	1d1a      	adds	r2, r3, #4
 800351c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	b21b      	sxth	r3, r3
 8003524:	e005      	b.n	8003532 <_vsnprintf+0x5ba>
 8003526:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800352a:	1d1a      	adds	r2, r3, #4
 800352c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	62bb      	str	r3, [r7, #40]	@ 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003536:	2b00      	cmp	r3, #0
 8003538:	bfb8      	it	lt
 800353a:	425b      	neglt	r3, r3
 800353c:	4619      	mov	r1, r3
 800353e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003540:	0fdb      	lsrs	r3, r3, #31
 8003542:	b2db      	uxtb	r3, r3
 8003544:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003546:	9205      	str	r2, [sp, #20]
 8003548:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800354a:	9204      	str	r2, [sp, #16]
 800354c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800354e:	9203      	str	r2, [sp, #12]
 8003550:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003552:	9202      	str	r2, [sp, #8]
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	9100      	str	r1, [sp, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800355c:	6939      	ldr	r1, [r7, #16]
 800355e:	6978      	ldr	r0, [r7, #20]
 8003560:	f7fe ff54 	bl	800240c <_ntoa_long>
 8003564:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8003566:	e079      	b.n	800365c <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003568:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800356a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800356e:	2b00      	cmp	r3, #0
 8003570:	d022      	beq.n	80035b8 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003572:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003576:	3307      	adds	r3, #7
 8003578:	f023 0307 	bic.w	r3, r3, #7
 800357c:	f103 0208 	add.w	r2, r3, #8
 8003580:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800358a:	2000      	movs	r0, #0
 800358c:	460d      	mov	r5, r1
 800358e:	4606      	mov	r6, r0
 8003590:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003592:	9108      	str	r1, [sp, #32]
 8003594:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003596:	9107      	str	r1, [sp, #28]
 8003598:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800359a:	9106      	str	r1, [sp, #24]
 800359c:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80035a0:	2100      	movs	r1, #0
 80035a2:	9102      	str	r1, [sp, #8]
 80035a4:	e9cd 2300 	strd	r2, r3, [sp]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035ac:	6939      	ldr	r1, [r7, #16]
 80035ae:	6978      	ldr	r0, [r7, #20]
 80035b0:	f7fe ff92 	bl	80024d8 <_ntoa_long_long>
 80035b4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80035b6:	e051      	b.n	800365c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80035b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d018      	beq.n	80035f4 <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80035c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035c6:	1d1a      	adds	r2, r3, #4
 80035c8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80035d0:	9205      	str	r2, [sp, #20]
 80035d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035d4:	9204      	str	r2, [sp, #16]
 80035d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035d8:	9203      	str	r2, [sp, #12]
 80035da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035dc:	9202      	str	r2, [sp, #8]
 80035de:	2200      	movs	r2, #0
 80035e0:	9201      	str	r2, [sp, #4]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035e8:	6939      	ldr	r1, [r7, #16]
 80035ea:	6978      	ldr	r0, [r7, #20]
 80035ec:	f7fe ff0e 	bl	800240c <_ntoa_long>
 80035f0:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80035f2:	e033      	b.n	800365c <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80035f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <_vsnprintf+0x696>
 80035fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003602:	1d1a      	adds	r2, r3, #4
 8003604:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	e012      	b.n	8003634 <_vsnprintf+0x6bc>
 800360e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <_vsnprintf+0x6b0>
 8003618:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800361c:	1d1a      	adds	r2, r3, #4
 800361e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	e005      	b.n	8003634 <_vsnprintf+0x6bc>
 8003628:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800362c:	1d1a      	adds	r2, r3, #4
 800362e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003638:	9305      	str	r3, [sp, #20]
 800363a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800363c:	9304      	str	r3, [sp, #16]
 800363e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003640:	9303      	str	r3, [sp, #12]
 8003642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003644:	9302      	str	r3, [sp, #8]
 8003646:	2300      	movs	r3, #0
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003652:	6939      	ldr	r1, [r7, #16]
 8003654:	6978      	ldr	r0, [r7, #20]
 8003656:	f7fe fed9 	bl	800240c <_ntoa_long>
 800365a:	64f8      	str	r0, [r7, #76]	@ 0x4c
          }
        }
        format++;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	3301      	adds	r3, #1
 8003660:	60bb      	str	r3, [r7, #8]
        break;
 8003662:	e166      	b.n	8003932 <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b46      	cmp	r3, #70	@ 0x46
 800366a:	d103      	bne.n	8003674 <_vsnprintf+0x6fc>
 800366c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800366e:	f043 0320 	orr.w	r3, r3, #32
 8003672:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003674:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003678:	3307      	adds	r3, #7
 800367a:	f023 0307 	bic.w	r3, r3, #7
 800367e:	f103 0208 	add.w	r2, r3, #8
 8003682:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003686:	ed93 7b00 	vldr	d7, [r3]
 800368a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800368c:	9302      	str	r3, [sp, #8]
 800368e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003690:	9301      	str	r3, [sp, #4]
 8003692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	eeb0 0a47 	vmov.f32	s0, s14
 800369a:	eef0 0a67 	vmov.f32	s1, s15
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036a2:	6939      	ldr	r1, [r7, #16]
 80036a4:	6978      	ldr	r0, [r7, #20]
 80036a6:	f7fe ff87 	bl	80025b8 <_ftoa>
 80036aa:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	3301      	adds	r3, #1
 80036b0:	60bb      	str	r3, [r7, #8]
        break;
 80036b2:	e13e      	b.n	8003932 <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b67      	cmp	r3, #103	@ 0x67
 80036ba:	d003      	beq.n	80036c4 <_vsnprintf+0x74c>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b47      	cmp	r3, #71	@ 0x47
 80036c2:	d103      	bne.n	80036cc <_vsnprintf+0x754>
 80036c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80036ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b45      	cmp	r3, #69	@ 0x45
 80036d2:	d003      	beq.n	80036dc <_vsnprintf+0x764>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b47      	cmp	r3, #71	@ 0x47
 80036da:	d103      	bne.n	80036e4 <_vsnprintf+0x76c>
 80036dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036de:	f043 0320 	orr.w	r3, r3, #32
 80036e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80036e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036e8:	3307      	adds	r3, #7
 80036ea:	f023 0307 	bic.w	r3, r3, #7
 80036ee:	f103 0208 	add.w	r2, r3, #8
 80036f2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80036f6:	ed93 7b00 	vldr	d7, [r3]
 80036fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036fc:	9302      	str	r3, [sp, #8]
 80036fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	eeb0 0a47 	vmov.f32	s0, s14
 800370a:	eef0 0a67 	vmov.f32	s1, s15
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003712:	6939      	ldr	r1, [r7, #16]
 8003714:	6978      	ldr	r0, [r7, #20]
 8003716:	f7ff f9a7 	bl	8002a68 <_etoa>
 800371a:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	3301      	adds	r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
        break;
 8003722:	e106      	b.n	8003932 <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003724:	2301      	movs	r3, #1
 8003726:	647b      	str	r3, [r7, #68]	@ 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10e      	bne.n	8003750 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8003732:	e007      	b.n	8003744 <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8003734:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003736:	1c53      	adds	r3, r2, #1
 8003738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800373a:	697c      	ldr	r4, [r7, #20]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6939      	ldr	r1, [r7, #16]
 8003740:	2020      	movs	r0, #32
 8003742:	47a0      	blx	r4
          while (l++ < width) {
 8003744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	647a      	str	r2, [r7, #68]	@ 0x44
 800374a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800374c:	429a      	cmp	r2, r3
 800374e:	d8f1      	bhi.n	8003734 <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003754:	1d1a      	adds	r2, r3, #4
 8003756:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	b2d8      	uxtb	r0, r3
 800375e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003760:	1c53      	adds	r3, r2, #1
 8003762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003764:	697c      	ldr	r4, [r7, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6939      	ldr	r1, [r7, #16]
 800376a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800376c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00e      	beq.n	8003794 <_vsnprintf+0x81c>
          while (l++ < width) {
 8003776:	e007      	b.n	8003788 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8003778:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800377a:	1c53      	adds	r3, r2, #1
 800377c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800377e:	697c      	ldr	r4, [r7, #20]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6939      	ldr	r1, [r7, #16]
 8003784:	2020      	movs	r0, #32
 8003786:	47a0      	blx	r4
          while (l++ < width) {
 8003788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	647a      	str	r2, [r7, #68]	@ 0x44
 800378e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003790:	429a      	cmp	r2, r3
 8003792:	d8f1      	bhi.n	8003778 <_vsnprintf+0x800>
          }
        }
        format++;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	3301      	adds	r3, #1
 8003798:	60bb      	str	r3, [r7, #8]
        break;
 800379a:	e0ca      	b.n	8003932 <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800379c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037a0:	1d1a      	adds	r2, r3, #4
 80037a2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	643b      	str	r3, [r7, #64]	@ 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80037aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <_vsnprintf+0x83c>
 80037b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b2:	e001      	b.n	80037b8 <_vsnprintf+0x840>
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
 80037b8:	4619      	mov	r1, r3
 80037ba:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80037bc:	f7fe fca2 	bl	8002104 <_strnlen_s>
 80037c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80037c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 80037cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d0:	4293      	cmp	r3, r2
 80037d2:	bf28      	it	cs
 80037d4:	4613      	movcs	r3, r2
 80037d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80037d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d11a      	bne.n	8003818 <_vsnprintf+0x8a0>
          while (l++ < width) {
 80037e2:	e007      	b.n	80037f4 <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 80037e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037e6:	1c53      	adds	r3, r2, #1
 80037e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ea:	697c      	ldr	r4, [r7, #20]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6939      	ldr	r1, [r7, #16]
 80037f0:	2020      	movs	r0, #32
 80037f2:	47a0      	blx	r4
          while (l++ < width) {
 80037f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d8f1      	bhi.n	80037e4 <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003800:	e00a      	b.n	8003818 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8003802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	643a      	str	r2, [r7, #64]	@ 0x40
 8003808:	7818      	ldrb	r0, [r3, #0]
 800380a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800380c:	1c53      	adds	r3, r2, #1
 800380e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003810:	697c      	ldr	r4, [r7, #20]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6939      	ldr	r1, [r7, #16]
 8003816:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <_vsnprintf+0x8bc>
 8003820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0eb      	beq.n	8003802 <_vsnprintf+0x88a>
 800382a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800382c:	1e5a      	subs	r2, r3, #1
 800382e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e6      	bne.n	8003802 <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003834:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00e      	beq.n	800385c <_vsnprintf+0x8e4>
          while (l++ < width) {
 800383e:	e007      	b.n	8003850 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8003840:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003842:	1c53      	adds	r3, r2, #1
 8003844:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003846:	697c      	ldr	r4, [r7, #20]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6939      	ldr	r1, [r7, #16]
 800384c:	2020      	movs	r0, #32
 800384e:	47a0      	blx	r4
          while (l++ < width) {
 8003850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003856:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003858:	429a      	cmp	r2, r3
 800385a:	d8f1      	bhi.n	8003840 <_vsnprintf+0x8c8>
          }
        }
        format++;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	3301      	adds	r3, #1
 8003860:	60bb      	str	r3, [r7, #8]
        break;
 8003862:	e066      	b.n	8003932 <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003864:	2308      	movs	r3, #8
 8003866:	65bb      	str	r3, [r7, #88]	@ 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003868:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800386a:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 800386e:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003870:	2300      	movs	r3, #0
 8003872:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (is_ll) {
 8003876:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800387a:	2b00      	cmp	r3, #0
 800387c:	d023      	beq.n	80038c6 <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800387e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003882:	1d1a      	adds	r2, r3, #4
 8003884:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	2300      	movs	r3, #0
 800388e:	603a      	str	r2, [r7, #0]
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003894:	9308      	str	r3, [sp, #32]
 8003896:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003898:	9307      	str	r3, [sp, #28]
 800389a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389c:	9306      	str	r3, [sp, #24]
 800389e:	f04f 0210 	mov.w	r2, #16
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80038aa:	2300      	movs	r3, #0
 80038ac:	9302      	str	r3, [sp, #8]
 80038ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80038b2:	e9cd 3400 	strd	r3, r4, [sp]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038ba:	6939      	ldr	r1, [r7, #16]
 80038bc:	6978      	ldr	r0, [r7, #20]
 80038be:	f7fe fe0b 	bl	80024d8 <_ntoa_long_long>
 80038c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80038c4:	e018      	b.n	80038f8 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80038c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038ca:	1d1a      	adds	r2, r3, #4
 80038cc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038d6:	9305      	str	r3, [sp, #20]
 80038d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038da:	9304      	str	r3, [sp, #16]
 80038dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038de:	9303      	str	r3, [sp, #12]
 80038e0:	2310      	movs	r3, #16
 80038e2:	9302      	str	r3, [sp, #8]
 80038e4:	2300      	movs	r3, #0
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	9200      	str	r2, [sp, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038ee:	6939      	ldr	r1, [r7, #16]
 80038f0:	6978      	ldr	r0, [r7, #20]
 80038f2:	f7fe fd8b 	bl	800240c <_ntoa_long>
 80038f6:	64f8      	str	r0, [r7, #76]	@ 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	3301      	adds	r3, #1
 80038fc:	60bb      	str	r3, [r7, #8]
        break;
 80038fe:	e018      	b.n	8003932 <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003900:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003902:	1c53      	adds	r3, r2, #1
 8003904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003906:	697c      	ldr	r4, [r7, #20]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6939      	ldr	r1, [r7, #16]
 800390c:	2025      	movs	r0, #37	@ 0x25
 800390e:	47a0      	blx	r4
        format++;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3301      	adds	r3, #1
 8003914:	60bb      	str	r3, [r7, #8]
        break;
 8003916:	e00c      	b.n	8003932 <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	7818      	ldrb	r0, [r3, #0]
 800391c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800391e:	1c53      	adds	r3, r2, #1
 8003920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003922:	697c      	ldr	r4, [r7, #20]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6939      	ldr	r1, [r7, #16]
 8003928:	47a0      	blx	r4
        format++;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	3301      	adds	r3, #1
 800392e:	60bb      	str	r3, [r7, #8]
        break;
 8003930:	bf00      	nop
  while (*format)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f47f ab30 	bne.w	8002f9c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800393c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	429a      	cmp	r2, r3
 8003942:	d302      	bcc.n	800394a <_vsnprintf+0x9d2>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	1e5a      	subs	r2, r3, #1
 8003948:	e000      	b.n	800394c <_vsnprintf+0x9d4>
 800394a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800394c:	697c      	ldr	r4, [r7, #20]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6939      	ldr	r1, [r7, #16]
 8003952:	2000      	movs	r0, #0
 8003954:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8003958:	4618      	mov	r0, r3
 800395a:	3764      	adds	r7, #100	@ 0x64
 800395c:	46bd      	mov	sp, r7
 800395e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003962:	bf00      	nop

08003964 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8003964:	b40e      	push	{r1, r2, r3}
 8003966:	b580      	push	{r7, lr}
 8003968:	b087      	sub	sp, #28
 800396a:	af02      	add	r7, sp, #8
 800396c:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800396e:	f107 0320 	add.w	r3, r7, #32
 8003972:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f04f 32ff 	mov.w	r2, #4294967295
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4805      	ldr	r0, [pc, #20]	@ (8003998 <sprintf_+0x34>)
 8003982:	f7ff faf9 	bl	8002f78 <_vsnprintf>
 8003986:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003988:	68fb      	ldr	r3, [r7, #12]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003994:	b003      	add	sp, #12
 8003996:	4770      	bx	lr
 8003998:	080020bb 	.word	0x080020bb

0800399c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80039a0:	4b18      	ldr	r3, [pc, #96]	@ (8003a04 <MX_SPI2_Init+0x68>)
 80039a2:	4a19      	ldr	r2, [pc, #100]	@ (8003a08 <MX_SPI2_Init+0x6c>)
 80039a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80039a6:	4b17      	ldr	r3, [pc, #92]	@ (8003a04 <MX_SPI2_Init+0x68>)
 80039a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80039ae:	4b15      	ldr	r3, [pc, #84]	@ (8003a04 <MX_SPI2_Init+0x68>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80039b4:	4b13      	ldr	r3, [pc, #76]	@ (8003a04 <MX_SPI2_Init+0x68>)
 80039b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039bc:	4b11      	ldr	r3, [pc, #68]	@ (8003a04 <MX_SPI2_Init+0x68>)
 80039be:	2200      	movs	r2, #0
 80039c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80039c2:	4b10      	ldr	r3, [pc, #64]	@ (8003a04 <MX_SPI2_Init+0x68>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80039c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a04 <MX_SPI2_Init+0x68>)
 80039ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80039d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a04 <MX_SPI2_Init+0x68>)
 80039d2:	2208      	movs	r2, #8
 80039d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a04 <MX_SPI2_Init+0x68>)
 80039d8:	2200      	movs	r2, #0
 80039da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80039dc:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <MX_SPI2_Init+0x68>)
 80039de:	2200      	movs	r2, #0
 80039e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e2:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <MX_SPI2_Init+0x68>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80039e8:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <MX_SPI2_Init+0x68>)
 80039ea:	220a      	movs	r2, #10
 80039ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80039ee:	4805      	ldr	r0, [pc, #20]	@ (8003a04 <MX_SPI2_Init+0x68>)
 80039f0:	f001 fd42 	bl	8005478 <HAL_SPI_Init>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80039fa:	f7fe f809 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000278 	.word	0x20000278
 8003a08:	40003800 	.word	0x40003800

08003a0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	@ 0x28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a14:	f107 0314 	add.w	r3, r7, #20
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	60da      	str	r2, [r3, #12]
 8003a22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a19      	ldr	r2, [pc, #100]	@ (8003a90 <HAL_SPI_MspInit+0x84>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d12c      	bne.n	8003a88 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	4b18      	ldr	r3, [pc, #96]	@ (8003a94 <HAL_SPI_MspInit+0x88>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	4a17      	ldr	r2, [pc, #92]	@ (8003a94 <HAL_SPI_MspInit+0x88>)
 8003a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a3e:	4b15      	ldr	r3, [pc, #84]	@ (8003a94 <HAL_SPI_MspInit+0x88>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	4b11      	ldr	r3, [pc, #68]	@ (8003a94 <HAL_SPI_MspInit+0x88>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	4a10      	ldr	r2, [pc, #64]	@ (8003a94 <HAL_SPI_MspInit+0x88>)
 8003a54:	f043 0302 	orr.w	r3, r3, #2
 8003a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <HAL_SPI_MspInit+0x88>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003a66:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a74:	2303      	movs	r3, #3
 8003a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a78:	2305      	movs	r3, #5
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a7c:	f107 0314 	add.w	r3, r7, #20
 8003a80:	4619      	mov	r1, r3
 8003a82:	4805      	ldr	r0, [pc, #20]	@ (8003a98 <HAL_SPI_MspInit+0x8c>)
 8003a84:	f000 fec2 	bl	800480c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3728      	adds	r7, #40	@ 0x28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40003800 	.word	0x40003800
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40020400 	.word	0x40020400

08003a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <HAL_MspInit+0x4c>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae8 <HAL_MspInit+0x4c>)
 8003aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae8 <HAL_MspInit+0x4c>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	4b09      	ldr	r3, [pc, #36]	@ (8003ae8 <HAL_MspInit+0x4c>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	4a08      	ldr	r2, [pc, #32]	@ (8003ae8 <HAL_MspInit+0x4c>)
 8003ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ace:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <HAL_MspInit+0x4c>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800

08003aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003af0:	bf00      	nop
 8003af2:	e7fd      	b.n	8003af0 <NMI_Handler+0x4>

08003af4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <HardFault_Handler+0x4>

08003afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b00:	bf00      	nop
 8003b02:	e7fd      	b.n	8003b00 <MemManage_Handler+0x4>

08003b04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <BusFault_Handler+0x4>

08003b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b10:	bf00      	nop
 8003b12:	e7fd      	b.n	8003b10 <UsageFault_Handler+0x4>

08003b14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b22:	b480      	push	{r7}
 8003b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b26:	bf00      	nop
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b42:	f000 fc5f 	bl	8004404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b50:	4802      	ldr	r0, [pc, #8]	@ (8003b5c <TIM2_IRQHandler+0x10>)
 8003b52:	f002 fbeb 	bl	800632c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	200002d0 	.word	0x200002d0

08003b60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b64:	4802      	ldr	r0, [pc, #8]	@ (8003b70 <USART2_IRQHandler+0x10>)
 8003b66:	f003 fb0b 	bl	8007180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	200003a8 	.word	0x200003a8

08003b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b78:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <SystemInit+0x20>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7e:	4a05      	ldr	r2, [pc, #20]	@ (8003b94 <SystemInit+0x20>)
 8003b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b88:	bf00      	nop
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b9e:	f107 0308 	add.w	r3, r7, #8
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	609a      	str	r2, [r3, #8]
 8003baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bac:	463b      	mov	r3, r7
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c2c <MX_TIM2_Init+0x94>)
 8003bb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003bba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c2c <MX_TIM2_Init+0x94>)
 8003bbe:	2210      	movs	r2, #16
 8003bc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c2c <MX_TIM2_Init+0x94>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8003bc8:	4b18      	ldr	r3, [pc, #96]	@ (8003c2c <MX_TIM2_Init+0x94>)
 8003bca:	220a      	movs	r2, #10
 8003bcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bce:	4b17      	ldr	r3, [pc, #92]	@ (8003c2c <MX_TIM2_Init+0x94>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bd4:	4b15      	ldr	r3, [pc, #84]	@ (8003c2c <MX_TIM2_Init+0x94>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003bda:	4814      	ldr	r0, [pc, #80]	@ (8003c2c <MX_TIM2_Init+0x94>)
 8003bdc:	f002 f9f4 	bl	8005fc8 <HAL_TIM_Base_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8003be6:	f7fd ff13 	bl	8001a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003bf0:	f107 0308 	add.w	r3, r7, #8
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	480d      	ldr	r0, [pc, #52]	@ (8003c2c <MX_TIM2_Init+0x94>)
 8003bf8:	f002 fd62 	bl	80066c0 <HAL_TIM_ConfigClockSource>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8003c02:	f7fd ff05 	bl	8001a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003c06:	2320      	movs	r3, #32
 8003c08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c0e:	463b      	mov	r3, r7
 8003c10:	4619      	mov	r1, r3
 8003c12:	4806      	ldr	r0, [pc, #24]	@ (8003c2c <MX_TIM2_Init+0x94>)
 8003c14:	f003 f91a 	bl	8006e4c <HAL_TIMEx_MasterConfigSynchronization>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8003c1e:	f7fd fef7 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c22:	bf00      	nop
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200002d0 	.word	0x200002d0

08003c30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	@ 0x28
 8003c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c36:	f107 0320 	add.w	r3, r7, #32
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c40:	1d3b      	adds	r3, r7, #4
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	609a      	str	r2, [r3, #8]
 8003c4a:	60da      	str	r2, [r3, #12]
 8003c4c:	611a      	str	r2, [r3, #16]
 8003c4e:	615a      	str	r2, [r3, #20]
 8003c50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c52:	4b27      	ldr	r3, [pc, #156]	@ (8003cf0 <MX_TIM3_Init+0xc0>)
 8003c54:	4a27      	ldr	r2, [pc, #156]	@ (8003cf4 <MX_TIM3_Init+0xc4>)
 8003c56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8003c58:	4b25      	ldr	r3, [pc, #148]	@ (8003cf0 <MX_TIM3_Init+0xc0>)
 8003c5a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8003c5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c60:	4b23      	ldr	r3, [pc, #140]	@ (8003cf0 <MX_TIM3_Init+0xc0>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003c66:	4b22      	ldr	r3, [pc, #136]	@ (8003cf0 <MX_TIM3_Init+0xc0>)
 8003c68:	2263      	movs	r2, #99	@ 0x63
 8003c6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c6c:	4b20      	ldr	r3, [pc, #128]	@ (8003cf0 <MX_TIM3_Init+0xc0>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c72:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf0 <MX_TIM3_Init+0xc0>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003c78:	481d      	ldr	r0, [pc, #116]	@ (8003cf0 <MX_TIM3_Init+0xc0>)
 8003c7a:	f002 fa57 	bl	800612c <HAL_TIM_PWM_Init>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003c84:	f7fd fec4 	bl	8001a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c90:	f107 0320 	add.w	r3, r7, #32
 8003c94:	4619      	mov	r1, r3
 8003c96:	4816      	ldr	r0, [pc, #88]	@ (8003cf0 <MX_TIM3_Init+0xc0>)
 8003c98:	f003 f8d8 	bl	8006e4c <HAL_TIMEx_MasterConfigSynchronization>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003ca2:	f7fd feb5 	bl	8001a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ca6:	2360      	movs	r3, #96	@ 0x60
 8003ca8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cb6:	1d3b      	adds	r3, r7, #4
 8003cb8:	2200      	movs	r2, #0
 8003cba:	4619      	mov	r1, r3
 8003cbc:	480c      	ldr	r0, [pc, #48]	@ (8003cf0 <MX_TIM3_Init+0xc0>)
 8003cbe:	f002 fc3d 	bl	800653c <HAL_TIM_PWM_ConfigChannel>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003cc8:	f7fd fea2 	bl	8001a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ccc:	1d3b      	adds	r3, r7, #4
 8003cce:	2204      	movs	r2, #4
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4807      	ldr	r0, [pc, #28]	@ (8003cf0 <MX_TIM3_Init+0xc0>)
 8003cd4:	f002 fc32 	bl	800653c <HAL_TIM_PWM_ConfigChannel>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003cde:	f7fd fe97 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ce2:	4803      	ldr	r0, [pc, #12]	@ (8003cf0 <MX_TIM3_Init+0xc0>)
 8003ce4:	f000 f8ca 	bl	8003e7c <HAL_TIM_MspPostInit>

}
 8003ce8:	bf00      	nop
 8003cea:	3728      	adds	r7, #40	@ 0x28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000318 	.word	0x20000318
 8003cf4:	40000400 	.word	0x40000400

08003cf8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	@ 0x28
 8003cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cfe:	f107 0320 	add.w	r3, r7, #32
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d08:	1d3b      	adds	r3, r7, #4
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	605a      	str	r2, [r3, #4]
 8003d10:	609a      	str	r2, [r3, #8]
 8003d12:	60da      	str	r2, [r3, #12]
 8003d14:	611a      	str	r2, [r3, #16]
 8003d16:	615a      	str	r2, [r3, #20]
 8003d18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d1a:	4b27      	ldr	r3, [pc, #156]	@ (8003db8 <MX_TIM4_Init+0xc0>)
 8003d1c:	4a27      	ldr	r2, [pc, #156]	@ (8003dbc <MX_TIM4_Init+0xc4>)
 8003d1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500-1;
 8003d20:	4b25      	ldr	r3, [pc, #148]	@ (8003db8 <MX_TIM4_Init+0xc0>)
 8003d22:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8003d26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d28:	4b23      	ldr	r3, [pc, #140]	@ (8003db8 <MX_TIM4_Init+0xc0>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8003d2e:	4b22      	ldr	r3, [pc, #136]	@ (8003db8 <MX_TIM4_Init+0xc0>)
 8003d30:	2263      	movs	r2, #99	@ 0x63
 8003d32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d34:	4b20      	ldr	r3, [pc, #128]	@ (8003db8 <MX_TIM4_Init+0xc0>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003db8 <MX_TIM4_Init+0xc0>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003d40:	481d      	ldr	r0, [pc, #116]	@ (8003db8 <MX_TIM4_Init+0xc0>)
 8003d42:	f002 f9f3 	bl	800612c <HAL_TIM_PWM_Init>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003d4c:	f7fd fe60 	bl	8001a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d50:	2300      	movs	r3, #0
 8003d52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d58:	f107 0320 	add.w	r3, r7, #32
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4816      	ldr	r0, [pc, #88]	@ (8003db8 <MX_TIM4_Init+0xc0>)
 8003d60:	f003 f874 	bl	8006e4c <HAL_TIMEx_MasterConfigSynchronization>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003d6a:	f7fd fe51 	bl	8001a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d6e:	2360      	movs	r3, #96	@ 0x60
 8003d70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d7e:	1d3b      	adds	r3, r7, #4
 8003d80:	2200      	movs	r2, #0
 8003d82:	4619      	mov	r1, r3
 8003d84:	480c      	ldr	r0, [pc, #48]	@ (8003db8 <MX_TIM4_Init+0xc0>)
 8003d86:	f002 fbd9 	bl	800653c <HAL_TIM_PWM_ConfigChannel>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003d90:	f7fd fe3e 	bl	8001a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	2204      	movs	r2, #4
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4807      	ldr	r0, [pc, #28]	@ (8003db8 <MX_TIM4_Init+0xc0>)
 8003d9c:	f002 fbce 	bl	800653c <HAL_TIM_PWM_ConfigChannel>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003da6:	f7fd fe33 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003daa:	4803      	ldr	r0, [pc, #12]	@ (8003db8 <MX_TIM4_Init+0xc0>)
 8003dac:	f000 f866 	bl	8003e7c <HAL_TIM_MspPostInit>

}
 8003db0:	bf00      	nop
 8003db2:	3728      	adds	r7, #40	@ 0x28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000360 	.word	0x20000360
 8003dbc:	40000800 	.word	0x40000800

08003dc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd0:	d115      	bne.n	8003dfe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003e08 <HAL_TIM_Base_MspInit+0x48>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	4a0b      	ldr	r2, [pc, #44]	@ (8003e08 <HAL_TIM_Base_MspInit+0x48>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003de2:	4b09      	ldr	r3, [pc, #36]	@ (8003e08 <HAL_TIM_Base_MspInit+0x48>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003dee:	2200      	movs	r2, #0
 8003df0:	2100      	movs	r1, #0
 8003df2:	201c      	movs	r0, #28
 8003df4:	f000 fc25 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003df8:	201c      	movs	r0, #28
 8003dfa:	f000 fc3e 	bl	800467a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800

08003e0c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a15      	ldr	r2, [pc, #84]	@ (8003e70 <HAL_TIM_PWM_MspInit+0x64>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d10e      	bne.n	8003e3c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	4b14      	ldr	r3, [pc, #80]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x68>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	4a13      	ldr	r2, [pc, #76]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x68>)
 8003e28:	f043 0302 	orr.w	r3, r3, #2
 8003e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e2e:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x68>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003e3a:	e012      	b.n	8003e62 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM4)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a0d      	ldr	r2, [pc, #52]	@ (8003e78 <HAL_TIM_PWM_MspInit+0x6c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d10d      	bne.n	8003e62 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x68>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	4a09      	ldr	r2, [pc, #36]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x68>)
 8003e50:	f043 0304 	orr.w	r3, r3, #4
 8003e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e56:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <HAL_TIM_PWM_MspInit+0x68>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
}
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40000800 	.word	0x40000800

08003e7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	@ 0x28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e84:	f107 0314 	add.w	r3, r7, #20
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
 8003e90:	60da      	str	r2, [r3, #12]
 8003e92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a24      	ldr	r2, [pc, #144]	@ (8003f2c <HAL_TIM_MspPostInit+0xb0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d11e      	bne.n	8003edc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	4b23      	ldr	r3, [pc, #140]	@ (8003f30 <HAL_TIM_MspPostInit+0xb4>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea6:	4a22      	ldr	r2, [pc, #136]	@ (8003f30 <HAL_TIM_MspPostInit+0xb4>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eae:	4b20      	ldr	r3, [pc, #128]	@ (8003f30 <HAL_TIM_MspPostInit+0xb4>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003eba:	23c0      	movs	r3, #192	@ 0xc0
 8003ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ece:	f107 0314 	add.w	r3, r7, #20
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4817      	ldr	r0, [pc, #92]	@ (8003f34 <HAL_TIM_MspPostInit+0xb8>)
 8003ed6:	f000 fc99 	bl	800480c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003eda:	e022      	b.n	8003f22 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM4)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a15      	ldr	r2, [pc, #84]	@ (8003f38 <HAL_TIM_MspPostInit+0xbc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d11d      	bne.n	8003f22 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <HAL_TIM_MspPostInit+0xb4>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eee:	4a10      	ldr	r2, [pc, #64]	@ (8003f30 <HAL_TIM_MspPostInit+0xb4>)
 8003ef0:	f043 0302 	orr.w	r3, r3, #2
 8003ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f30 <HAL_TIM_MspPostInit+0xb4>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f02:	23c0      	movs	r3, #192	@ 0xc0
 8003f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f06:	2302      	movs	r3, #2
 8003f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f12:	2302      	movs	r3, #2
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f16:	f107 0314 	add.w	r3, r7, #20
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4807      	ldr	r0, [pc, #28]	@ (8003f3c <HAL_TIM_MspPostInit+0xc0>)
 8003f1e:	f000 fc75 	bl	800480c <HAL_GPIO_Init>
}
 8003f22:	bf00      	nop
 8003f24:	3728      	adds	r7, #40	@ 0x28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40020000 	.word	0x40020000
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	40020400 	.word	0x40020400

08003f40 <tle5012_ReadAngle>:
 * Description  : ��ȡ���ԽǶ�ֵ
 * Parameters   : none
 * Returns      : none
************************************************/
float tle5012_ReadAngle(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
	/*0x4000 = -180			0x3FFF = +179.99*/
//	return (float)( tle5012_ReadValue(READ_ANGLE_VALUE) * ANG_RATIO );
	uint16_t var,res1,res2;
	float angle;

	var = READ_ANGLE_VALUE;
 8003f46:	f248 0321 	movw	r3, #32801	@ 0x8021
 8003f4a:	817b      	strh	r3, [r7, #10]
	SPI_CS_ENABLE;
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f52:	481a      	ldr	r0, [pc, #104]	@ (8003fbc <tle5012_ReadAngle+0x7c>)
 8003f54:	f000 fdde 	bl	8004b14 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 8003f58:	f107 010a 	add.w	r1, r7, #10
 8003f5c:	23ff      	movs	r3, #255	@ 0xff
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4817      	ldr	r0, [pc, #92]	@ (8003fc0 <tle5012_ReadAngle+0x80>)
 8003f62:	f001 fb12 	bl	800558a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 8003f66:	f107 0108 	add.w	r1, r7, #8
 8003f6a:	23ff      	movs	r3, #255	@ 0xff
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	4814      	ldr	r0, [pc, #80]	@ (8003fc0 <tle5012_ReadAngle+0x80>)
 8003f70:	f001 fc47 	bl	8005802 <HAL_SPI_Receive>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res2), 1, 0xff);
 8003f74:	1db9      	adds	r1, r7, #6
 8003f76:	23ff      	movs	r3, #255	@ 0xff
 8003f78:	2201      	movs	r2, #1
 8003f7a:	4811      	ldr	r0, [pc, #68]	@ (8003fc0 <tle5012_ReadAngle+0x80>)
 8003f7c:	f001 fc41 	bl	8005802 <HAL_SPI_Receive>
	res1 = res1&0x7FFF;
 8003f80:	893b      	ldrh	r3, [r7, #8]
 8003f82:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	813b      	strh	r3, [r7, #8]
	SPI_CS_DISABLE;
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f90:	480a      	ldr	r0, [pc, #40]	@ (8003fbc <tle5012_ReadAngle+0x7c>)
 8003f92:	f000 fdbf 	bl	8004b14 <HAL_GPIO_WritePin>
	angle = (float)(res1*ANG_RATIO);
 8003f96:	893b      	ldrh	r3, [r7, #8]
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8003fc4 <tle5012_ReadAngle+0x84>
 8003fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fa8:	edc7 7a03 	vstr	s15, [r7, #12]
	//if (angle>0) {angle=(180+angle);}
	//if (angle<0) {angle=180+(180+angle);}
	//if (angle<0) {angle=180+(180+angle);}
	//sprintf_min((char*)stringo,"rx angle: %.2f \r\n",angle);
	//HAL_UART_Transmit(&huart2,stringo,sizeof(stringo),0xff);
	return(angle);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	ee07 3a90 	vmov	s15, r3
}
 8003fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40020000 	.word	0x40020000
 8003fc0:	20000278 	.word	0x20000278
 8003fc4:	3c33fea0 	.word	0x3c33fea0

08003fc8 <tle5012_ReadAngle2>:



void tle5012_ReadAngle2(float* angle)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
	/*0x4000 = -180			0x3FFF = +179.99*/
//	return (float)( tle5012_ReadValue(READ_ANGLE_VALUE) * ANG_RATIO );
	uint16_t var,res1,res2;
	//float angle;

	var = READ_ANGLE_VALUE;
 8003fd0:	f248 0321 	movw	r3, #32801	@ 0x8021
 8003fd4:	81fb      	strh	r3, [r7, #14]
	SPI_CS_ENABLE2;
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003fdc:	4819      	ldr	r0, [pc, #100]	@ (8004044 <tle5012_ReadAngle2+0x7c>)
 8003fde:	f000 fd99 	bl	8004b14 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 8003fe2:	f107 010e 	add.w	r1, r7, #14
 8003fe6:	23ff      	movs	r3, #255	@ 0xff
 8003fe8:	2201      	movs	r2, #1
 8003fea:	4817      	ldr	r0, [pc, #92]	@ (8004048 <tle5012_ReadAngle2+0x80>)
 8003fec:	f001 facd 	bl	800558a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 8003ff0:	f107 010c 	add.w	r1, r7, #12
 8003ff4:	23ff      	movs	r3, #255	@ 0xff
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4813      	ldr	r0, [pc, #76]	@ (8004048 <tle5012_ReadAngle2+0x80>)
 8003ffa:	f001 fc02 	bl	8005802 <HAL_SPI_Receive>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res2), 1, 0xff);
 8003ffe:	f107 010a 	add.w	r1, r7, #10
 8004002:	23ff      	movs	r3, #255	@ 0xff
 8004004:	2201      	movs	r2, #1
 8004006:	4810      	ldr	r0, [pc, #64]	@ (8004048 <tle5012_ReadAngle2+0x80>)
 8004008:	f001 fbfb 	bl	8005802 <HAL_SPI_Receive>
	res1 = res1&0x7FFF;
 800400c:	89bb      	ldrh	r3, [r7, #12]
 800400e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004012:	b29b      	uxth	r3, r3
 8004014:	81bb      	strh	r3, [r7, #12]
	SPI_CS_DISABLE2;
 8004016:	2201      	movs	r2, #1
 8004018:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800401c:	4809      	ldr	r0, [pc, #36]	@ (8004044 <tle5012_ReadAngle2+0x7c>)
 800401e:	f000 fd79 	bl	8004b14 <HAL_GPIO_WritePin>
	*angle = (float)(res1*ANG_RATIO);
 8004022:	89bb      	ldrh	r3, [r7, #12]
 8004024:	ee07 3a90 	vmov	s15, r3
 8004028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800402c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800404c <tle5012_ReadAngle2+0x84>
 8004030:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	edc3 7a00 	vstr	s15, [r3]
	//sprintf_min((char*)stringo,"rx angle: %.2f \r\n",*angle);
	//HAL_UART_Transmit(&huart2,stringo,sizeof(stringo),0xff);
	//return(&angle);
}
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40020000 	.word	0x40020000
 8004048:	20000278 	.word	0x20000278
 800404c:	3c33fea0 	.word	0x3c33fea0

08004050 <tle5012_ReadRevol>:
 * Description  : ��ת�٣���ʱ���һ
 * Parameters   : DirΪ0������˳�� DirΪ1���෴
 * Returns      : none
************************************************/
int16_t tle5012_ReadRevol(uint8_t Dir)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	71fb      	strb	r3, [r7, #7]
	uint16_t var,res1;
	int16_t revol;
	var = READ_RECOL_VALUE;
 800405a:	f248 0341 	movw	r3, #32833	@ 0x8041
 800405e:	81bb      	strh	r3, [r7, #12]
	SPI_CS_ENABLE;
 8004060:	2200      	movs	r2, #0
 8004062:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004066:	4822      	ldr	r0, [pc, #136]	@ (80040f0 <tle5012_ReadRevol+0xa0>)
 8004068:	f000 fd54 	bl	8004b14 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 800406c:	f107 010c 	add.w	r1, r7, #12
 8004070:	23ff      	movs	r3, #255	@ 0xff
 8004072:	2201      	movs	r2, #1
 8004074:	481f      	ldr	r0, [pc, #124]	@ (80040f4 <tle5012_ReadRevol+0xa4>)
 8004076:	f001 fa88 	bl	800558a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 800407a:	f107 010a 	add.w	r1, r7, #10
 800407e:	23ff      	movs	r3, #255	@ 0xff
 8004080:	2201      	movs	r2, #1
 8004082:	481c      	ldr	r0, [pc, #112]	@ (80040f4 <tle5012_ReadRevol+0xa4>)
 8004084:	f001 fbbd 	bl	8005802 <HAL_SPI_Receive>
	res1 = res1&0x1FF;
 8004088:	897b      	ldrh	r3, [r7, #10]
 800408a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408e:	b29b      	uxth	r3, r3
 8004090:	817b      	strh	r3, [r7, #10]
	if(res1&0x100)			//Ϊ����
 8004092:	897b      	ldrh	r3, [r7, #10]
 8004094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d010      	beq.n	80040be <tle5012_ReadRevol+0x6e>
	{
		res1 = ~res1;
 800409c:	897b      	ldrh	r3, [r7, #10]
 800409e:	43db      	mvns	r3, r3
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	817b      	strh	r3, [r7, #10]
		res1 &= 0x00FF;
 80040a4:	897b      	ldrh	r3, [r7, #10]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	817b      	strh	r3, [r7, #10]
		res1++;
 80040ac:	897b      	ldrh	r3, [r7, #10]
 80040ae:	3301      	adds	r3, #1
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	817b      	strh	r3, [r7, #10]
		revol = (int16_t)(0-res1);
 80040b4:	897b      	ldrh	r3, [r7, #10]
 80040b6:	425b      	negs	r3, r3
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	81fb      	strh	r3, [r7, #14]
 80040bc:	e005      	b.n	80040ca <tle5012_ReadRevol+0x7a>
	}
	else
	{
		res1 &= 0x00FF;
 80040be:	897b      	ldrh	r3, [r7, #10]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	817b      	strh	r3, [r7, #10]
		revol = (int16_t)res1;
 80040c6:	897b      	ldrh	r3, [r7, #10]
 80040c8:	81fb      	strh	r3, [r7, #14]
	}
	if(Dir)	revol = (int16_t)(0-revol);
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <tle5012_ReadRevol+0x88>
 80040d0:	89fb      	ldrh	r3, [r7, #14]
 80040d2:	425b      	negs	r3, r3
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	81fb      	strh	r3, [r7, #14]
	//sprintf_min((char*)stringo,"rx revol: %d \r\n",revol);
	//HAL_UART_Transmit(&huart2,stringo,sizeof(stringo),0xff);
	SPI_CS_DISABLE;
 80040d8:	2201      	movs	r2, #1
 80040da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040de:	4804      	ldr	r0, [pc, #16]	@ (80040f0 <tle5012_ReadRevol+0xa0>)
 80040e0:	f000 fd18 	bl	8004b14 <HAL_GPIO_WritePin>
	return(revol);
 80040e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40020000 	.word	0x40020000
 80040f4:	20000278 	.word	0x20000278

080040f8 <tle5012_ReadRevol2>:

int16_t tle5012_ReadRevol2(uint8_t Dir)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	71fb      	strb	r3, [r7, #7]
	uint16_t var,res1;
	int16_t revol;
	var = READ_RECOL_VALUE;
 8004102:	f248 0341 	movw	r3, #32833	@ 0x8041
 8004106:	81bb      	strh	r3, [r7, #12]
	SPI_CS_ENABLE2;
 8004108:	2200      	movs	r2, #0
 800410a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800410e:	4822      	ldr	r0, [pc, #136]	@ (8004198 <tle5012_ReadRevol2+0xa0>)
 8004110:	f000 fd00 	bl	8004b14 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 8004114:	f107 010c 	add.w	r1, r7, #12
 8004118:	23ff      	movs	r3, #255	@ 0xff
 800411a:	2201      	movs	r2, #1
 800411c:	481f      	ldr	r0, [pc, #124]	@ (800419c <tle5012_ReadRevol2+0xa4>)
 800411e:	f001 fa34 	bl	800558a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 8004122:	f107 010a 	add.w	r1, r7, #10
 8004126:	23ff      	movs	r3, #255	@ 0xff
 8004128:	2201      	movs	r2, #1
 800412a:	481c      	ldr	r0, [pc, #112]	@ (800419c <tle5012_ReadRevol2+0xa4>)
 800412c:	f001 fb69 	bl	8005802 <HAL_SPI_Receive>
	res1 = res1&0x1FF;
 8004130:	897b      	ldrh	r3, [r7, #10]
 8004132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004136:	b29b      	uxth	r3, r3
 8004138:	817b      	strh	r3, [r7, #10]
	if(res1&0x100)			//Ϊ����
 800413a:	897b      	ldrh	r3, [r7, #10]
 800413c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d010      	beq.n	8004166 <tle5012_ReadRevol2+0x6e>
	{
		res1 = ~res1;
 8004144:	897b      	ldrh	r3, [r7, #10]
 8004146:	43db      	mvns	r3, r3
 8004148:	b29b      	uxth	r3, r3
 800414a:	817b      	strh	r3, [r7, #10]
		res1 &= 0x00FF;
 800414c:	897b      	ldrh	r3, [r7, #10]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	b29b      	uxth	r3, r3
 8004152:	817b      	strh	r3, [r7, #10]
		res1++;
 8004154:	897b      	ldrh	r3, [r7, #10]
 8004156:	3301      	adds	r3, #1
 8004158:	b29b      	uxth	r3, r3
 800415a:	817b      	strh	r3, [r7, #10]
		revol = (int16_t)(0-res1);
 800415c:	897b      	ldrh	r3, [r7, #10]
 800415e:	425b      	negs	r3, r3
 8004160:	b29b      	uxth	r3, r3
 8004162:	81fb      	strh	r3, [r7, #14]
 8004164:	e005      	b.n	8004172 <tle5012_ReadRevol2+0x7a>
	}
	else
	{
		res1 &= 0x00FF;
 8004166:	897b      	ldrh	r3, [r7, #10]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	b29b      	uxth	r3, r3
 800416c:	817b      	strh	r3, [r7, #10]
		revol = (int16_t)res1;
 800416e:	897b      	ldrh	r3, [r7, #10]
 8004170:	81fb      	strh	r3, [r7, #14]
	}
	if(Dir)	revol = (int16_t)(0-revol);
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <tle5012_ReadRevol2+0x88>
 8004178:	89fb      	ldrh	r3, [r7, #14]
 800417a:	425b      	negs	r3, r3
 800417c:	b29b      	uxth	r3, r3
 800417e:	81fb      	strh	r3, [r7, #14]
	//sprintf_min((char*)stringo,"rx revol: %d \r\n",revol);
	//HAL_UART_Transmit(&huart2,stringo,sizeof(stringo),0xff);
	SPI_CS_DISABLE2;
 8004180:	2201      	movs	r2, #1
 8004182:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004186:	4804      	ldr	r0, [pc, #16]	@ (8004198 <tle5012_ReadRevol2+0xa0>)
 8004188:	f000 fcc4 	bl	8004b14 <HAL_GPIO_WritePin>
	return(revol);
 800418c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40020000 	.word	0x40020000
 800419c:	20000278 	.word	0x20000278

080041a0 <tle5012_Rset>:
 * Parameters   : DirΪ0������˳�� DirΪ1���෴
 * Returns      : none
************************************************/
//0101 1011 1111 1110       Write:0x5BFF��λӲ��
void tle5012_Rset(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
	uint16_t var,res1;
	var = WRITE_ACSTAT_VALUE;
 80041a6:	2311      	movs	r3, #17
 80041a8:	80fb      	strh	r3, [r7, #6]
	SPI_CS_ENABLE;
 80041aa:	2200      	movs	r2, #0
 80041ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041b0:	4810      	ldr	r0, [pc, #64]	@ (80041f4 <tle5012_Rset+0x54>)
 80041b2:	f000 fcaf 	bl	8004b14 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 80041b6:	1db9      	adds	r1, r7, #6
 80041b8:	23ff      	movs	r3, #255	@ 0xff
 80041ba:	2201      	movs	r2, #1
 80041bc:	480e      	ldr	r0, [pc, #56]	@ (80041f8 <tle5012_Rset+0x58>)
 80041be:	f001 f9e4 	bl	800558a <HAL_SPI_Transmit>
	var = 0x5BFF;
 80041c2:	f645 33ff 	movw	r3, #23551	@ 0x5bff
 80041c6:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 80041c8:	1db9      	adds	r1, r7, #6
 80041ca:	23ff      	movs	r3, #255	@ 0xff
 80041cc:	2201      	movs	r2, #1
 80041ce:	480a      	ldr	r0, [pc, #40]	@ (80041f8 <tle5012_Rset+0x58>)
 80041d0:	f001 f9db 	bl	800558a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 80041d4:	1d39      	adds	r1, r7, #4
 80041d6:	23ff      	movs	r3, #255	@ 0xff
 80041d8:	2201      	movs	r2, #1
 80041da:	4807      	ldr	r0, [pc, #28]	@ (80041f8 <tle5012_Rset+0x58>)
 80041dc:	f001 fb11 	bl	8005802 <HAL_SPI_Receive>
	SPI_CS_DISABLE;
 80041e0:	2201      	movs	r2, #1
 80041e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041e6:	4803      	ldr	r0, [pc, #12]	@ (80041f4 <tle5012_Rset+0x54>)
 80041e8:	f000 fc94 	bl	8004b14 <HAL_GPIO_WritePin>
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40020000 	.word	0x40020000
 80041f8:	20000278 	.word	0x20000278

080041fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004200:	4b11      	ldr	r3, [pc, #68]	@ (8004248 <MX_USART2_UART_Init+0x4c>)
 8004202:	4a12      	ldr	r2, [pc, #72]	@ (800424c <MX_USART2_UART_Init+0x50>)
 8004204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004206:	4b10      	ldr	r3, [pc, #64]	@ (8004248 <MX_USART2_UART_Init+0x4c>)
 8004208:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800420c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800420e:	4b0e      	ldr	r3, [pc, #56]	@ (8004248 <MX_USART2_UART_Init+0x4c>)
 8004210:	2200      	movs	r2, #0
 8004212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004214:	4b0c      	ldr	r3, [pc, #48]	@ (8004248 <MX_USART2_UART_Init+0x4c>)
 8004216:	2200      	movs	r2, #0
 8004218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800421a:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <MX_USART2_UART_Init+0x4c>)
 800421c:	2200      	movs	r2, #0
 800421e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004220:	4b09      	ldr	r3, [pc, #36]	@ (8004248 <MX_USART2_UART_Init+0x4c>)
 8004222:	220c      	movs	r2, #12
 8004224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004226:	4b08      	ldr	r3, [pc, #32]	@ (8004248 <MX_USART2_UART_Init+0x4c>)
 8004228:	2200      	movs	r2, #0
 800422a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800422c:	4b06      	ldr	r3, [pc, #24]	@ (8004248 <MX_USART2_UART_Init+0x4c>)
 800422e:	2200      	movs	r2, #0
 8004230:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8004232:	4805      	ldr	r0, [pc, #20]	@ (8004248 <MX_USART2_UART_Init+0x4c>)
 8004234:	f002 fe8c 	bl	8006f50 <HAL_HalfDuplex_Init>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800423e:	f7fd fbe7 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	200003a8 	.word	0x200003a8
 800424c:	40004400 	.word	0x40004400

08004250 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	@ 0x28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004258:	f107 0314 	add.w	r3, r7, #20
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	605a      	str	r2, [r3, #4]
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	60da      	str	r2, [r3, #12]
 8004266:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1d      	ldr	r2, [pc, #116]	@ (80042e4 <HAL_UART_MspInit+0x94>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d133      	bne.n	80042da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	4b1c      	ldr	r3, [pc, #112]	@ (80042e8 <HAL_UART_MspInit+0x98>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	4a1b      	ldr	r2, [pc, #108]	@ (80042e8 <HAL_UART_MspInit+0x98>)
 800427c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004280:	6413      	str	r3, [r2, #64]	@ 0x40
 8004282:	4b19      	ldr	r3, [pc, #100]	@ (80042e8 <HAL_UART_MspInit+0x98>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	4b15      	ldr	r3, [pc, #84]	@ (80042e8 <HAL_UART_MspInit+0x98>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004296:	4a14      	ldr	r2, [pc, #80]	@ (80042e8 <HAL_UART_MspInit+0x98>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6313      	str	r3, [r2, #48]	@ 0x30
 800429e:	4b12      	ldr	r3, [pc, #72]	@ (80042e8 <HAL_UART_MspInit+0x98>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042aa:	2304      	movs	r3, #4
 80042ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042ae:	2312      	movs	r3, #18
 80042b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b6:	2303      	movs	r3, #3
 80042b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80042ba:	2307      	movs	r3, #7
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042be:	f107 0314 	add.w	r3, r7, #20
 80042c2:	4619      	mov	r1, r3
 80042c4:	4809      	ldr	r0, [pc, #36]	@ (80042ec <HAL_UART_MspInit+0x9c>)
 80042c6:	f000 faa1 	bl	800480c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2100      	movs	r1, #0
 80042ce:	2026      	movs	r0, #38	@ 0x26
 80042d0:	f000 f9b7 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80042d4:	2026      	movs	r0, #38	@ 0x26
 80042d6:	f000 f9d0 	bl	800467a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80042da:	bf00      	nop
 80042dc:	3728      	adds	r7, #40	@ 0x28
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40004400 	.word	0x40004400
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40020000 	.word	0x40020000

080042f0 <i_abs>:
	}
	return x;
}

int i_abs(int x)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
    return x < 0 ? -x : x;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bfb8      	it	lt
 80042fe:	425b      	neglt	r3, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800430c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004344 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004310:	480d      	ldr	r0, [pc, #52]	@ (8004348 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004312:	490e      	ldr	r1, [pc, #56]	@ (800434c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004314:	4a0e      	ldr	r2, [pc, #56]	@ (8004350 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004318:	e002      	b.n	8004320 <LoopCopyDataInit>

0800431a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800431a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800431c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800431e:	3304      	adds	r3, #4

08004320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004324:	d3f9      	bcc.n	800431a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004326:	4a0b      	ldr	r2, [pc, #44]	@ (8004354 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004328:	4c0b      	ldr	r4, [pc, #44]	@ (8004358 <LoopFillZerobss+0x26>)
  movs r3, #0
 800432a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800432c:	e001      	b.n	8004332 <LoopFillZerobss>

0800432e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800432e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004330:	3204      	adds	r2, #4

08004332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004334:	d3fb      	bcc.n	800432e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004336:	f7ff fc1d 	bl	8003b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800433a:	f003 fe97 	bl	800806c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800433e:	f7fc fe73 	bl	8001028 <main>
  bx  lr    
 8004342:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004344:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800434c:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8004350:	080081a0 	.word	0x080081a0
  ldr r2, =_sbss
 8004354:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8004358:	200003f0 	.word	0x200003f0

0800435c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800435c:	e7fe      	b.n	800435c <ADC_IRQHandler>
	...

08004360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004364:	4b0e      	ldr	r3, [pc, #56]	@ (80043a0 <HAL_Init+0x40>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a0d      	ldr	r2, [pc, #52]	@ (80043a0 <HAL_Init+0x40>)
 800436a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800436e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004370:	4b0b      	ldr	r3, [pc, #44]	@ (80043a0 <HAL_Init+0x40>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a0a      	ldr	r2, [pc, #40]	@ (80043a0 <HAL_Init+0x40>)
 8004376:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800437a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800437c:	4b08      	ldr	r3, [pc, #32]	@ (80043a0 <HAL_Init+0x40>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a07      	ldr	r2, [pc, #28]	@ (80043a0 <HAL_Init+0x40>)
 8004382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004388:	2003      	movs	r0, #3
 800438a:	f000 f94f 	bl	800462c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800438e:	200f      	movs	r0, #15
 8004390:	f000 f808 	bl	80043a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004394:	f7ff fb82 	bl	8003a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40023c00 	.word	0x40023c00

080043a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043ac:	4b12      	ldr	r3, [pc, #72]	@ (80043f8 <HAL_InitTick+0x54>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <HAL_InitTick+0x58>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f967 	bl	8004696 <HAL_SYSTICK_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e00e      	b.n	80043f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b0f      	cmp	r3, #15
 80043d6:	d80a      	bhi.n	80043ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043d8:	2200      	movs	r2, #0
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	f04f 30ff 	mov.w	r0, #4294967295
 80043e0:	f000 f92f 	bl	8004642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043e4:	4a06      	ldr	r2, [pc, #24]	@ (8004400 <HAL_InitTick+0x5c>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e000      	b.n	80043f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	200000a0 	.word	0x200000a0
 80043fc:	200000a8 	.word	0x200000a8
 8004400:	200000a4 	.word	0x200000a4

08004404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004408:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <HAL_IncTick+0x20>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_IncTick+0x24>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4413      	add	r3, r2
 8004414:	4a04      	ldr	r2, [pc, #16]	@ (8004428 <HAL_IncTick+0x24>)
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	200000a8 	.word	0x200000a8
 8004428:	200003ec 	.word	0x200003ec

0800442c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return uwTick;
 8004430:	4b03      	ldr	r3, [pc, #12]	@ (8004440 <HAL_GetTick+0x14>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	200003ec 	.word	0x200003ec

08004444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800444c:	f7ff ffee 	bl	800442c <HAL_GetTick>
 8004450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d005      	beq.n	800446a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800445e:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <HAL_Delay+0x44>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800446a:	bf00      	nop
 800446c:	f7ff ffde 	bl	800442c <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	429a      	cmp	r2, r3
 800447a:	d8f7      	bhi.n	800446c <HAL_Delay+0x28>
  {
  }
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200000a8 	.word	0x200000a8

0800448c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800449c:	4b0c      	ldr	r3, [pc, #48]	@ (80044d0 <__NVIC_SetPriorityGrouping+0x44>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044a8:	4013      	ands	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044be:	4a04      	ldr	r2, [pc, #16]	@ (80044d0 <__NVIC_SetPriorityGrouping+0x44>)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	60d3      	str	r3, [r2, #12]
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d8:	4b04      	ldr	r3, [pc, #16]	@ (80044ec <__NVIC_GetPriorityGrouping+0x18>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	f003 0307 	and.w	r3, r3, #7
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	db0b      	blt.n	800451a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	f003 021f 	and.w	r2, r3, #31
 8004508:	4907      	ldr	r1, [pc, #28]	@ (8004528 <__NVIC_EnableIRQ+0x38>)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2001      	movs	r0, #1
 8004512:	fa00 f202 	lsl.w	r2, r0, r2
 8004516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	e000e100 	.word	0xe000e100

0800452c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453c:	2b00      	cmp	r3, #0
 800453e:	db0a      	blt.n	8004556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	490c      	ldr	r1, [pc, #48]	@ (8004578 <__NVIC_SetPriority+0x4c>)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	440b      	add	r3, r1
 8004550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004554:	e00a      	b.n	800456c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4908      	ldr	r1, [pc, #32]	@ (800457c <__NVIC_SetPriority+0x50>)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3b04      	subs	r3, #4
 8004564:	0112      	lsls	r2, r2, #4
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	440b      	add	r3, r1
 800456a:	761a      	strb	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	@ 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f1c3 0307 	rsb	r3, r3, #7
 800459a:	2b04      	cmp	r3, #4
 800459c:	bf28      	it	cs
 800459e:	2304      	movcs	r3, #4
 80045a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d902      	bls.n	80045b0 <NVIC_EncodePriority+0x30>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3b03      	subs	r3, #3
 80045ae:	e000      	b.n	80045b2 <NVIC_EncodePriority+0x32>
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	401a      	ands	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	fa01 f303 	lsl.w	r3, r1, r3
 80045d2:	43d9      	mvns	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	4313      	orrs	r3, r2
         );
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	@ 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045f8:	d301      	bcc.n	80045fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045fa:	2301      	movs	r3, #1
 80045fc:	e00f      	b.n	800461e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004628 <SysTick_Config+0x40>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3b01      	subs	r3, #1
 8004604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004606:	210f      	movs	r1, #15
 8004608:	f04f 30ff 	mov.w	r0, #4294967295
 800460c:	f7ff ff8e 	bl	800452c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004610:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <SysTick_Config+0x40>)
 8004612:	2200      	movs	r2, #0
 8004614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004616:	4b04      	ldr	r3, [pc, #16]	@ (8004628 <SysTick_Config+0x40>)
 8004618:	2207      	movs	r2, #7
 800461a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	e000e010 	.word	0xe000e010

0800462c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff ff29 	bl	800448c <__NVIC_SetPriorityGrouping>
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	4603      	mov	r3, r0
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004654:	f7ff ff3e 	bl	80044d4 <__NVIC_GetPriorityGrouping>
 8004658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	6978      	ldr	r0, [r7, #20]
 8004660:	f7ff ff8e 	bl	8004580 <NVIC_EncodePriority>
 8004664:	4602      	mov	r2, r0
 8004666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800466a:	4611      	mov	r1, r2
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff ff5d 	bl	800452c <__NVIC_SetPriority>
}
 8004672:	bf00      	nop
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	4603      	mov	r3, r0
 8004682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ff31 	bl	80044f0 <__NVIC_EnableIRQ>
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff ffa2 	bl	80045e8 <SysTick_Config>
 80046a4:	4603      	mov	r3, r0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e00e      	b.n	80046de <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	795b      	ldrb	r3, [r3, #5]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d105      	bne.n	80046d6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7fc fbfb 	bl	8000ecc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046f4:	f7ff fe9a 	bl	800442c <HAL_GetTick>
 80046f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d008      	beq.n	8004718 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2280      	movs	r2, #128	@ 0x80
 800470a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e052      	b.n	80047be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0216 	bic.w	r2, r2, #22
 8004726:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004736:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	d103      	bne.n	8004748 <HAL_DMA_Abort+0x62>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0208 	bic.w	r2, r2, #8
 8004756:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0201 	bic.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004768:	e013      	b.n	8004792 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800476a:	f7ff fe5f 	bl	800442c <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b05      	cmp	r3, #5
 8004776:	d90c      	bls.n	8004792 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2203      	movs	r2, #3
 8004782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e015      	b.n	80047be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e4      	bne.n	800476a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a4:	223f      	movs	r2, #63	@ 0x3f
 80047a6:	409a      	lsls	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d004      	beq.n	80047e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2280      	movs	r2, #128	@ 0x80
 80047de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e00c      	b.n	80047fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2205      	movs	r2, #5
 80047e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0201 	bic.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800480c:	b480      	push	{r7}
 800480e:	b089      	sub	sp, #36	@ 0x24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800481a:	2300      	movs	r3, #0
 800481c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800481e:	2300      	movs	r3, #0
 8004820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	e159      	b.n	8004adc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004828:	2201      	movs	r2, #1
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	429a      	cmp	r2, r3
 8004842:	f040 8148 	bne.w	8004ad6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b01      	cmp	r3, #1
 8004850:	d005      	beq.n	800485e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800485a:	2b02      	cmp	r3, #2
 800485c:	d130      	bne.n	80048c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	2203      	movs	r2, #3
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43db      	mvns	r3, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4313      	orrs	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004894:	2201      	movs	r2, #1
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 0201 	and.w	r2, r3, #1
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d017      	beq.n	80048fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	2203      	movs	r2, #3
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	43db      	mvns	r3, r3
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	4013      	ands	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d123      	bne.n	8004950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	08da      	lsrs	r2, r3, #3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3208      	adds	r2, #8
 8004910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	220f      	movs	r2, #15
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	08da      	lsrs	r2, r3, #3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3208      	adds	r2, #8
 800494a:	69b9      	ldr	r1, [r7, #24]
 800494c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	2203      	movs	r2, #3
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	43db      	mvns	r3, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 0203 	and.w	r2, r3, #3
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 80a2 	beq.w	8004ad6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	4b57      	ldr	r3, [pc, #348]	@ (8004af4 <HAL_GPIO_Init+0x2e8>)
 8004998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499a:	4a56      	ldr	r2, [pc, #344]	@ (8004af4 <HAL_GPIO_Init+0x2e8>)
 800499c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80049a2:	4b54      	ldr	r3, [pc, #336]	@ (8004af4 <HAL_GPIO_Init+0x2e8>)
 80049a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049ae:	4a52      	ldr	r2, [pc, #328]	@ (8004af8 <HAL_GPIO_Init+0x2ec>)
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	089b      	lsrs	r3, r3, #2
 80049b4:	3302      	adds	r3, #2
 80049b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	220f      	movs	r2, #15
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a49      	ldr	r2, [pc, #292]	@ (8004afc <HAL_GPIO_Init+0x2f0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d019      	beq.n	8004a0e <HAL_GPIO_Init+0x202>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a48      	ldr	r2, [pc, #288]	@ (8004b00 <HAL_GPIO_Init+0x2f4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <HAL_GPIO_Init+0x1fe>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a47      	ldr	r2, [pc, #284]	@ (8004b04 <HAL_GPIO_Init+0x2f8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00d      	beq.n	8004a06 <HAL_GPIO_Init+0x1fa>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a46      	ldr	r2, [pc, #280]	@ (8004b08 <HAL_GPIO_Init+0x2fc>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d007      	beq.n	8004a02 <HAL_GPIO_Init+0x1f6>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a45      	ldr	r2, [pc, #276]	@ (8004b0c <HAL_GPIO_Init+0x300>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d101      	bne.n	80049fe <HAL_GPIO_Init+0x1f2>
 80049fa:	2304      	movs	r3, #4
 80049fc:	e008      	b.n	8004a10 <HAL_GPIO_Init+0x204>
 80049fe:	2307      	movs	r3, #7
 8004a00:	e006      	b.n	8004a10 <HAL_GPIO_Init+0x204>
 8004a02:	2303      	movs	r3, #3
 8004a04:	e004      	b.n	8004a10 <HAL_GPIO_Init+0x204>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e002      	b.n	8004a10 <HAL_GPIO_Init+0x204>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <HAL_GPIO_Init+0x204>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	69fa      	ldr	r2, [r7, #28]
 8004a12:	f002 0203 	and.w	r2, r2, #3
 8004a16:	0092      	lsls	r2, r2, #2
 8004a18:	4093      	lsls	r3, r2
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a20:	4935      	ldr	r1, [pc, #212]	@ (8004af8 <HAL_GPIO_Init+0x2ec>)
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	089b      	lsrs	r3, r3, #2
 8004a26:	3302      	adds	r3, #2
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a2e:	4b38      	ldr	r3, [pc, #224]	@ (8004b10 <HAL_GPIO_Init+0x304>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	43db      	mvns	r3, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a52:	4a2f      	ldr	r2, [pc, #188]	@ (8004b10 <HAL_GPIO_Init+0x304>)
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a58:	4b2d      	ldr	r3, [pc, #180]	@ (8004b10 <HAL_GPIO_Init+0x304>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	4013      	ands	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a7c:	4a24      	ldr	r2, [pc, #144]	@ (8004b10 <HAL_GPIO_Init+0x304>)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a82:	4b23      	ldr	r3, [pc, #140]	@ (8004b10 <HAL_GPIO_Init+0x304>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b10 <HAL_GPIO_Init+0x304>)
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004aac:	4b18      	ldr	r3, [pc, #96]	@ (8004b10 <HAL_GPIO_Init+0x304>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8004b10 <HAL_GPIO_Init+0x304>)
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	61fb      	str	r3, [r7, #28]
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	2b0f      	cmp	r3, #15
 8004ae0:	f67f aea2 	bls.w	8004828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	3724      	adds	r7, #36	@ 0x24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
 8004af8:	40013800 	.word	0x40013800
 8004afc:	40020000 	.word	0x40020000
 8004b00:	40020400 	.word	0x40020400
 8004b04:	40020800 	.word	0x40020800
 8004b08:	40020c00 	.word	0x40020c00
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40013c00 	.word	0x40013c00

08004b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	807b      	strh	r3, [r7, #2]
 8004b20:	4613      	mov	r3, r2
 8004b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b24:	787b      	ldrb	r3, [r7, #1]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b2a:	887a      	ldrh	r2, [r7, #2]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b30:	e003      	b.n	8004b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b32:	887b      	ldrh	r3, [r7, #2]
 8004b34:	041a      	lsls	r2, r3, #16
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	619a      	str	r2, [r3, #24]
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e267      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d075      	beq.n	8004c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b66:	4b88      	ldr	r3, [pc, #544]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d00c      	beq.n	8004b8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b72:	4b85      	ldr	r3, [pc, #532]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d112      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b7e:	4b82      	ldr	r3, [pc, #520]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b8a:	d10b      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d05b      	beq.n	8004c50 <HAL_RCC_OscConfig+0x108>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d157      	bne.n	8004c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e242      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bac:	d106      	bne.n	8004bbc <HAL_RCC_OscConfig+0x74>
 8004bae:	4b76      	ldr	r3, [pc, #472]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a75      	ldr	r2, [pc, #468]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e01d      	b.n	8004bf8 <HAL_RCC_OscConfig+0xb0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x98>
 8004bc6:	4b70      	ldr	r3, [pc, #448]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a6f      	ldr	r2, [pc, #444]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a6c      	ldr	r2, [pc, #432]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e00b      	b.n	8004bf8 <HAL_RCC_OscConfig+0xb0>
 8004be0:	4b69      	ldr	r3, [pc, #420]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a68      	ldr	r2, [pc, #416]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	4b66      	ldr	r3, [pc, #408]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a65      	ldr	r2, [pc, #404]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d013      	beq.n	8004c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c00:	f7ff fc14 	bl	800442c <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c08:	f7ff fc10 	bl	800442c <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b64      	cmp	r3, #100	@ 0x64
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e207      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0xc0>
 8004c26:	e014      	b.n	8004c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c28:	f7ff fc00 	bl	800442c <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c30:	f7ff fbfc 	bl	800442c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	@ 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e1f3      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c42:	4b51      	ldr	r3, [pc, #324]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0xe8>
 8004c4e:	e000      	b.n	8004c52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d063      	beq.n	8004d26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 030c 	and.w	r3, r3, #12
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00b      	beq.n	8004c82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c6a:	4b47      	ldr	r3, [pc, #284]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d11c      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c76:	4b44      	ldr	r3, [pc, #272]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d116      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c82:	4b41      	ldr	r3, [pc, #260]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <HAL_RCC_OscConfig+0x152>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d001      	beq.n	8004c9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e1c7      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4937      	ldr	r1, [pc, #220]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cae:	e03a      	b.n	8004d26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d020      	beq.n	8004cfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cb8:	4b34      	ldr	r3, [pc, #208]	@ (8004d8c <HAL_RCC_OscConfig+0x244>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbe:	f7ff fbb5 	bl	800442c <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cc6:	f7ff fbb1 	bl	800442c <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e1a8      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce4:	4b28      	ldr	r3, [pc, #160]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	4925      	ldr	r1, [pc, #148]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	600b      	str	r3, [r1, #0]
 8004cf8:	e015      	b.n	8004d26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cfa:	4b24      	ldr	r3, [pc, #144]	@ (8004d8c <HAL_RCC_OscConfig+0x244>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7ff fb94 	bl	800442c <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d08:	f7ff fb90 	bl	800442c <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e187      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f0      	bne.n	8004d08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d036      	beq.n	8004da0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d016      	beq.n	8004d68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d3a:	4b15      	ldr	r3, [pc, #84]	@ (8004d90 <HAL_RCC_OscConfig+0x248>)
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7ff fb74 	bl	800442c <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d48:	f7ff fb70 	bl	800442c <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e167      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <HAL_RCC_OscConfig+0x240>)
 8004d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0x200>
 8004d66:	e01b      	b.n	8004da0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d68:	4b09      	ldr	r3, [pc, #36]	@ (8004d90 <HAL_RCC_OscConfig+0x248>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6e:	f7ff fb5d 	bl	800442c <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d74:	e00e      	b.n	8004d94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d76:	f7ff fb59 	bl	800442c <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d907      	bls.n	8004d94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e150      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	42470000 	.word	0x42470000
 8004d90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d94:	4b88      	ldr	r3, [pc, #544]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1ea      	bne.n	8004d76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8097 	beq.w	8004edc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dae:	2300      	movs	r3, #0
 8004db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004db2:	4b81      	ldr	r3, [pc, #516]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10f      	bne.n	8004dde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]
 8004dc2:	4b7d      	ldr	r3, [pc, #500]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	4a7c      	ldr	r2, [pc, #496]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dce:	4b7a      	ldr	r3, [pc, #488]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	60bb      	str	r3, [r7, #8]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dde:	4b77      	ldr	r3, [pc, #476]	@ (8004fbc <HAL_RCC_OscConfig+0x474>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d118      	bne.n	8004e1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dea:	4b74      	ldr	r3, [pc, #464]	@ (8004fbc <HAL_RCC_OscConfig+0x474>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a73      	ldr	r2, [pc, #460]	@ (8004fbc <HAL_RCC_OscConfig+0x474>)
 8004df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df6:	f7ff fb19 	bl	800442c <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfe:	f7ff fb15 	bl	800442c <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e10c      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e10:	4b6a      	ldr	r3, [pc, #424]	@ (8004fbc <HAL_RCC_OscConfig+0x474>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0f0      	beq.n	8004dfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d106      	bne.n	8004e32 <HAL_RCC_OscConfig+0x2ea>
 8004e24:	4b64      	ldr	r3, [pc, #400]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e28:	4a63      	ldr	r2, [pc, #396]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e30:	e01c      	b.n	8004e6c <HAL_RCC_OscConfig+0x324>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCC_OscConfig+0x30c>
 8004e3a:	4b5f      	ldr	r3, [pc, #380]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3e:	4a5e      	ldr	r2, [pc, #376]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e40:	f043 0304 	orr.w	r3, r3, #4
 8004e44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e46:	4b5c      	ldr	r3, [pc, #368]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4a:	4a5b      	ldr	r2, [pc, #364]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e52:	e00b      	b.n	8004e6c <HAL_RCC_OscConfig+0x324>
 8004e54:	4b58      	ldr	r3, [pc, #352]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e58:	4a57      	ldr	r2, [pc, #348]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e5a:	f023 0301 	bic.w	r3, r3, #1
 8004e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e60:	4b55      	ldr	r3, [pc, #340]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e64:	4a54      	ldr	r2, [pc, #336]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e66:	f023 0304 	bic.w	r3, r3, #4
 8004e6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d015      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e74:	f7ff fada 	bl	800442c <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7a:	e00a      	b.n	8004e92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e7c:	f7ff fad6 	bl	800442c <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e0cb      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e92:	4b49      	ldr	r3, [pc, #292]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0ee      	beq.n	8004e7c <HAL_RCC_OscConfig+0x334>
 8004e9e:	e014      	b.n	8004eca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea0:	f7ff fac4 	bl	800442c <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea6:	e00a      	b.n	8004ebe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ea8:	f7ff fac0 	bl	800442c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e0b5      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1ee      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eca:	7dfb      	ldrb	r3, [r7, #23]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d105      	bne.n	8004edc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed0:	4b39      	ldr	r3, [pc, #228]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed4:	4a38      	ldr	r2, [pc, #224]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004ed6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 80a1 	beq.w	8005028 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ee6:	4b34      	ldr	r3, [pc, #208]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 030c 	and.w	r3, r3, #12
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d05c      	beq.n	8004fac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d141      	bne.n	8004f7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efa:	4b31      	ldr	r3, [pc, #196]	@ (8004fc0 <HAL_RCC_OscConfig+0x478>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f00:	f7ff fa94 	bl	800442c <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f08:	f7ff fa90 	bl	800442c <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e087      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1a:	4b27      	ldr	r3, [pc, #156]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69da      	ldr	r2, [r3, #28]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	019b      	lsls	r3, r3, #6
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	041b      	lsls	r3, r3, #16
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f48:	061b      	lsls	r3, r3, #24
 8004f4a:	491b      	ldr	r1, [pc, #108]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f50:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc0 <HAL_RCC_OscConfig+0x478>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f56:	f7ff fa69 	bl	800442c <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f5e:	f7ff fa65 	bl	800442c <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e05c      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f70:	4b11      	ldr	r3, [pc, #68]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCC_OscConfig+0x416>
 8004f7c:	e054      	b.n	8005028 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7e:	4b10      	ldr	r3, [pc, #64]	@ (8004fc0 <HAL_RCC_OscConfig+0x478>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f84:	f7ff fa52 	bl	800442c <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7ff fa4e 	bl	800442c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e045      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f9e:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <HAL_RCC_OscConfig+0x470>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f0      	bne.n	8004f8c <HAL_RCC_OscConfig+0x444>
 8004faa:	e03d      	b.n	8005028 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d107      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e038      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	40007000 	.word	0x40007000
 8004fc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005034 <HAL_RCC_OscConfig+0x4ec>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d028      	beq.n	8005024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d121      	bne.n	8005024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d11a      	bne.n	8005024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ffa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d111      	bne.n	8005024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500a:	085b      	lsrs	r3, r3, #1
 800500c:	3b01      	subs	r3, #1
 800500e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005010:	429a      	cmp	r2, r3
 8005012:	d107      	bne.n	8005024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005020:	429a      	cmp	r2, r3
 8005022:	d001      	beq.n	8005028 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40023800 	.word	0x40023800

08005038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0cc      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800504c:	4b68      	ldr	r3, [pc, #416]	@ (80051f0 <HAL_RCC_ClockConfig+0x1b8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d90c      	bls.n	8005074 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505a:	4b65      	ldr	r3, [pc, #404]	@ (80051f0 <HAL_RCC_ClockConfig+0x1b8>)
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005062:	4b63      	ldr	r3, [pc, #396]	@ (80051f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d001      	beq.n	8005074 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0b8      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d020      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800508c:	4b59      	ldr	r3, [pc, #356]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	4a58      	ldr	r2, [pc, #352]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005096:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050a4:	4b53      	ldr	r3, [pc, #332]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4a52      	ldr	r2, [pc, #328]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b0:	4b50      	ldr	r3, [pc, #320]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	494d      	ldr	r1, [pc, #308]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d044      	beq.n	8005158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d107      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d6:	4b47      	ldr	r3, [pc, #284]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d119      	bne.n	8005116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e07f      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d003      	beq.n	80050f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050f2:	2b03      	cmp	r3, #3
 80050f4:	d107      	bne.n	8005106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f6:	4b3f      	ldr	r3, [pc, #252]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e06f      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005106:	4b3b      	ldr	r3, [pc, #236]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e067      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005116:	4b37      	ldr	r3, [pc, #220]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f023 0203 	bic.w	r2, r3, #3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	4934      	ldr	r1, [pc, #208]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	4313      	orrs	r3, r2
 8005126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005128:	f7ff f980 	bl	800442c <HAL_GetTick>
 800512c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512e:	e00a      	b.n	8005146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005130:	f7ff f97c 	bl	800442c <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800513e:	4293      	cmp	r3, r2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e04f      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005146:	4b2b      	ldr	r3, [pc, #172]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 020c 	and.w	r2, r3, #12
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	429a      	cmp	r2, r3
 8005156:	d1eb      	bne.n	8005130 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005158:	4b25      	ldr	r3, [pc, #148]	@ (80051f0 <HAL_RCC_ClockConfig+0x1b8>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d20c      	bcs.n	8005180 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005166:	4b22      	ldr	r3, [pc, #136]	@ (80051f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800516e:	4b20      	ldr	r3, [pc, #128]	@ (80051f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d001      	beq.n	8005180 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e032      	b.n	80051e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800518c:	4b19      	ldr	r3, [pc, #100]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	4916      	ldr	r1, [pc, #88]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	4313      	orrs	r3, r2
 800519c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051aa:	4b12      	ldr	r3, [pc, #72]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	490e      	ldr	r1, [pc, #56]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051be:	f000 f821 	bl	8005204 <HAL_RCC_GetSysClockFreq>
 80051c2:	4602      	mov	r2, r0
 80051c4:	4b0b      	ldr	r3, [pc, #44]	@ (80051f4 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	091b      	lsrs	r3, r3, #4
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	490a      	ldr	r1, [pc, #40]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c0>)
 80051d0:	5ccb      	ldrb	r3, [r1, r3]
 80051d2:	fa22 f303 	lsr.w	r3, r2, r3
 80051d6:	4a09      	ldr	r2, [pc, #36]	@ (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 80051d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051da:	4b09      	ldr	r3, [pc, #36]	@ (8005200 <HAL_RCC_ClockConfig+0x1c8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff f8e0 	bl	80043a4 <HAL_InitTick>

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40023c00 	.word	0x40023c00
 80051f4:	40023800 	.word	0x40023800
 80051f8:	08008178 	.word	0x08008178
 80051fc:	200000a0 	.word	0x200000a0
 8005200:	200000a4 	.word	0x200000a4

08005204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005208:	b094      	sub	sp, #80	@ 0x50
 800520a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005210:	2300      	movs	r3, #0
 8005212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005214:	2300      	movs	r3, #0
 8005216:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800521c:	4b79      	ldr	r3, [pc, #484]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b08      	cmp	r3, #8
 8005226:	d00d      	beq.n	8005244 <HAL_RCC_GetSysClockFreq+0x40>
 8005228:	2b08      	cmp	r3, #8
 800522a:	f200 80e1 	bhi.w	80053f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_RCC_GetSysClockFreq+0x34>
 8005232:	2b04      	cmp	r3, #4
 8005234:	d003      	beq.n	800523e <HAL_RCC_GetSysClockFreq+0x3a>
 8005236:	e0db      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b73      	ldr	r3, [pc, #460]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x204>)
 800523a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800523c:	e0db      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800523e:	4b73      	ldr	r3, [pc, #460]	@ (800540c <HAL_RCC_GetSysClockFreq+0x208>)
 8005240:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005242:	e0d8      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005244:	4b6f      	ldr	r3, [pc, #444]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800524c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800524e:	4b6d      	ldr	r3, [pc, #436]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d063      	beq.n	8005322 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800525a:	4b6a      	ldr	r3, [pc, #424]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	099b      	lsrs	r3, r3, #6
 8005260:	2200      	movs	r2, #0
 8005262:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005264:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526c:	633b      	str	r3, [r7, #48]	@ 0x30
 800526e:	2300      	movs	r3, #0
 8005270:	637b      	str	r3, [r7, #52]	@ 0x34
 8005272:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005276:	4622      	mov	r2, r4
 8005278:	462b      	mov	r3, r5
 800527a:	f04f 0000 	mov.w	r0, #0
 800527e:	f04f 0100 	mov.w	r1, #0
 8005282:	0159      	lsls	r1, r3, #5
 8005284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005288:	0150      	lsls	r0, r2, #5
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4621      	mov	r1, r4
 8005290:	1a51      	subs	r1, r2, r1
 8005292:	6139      	str	r1, [r7, #16]
 8005294:	4629      	mov	r1, r5
 8005296:	eb63 0301 	sbc.w	r3, r3, r1
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052a8:	4659      	mov	r1, fp
 80052aa:	018b      	lsls	r3, r1, #6
 80052ac:	4651      	mov	r1, sl
 80052ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052b2:	4651      	mov	r1, sl
 80052b4:	018a      	lsls	r2, r1, #6
 80052b6:	4651      	mov	r1, sl
 80052b8:	ebb2 0801 	subs.w	r8, r2, r1
 80052bc:	4659      	mov	r1, fp
 80052be:	eb63 0901 	sbc.w	r9, r3, r1
 80052c2:	f04f 0200 	mov.w	r2, #0
 80052c6:	f04f 0300 	mov.w	r3, #0
 80052ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052d6:	4690      	mov	r8, r2
 80052d8:	4699      	mov	r9, r3
 80052da:	4623      	mov	r3, r4
 80052dc:	eb18 0303 	adds.w	r3, r8, r3
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	462b      	mov	r3, r5
 80052e4:	eb49 0303 	adc.w	r3, r9, r3
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052f6:	4629      	mov	r1, r5
 80052f8:	024b      	lsls	r3, r1, #9
 80052fa:	4621      	mov	r1, r4
 80052fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005300:	4621      	mov	r1, r4
 8005302:	024a      	lsls	r2, r1, #9
 8005304:	4610      	mov	r0, r2
 8005306:	4619      	mov	r1, r3
 8005308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800530a:	2200      	movs	r2, #0
 800530c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800530e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005310:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005314:	f7fb fc4e 	bl	8000bb4 <__aeabi_uldivmod>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4613      	mov	r3, r2
 800531e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005320:	e058      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005322:	4b38      	ldr	r3, [pc, #224]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	099b      	lsrs	r3, r3, #6
 8005328:	2200      	movs	r2, #0
 800532a:	4618      	mov	r0, r3
 800532c:	4611      	mov	r1, r2
 800532e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005332:	623b      	str	r3, [r7, #32]
 8005334:	2300      	movs	r3, #0
 8005336:	627b      	str	r3, [r7, #36]	@ 0x24
 8005338:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800533c:	4642      	mov	r2, r8
 800533e:	464b      	mov	r3, r9
 8005340:	f04f 0000 	mov.w	r0, #0
 8005344:	f04f 0100 	mov.w	r1, #0
 8005348:	0159      	lsls	r1, r3, #5
 800534a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800534e:	0150      	lsls	r0, r2, #5
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4641      	mov	r1, r8
 8005356:	ebb2 0a01 	subs.w	sl, r2, r1
 800535a:	4649      	mov	r1, r9
 800535c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800536c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005370:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005374:	ebb2 040a 	subs.w	r4, r2, sl
 8005378:	eb63 050b 	sbc.w	r5, r3, fp
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	00eb      	lsls	r3, r5, #3
 8005386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800538a:	00e2      	lsls	r2, r4, #3
 800538c:	4614      	mov	r4, r2
 800538e:	461d      	mov	r5, r3
 8005390:	4643      	mov	r3, r8
 8005392:	18e3      	adds	r3, r4, r3
 8005394:	603b      	str	r3, [r7, #0]
 8005396:	464b      	mov	r3, r9
 8005398:	eb45 0303 	adc.w	r3, r5, r3
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053aa:	4629      	mov	r1, r5
 80053ac:	028b      	lsls	r3, r1, #10
 80053ae:	4621      	mov	r1, r4
 80053b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053b4:	4621      	mov	r1, r4
 80053b6:	028a      	lsls	r2, r1, #10
 80053b8:	4610      	mov	r0, r2
 80053ba:	4619      	mov	r1, r3
 80053bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053be:	2200      	movs	r2, #0
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	61fa      	str	r2, [r7, #28]
 80053c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053c8:	f7fb fbf4 	bl	8000bb4 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4613      	mov	r3, r2
 80053d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x200>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	0c1b      	lsrs	r3, r3, #16
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	3301      	adds	r3, #1
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80053e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053ee:	e002      	b.n	80053f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053f0:	4b05      	ldr	r3, [pc, #20]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x204>)
 80053f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3750      	adds	r7, #80	@ 0x50
 80053fc:	46bd      	mov	sp, r7
 80053fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005402:	bf00      	nop
 8005404:	40023800 	.word	0x40023800
 8005408:	00f42400 	.word	0x00f42400
 800540c:	007a1200 	.word	0x007a1200

08005410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005414:	4b03      	ldr	r3, [pc, #12]	@ (8005424 <HAL_RCC_GetHCLKFreq+0x14>)
 8005416:	681b      	ldr	r3, [r3, #0]
}
 8005418:	4618      	mov	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	200000a0 	.word	0x200000a0

08005428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800542c:	f7ff fff0 	bl	8005410 <HAL_RCC_GetHCLKFreq>
 8005430:	4602      	mov	r2, r0
 8005432:	4b05      	ldr	r3, [pc, #20]	@ (8005448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	0a9b      	lsrs	r3, r3, #10
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	4903      	ldr	r1, [pc, #12]	@ (800544c <HAL_RCC_GetPCLK1Freq+0x24>)
 800543e:	5ccb      	ldrb	r3, [r1, r3]
 8005440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005444:	4618      	mov	r0, r3
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40023800 	.word	0x40023800
 800544c:	08008188 	.word	0x08008188

08005450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005454:	f7ff ffdc 	bl	8005410 <HAL_RCC_GetHCLKFreq>
 8005458:	4602      	mov	r2, r0
 800545a:	4b05      	ldr	r3, [pc, #20]	@ (8005470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	0b5b      	lsrs	r3, r3, #13
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	4903      	ldr	r1, [pc, #12]	@ (8005474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005466:	5ccb      	ldrb	r3, [r1, r3]
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40023800 	.word	0x40023800
 8005474:	08008188 	.word	0x08008188

08005478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e07b      	b.n	8005582 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	2b00      	cmp	r3, #0
 8005490:	d108      	bne.n	80054a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800549a:	d009      	beq.n	80054b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	61da      	str	r2, [r3, #28]
 80054a2:	e005      	b.n	80054b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fe fa9e 	bl	8003a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005534:	ea42 0103 	orr.w	r1, r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	0c1b      	lsrs	r3, r3, #16
 800554e:	f003 0104 	and.w	r1, r3, #4
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005556:	f003 0210 	and.w	r2, r3, #16
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b088      	sub	sp, #32
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	603b      	str	r3, [r7, #0]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_SPI_Transmit+0x22>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e126      	b.n	80057fa <HAL_SPI_Transmit+0x270>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055b4:	f7fe ff3a 	bl	800442c <HAL_GetTick>
 80055b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d002      	beq.n	80055d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
 80055cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055ce:	e10b      	b.n	80057e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_SPI_Transmit+0x52>
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055e0:	e102      	b.n	80057e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2203      	movs	r2, #3
 80055e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	88fa      	ldrh	r2, [r7, #6]
 8005600:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005628:	d10f      	bne.n	800564a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005638:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005648:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b40      	cmp	r3, #64	@ 0x40
 8005656:	d007      	beq.n	8005668 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005670:	d14b      	bne.n	800570a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_SPI_Transmit+0xf6>
 800567a:	8afb      	ldrh	r3, [r7, #22]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d13e      	bne.n	80056fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005684:	881a      	ldrh	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005690:	1c9a      	adds	r2, r3, #2
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056a4:	e02b      	b.n	80056fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d112      	bne.n	80056da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b8:	881a      	ldrh	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c4:	1c9a      	adds	r2, r3, #2
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056d8:	e011      	b.n	80056fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056da:	f7fe fea7 	bl	800442c <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d803      	bhi.n	80056f2 <HAL_SPI_Transmit+0x168>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d102      	bne.n	80056f8 <HAL_SPI_Transmit+0x16e>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056fc:	e074      	b.n	80057e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1ce      	bne.n	80056a6 <HAL_SPI_Transmit+0x11c>
 8005708:	e04c      	b.n	80057a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_SPI_Transmit+0x18e>
 8005712:	8afb      	ldrh	r3, [r7, #22]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d140      	bne.n	800579a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	330c      	adds	r3, #12
 8005722:	7812      	ldrb	r2, [r2, #0]
 8005724:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800573e:	e02c      	b.n	800579a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b02      	cmp	r3, #2
 800574c:	d113      	bne.n	8005776 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	330c      	adds	r3, #12
 8005758:	7812      	ldrb	r2, [r2, #0]
 800575a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005774:	e011      	b.n	800579a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005776:	f7fe fe59 	bl	800442c <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d803      	bhi.n	800578e <HAL_SPI_Transmit+0x204>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578c:	d102      	bne.n	8005794 <HAL_SPI_Transmit+0x20a>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d102      	bne.n	800579a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005798:	e026      	b.n	80057e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1cd      	bne.n	8005740 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	6839      	ldr	r1, [r7, #0]
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 fbcb 	bl	8005f44 <SPI_EndRxTxTransaction>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057c2:	2300      	movs	r3, #0
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e000      	b.n	80057e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80057e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80057f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b088      	sub	sp, #32
 8005806:	af02      	add	r7, sp, #8
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	603b      	str	r3, [r7, #0]
 800580e:	4613      	mov	r3, r2
 8005810:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800581e:	d112      	bne.n	8005846 <HAL_SPI_Receive+0x44>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10e      	bne.n	8005846 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2204      	movs	r2, #4
 800582c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005830:	88fa      	ldrh	r2, [r7, #6]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	4613      	mov	r3, r2
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f8f1 	bl	8005a24 <HAL_SPI_TransmitReceive>
 8005842:	4603      	mov	r3, r0
 8005844:	e0ea      	b.n	8005a1c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_SPI_Receive+0x52>
 8005850:	2302      	movs	r3, #2
 8005852:	e0e3      	b.n	8005a1c <HAL_SPI_Receive+0x21a>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800585c:	f7fe fde6 	bl	800442c <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b01      	cmp	r3, #1
 800586c:	d002      	beq.n	8005874 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800586e:	2302      	movs	r3, #2
 8005870:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005872:	e0ca      	b.n	8005a0a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_SPI_Receive+0x7e>
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005884:	e0c1      	b.n	8005a0a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2204      	movs	r2, #4
 800588a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	88fa      	ldrh	r2, [r7, #6]
 800589e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058cc:	d10f      	bne.n	80058ee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80058ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f8:	2b40      	cmp	r3, #64	@ 0x40
 80058fa:	d007      	beq.n	800590c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800590a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d162      	bne.n	80059da <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005914:	e02e      	b.n	8005974 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b01      	cmp	r3, #1
 8005922:	d115      	bne.n	8005950 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f103 020c 	add.w	r2, r3, #12
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005930:	7812      	ldrb	r2, [r2, #0]
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800594e:	e011      	b.n	8005974 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005950:	f7fe fd6c 	bl	800442c <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d803      	bhi.n	8005968 <HAL_SPI_Receive+0x166>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005966:	d102      	bne.n	800596e <HAL_SPI_Receive+0x16c>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005972:	e04a      	b.n	8005a0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1cb      	bne.n	8005916 <HAL_SPI_Receive+0x114>
 800597e:	e031      	b.n	80059e4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b01      	cmp	r3, #1
 800598c:	d113      	bne.n	80059b6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005998:	b292      	uxth	r2, r2
 800599a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a0:	1c9a      	adds	r2, r3, #2
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059b4:	e011      	b.n	80059da <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059b6:	f7fe fd39 	bl	800442c <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d803      	bhi.n	80059ce <HAL_SPI_Receive+0x1cc>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059cc:	d102      	bne.n	80059d4 <HAL_SPI_Receive+0x1d2>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059d8:	e017      	b.n	8005a0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1cd      	bne.n	8005980 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fa45 	bl	8005e78 <SPI_EndRxTransaction>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	75fb      	strb	r3, [r7, #23]
 8005a06:	e000      	b.n	8005a0a <HAL_SPI_Receive+0x208>
  }

error :
 8005a08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08c      	sub	sp, #48	@ 0x30
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a32:	2301      	movs	r3, #1
 8005a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_SPI_TransmitReceive+0x26>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e18a      	b.n	8005d60 <HAL_SPI_TransmitReceive+0x33c>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a52:	f7fe fceb 	bl	800442c <HAL_GetTick>
 8005a56:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a68:	887b      	ldrh	r3, [r7, #2]
 8005a6a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d00f      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x70>
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a7a:	d107      	bne.n	8005a8c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d103      	bne.n	8005a8c <HAL_SPI_TransmitReceive+0x68>
 8005a84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d003      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005a92:	e15b      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d005      	beq.n	8005aa6 <HAL_SPI_TransmitReceive+0x82>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_SPI_TransmitReceive+0x82>
 8005aa0:	887b      	ldrh	r3, [r7, #2]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d103      	bne.n	8005aae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005aac:	e14e      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d003      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2205      	movs	r2, #5
 8005abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	887a      	ldrh	r2, [r7, #2]
 8005ad2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	887a      	ldrh	r2, [r7, #2]
 8005ad8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	887a      	ldrh	r2, [r7, #2]
 8005ae4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	887a      	ldrh	r2, [r7, #2]
 8005aea:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b02:	2b40      	cmp	r3, #64	@ 0x40
 8005b04:	d007      	beq.n	8005b16 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b1e:	d178      	bne.n	8005c12 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_SPI_TransmitReceive+0x10a>
 8005b28:	8b7b      	ldrh	r3, [r7, #26]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d166      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b32:	881a      	ldrh	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3e:	1c9a      	adds	r2, r3, #2
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b52:	e053      	b.n	8005bfc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d11b      	bne.n	8005b9a <HAL_SPI_TransmitReceive+0x176>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d016      	beq.n	8005b9a <HAL_SPI_TransmitReceive+0x176>
 8005b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d113      	bne.n	8005b9a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b76:	881a      	ldrh	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b82:	1c9a      	adds	r2, r3, #2
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d119      	bne.n	8005bdc <HAL_SPI_TransmitReceive+0x1b8>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d014      	beq.n	8005bdc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbc:	b292      	uxth	r2, r2
 8005bbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc4:	1c9a      	adds	r2, r3, #2
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bdc:	f7fe fc26 	bl	800442c <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d807      	bhi.n	8005bfc <HAL_SPI_TransmitReceive+0x1d8>
 8005bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf2:	d003      	beq.n	8005bfc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005bfa:	e0a7      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1a6      	bne.n	8005b54 <HAL_SPI_TransmitReceive+0x130>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1a1      	bne.n	8005b54 <HAL_SPI_TransmitReceive+0x130>
 8005c10:	e07c      	b.n	8005d0c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x1fc>
 8005c1a:	8b7b      	ldrh	r3, [r7, #26]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d16b      	bne.n	8005cf8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	330c      	adds	r3, #12
 8005c2a:	7812      	ldrb	r2, [r2, #0]
 8005c2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c46:	e057      	b.n	8005cf8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d11c      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0x26c>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d017      	beq.n	8005c90 <HAL_SPI_TransmitReceive+0x26c>
 8005c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d114      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	330c      	adds	r3, #12
 8005c70:	7812      	ldrb	r2, [r2, #0]
 8005c72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d119      	bne.n	8005cd2 <HAL_SPI_TransmitReceive+0x2ae>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d014      	beq.n	8005cd2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cd2:	f7fe fbab 	bl	800442c <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d803      	bhi.n	8005cea <HAL_SPI_TransmitReceive+0x2c6>
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d102      	bne.n	8005cf0 <HAL_SPI_TransmitReceive+0x2cc>
 8005cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d103      	bne.n	8005cf8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8005cf6:	e029      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1a2      	bne.n	8005c48 <HAL_SPI_TransmitReceive+0x224>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d19d      	bne.n	8005c48 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f917 	bl	8005f44 <SPI_EndRxTxTransaction>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d006      	beq.n	8005d2a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005d28:	e010      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10b      	bne.n	8005d4a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	e000      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005d5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3730      	adds	r7, #48	@ 0x30
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	4613      	mov	r3, r2
 8005d76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d78:	f7fe fb58 	bl	800442c <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d80:	1a9b      	subs	r3, r3, r2
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	4413      	add	r3, r2
 8005d86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d88:	f7fe fb50 	bl	800442c <HAL_GetTick>
 8005d8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d8e:	4b39      	ldr	r3, [pc, #228]	@ (8005e74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	015b      	lsls	r3, r3, #5
 8005d94:	0d1b      	lsrs	r3, r3, #20
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	fb02 f303 	mul.w	r3, r2, r3
 8005d9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d9e:	e054      	b.n	8005e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da6:	d050      	beq.n	8005e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005da8:	f7fe fb40 	bl	800442c <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d902      	bls.n	8005dbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d13d      	bne.n	8005e3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005dcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dd6:	d111      	bne.n	8005dfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005de0:	d004      	beq.n	8005dec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dea:	d107      	bne.n	8005dfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e04:	d10f      	bne.n	8005e26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e017      	b.n	8005e6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4013      	ands	r3, r2
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	bf0c      	ite	eq
 8005e5a:	2301      	moveq	r3, #1
 8005e5c:	2300      	movne	r3, #0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	79fb      	ldrb	r3, [r7, #7]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d19b      	bne.n	8005da0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3720      	adds	r7, #32
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	200000a0 	.word	0x200000a0

08005e78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e8c:	d111      	bne.n	8005eb2 <SPI_EndRxTransaction+0x3a>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e96:	d004      	beq.n	8005ea2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ea0:	d107      	bne.n	8005eb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eb0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005eba:	d12a      	bne.n	8005f12 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ec4:	d012      	beq.n	8005eec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	2180      	movs	r1, #128	@ 0x80
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff ff49 	bl	8005d68 <SPI_WaitFlagStateUntilTimeout>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d02d      	beq.n	8005f38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee0:	f043 0220 	orr.w	r2, r3, #32
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e026      	b.n	8005f3a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff ff36 	bl	8005d68 <SPI_WaitFlagStateUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01a      	beq.n	8005f38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f06:	f043 0220 	orr.w	r2, r3, #32
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e013      	b.n	8005f3a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f7ff ff23 	bl	8005d68 <SPI_WaitFlagStateUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d007      	beq.n	8005f38 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2c:	f043 0220 	orr.w	r2, r3, #32
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e000      	b.n	8005f3a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f50:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc0 <SPI_EndRxTxTransaction+0x7c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a1b      	ldr	r2, [pc, #108]	@ (8005fc4 <SPI_EndRxTxTransaction+0x80>)
 8005f56:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5a:	0d5b      	lsrs	r3, r3, #21
 8005f5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005f60:	fb02 f303 	mul.w	r3, r2, r3
 8005f64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f6e:	d112      	bne.n	8005f96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2200      	movs	r2, #0
 8005f78:	2180      	movs	r1, #128	@ 0x80
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f7ff fef4 	bl	8005d68 <SPI_WaitFlagStateUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d016      	beq.n	8005fb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8a:	f043 0220 	orr.w	r2, r3, #32
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e00f      	b.n	8005fb6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fac:	2b80      	cmp	r3, #128	@ 0x80
 8005fae:	d0f2      	beq.n	8005f96 <SPI_EndRxTxTransaction+0x52>
 8005fb0:	e000      	b.n	8005fb4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005fb2:	bf00      	nop
  }

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	200000a0 	.word	0x200000a0
 8005fc4:	165e9f81 	.word	0x165e9f81

08005fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e041      	b.n	800605e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fd fee6 	bl	8003dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3304      	adds	r3, #4
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f000 fc54 	bl	80068b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b01      	cmp	r3, #1
 800607a:	d001      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e044      	b.n	800610a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0201 	orr.w	r2, r2, #1
 8006096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1e      	ldr	r2, [pc, #120]	@ (8006118 <HAL_TIM_Base_Start_IT+0xb0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d018      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x6c>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060aa:	d013      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x6c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1a      	ldr	r2, [pc, #104]	@ (800611c <HAL_TIM_Base_Start_IT+0xb4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x6c>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a19      	ldr	r2, [pc, #100]	@ (8006120 <HAL_TIM_Base_Start_IT+0xb8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x6c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a17      	ldr	r2, [pc, #92]	@ (8006124 <HAL_TIM_Base_Start_IT+0xbc>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x6c>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a16      	ldr	r2, [pc, #88]	@ (8006128 <HAL_TIM_Base_Start_IT+0xc0>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d111      	bne.n	80060f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d010      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f6:	e007      	b.n	8006108 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40010000 	.word	0x40010000
 800611c:	40000400 	.word	0x40000400
 8006120:	40000800 	.word	0x40000800
 8006124:	40000c00 	.word	0x40000c00
 8006128:	40014000 	.word	0x40014000

0800612c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e041      	b.n	80061c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7fd fe5a 	bl	8003e0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f000 fba2 	bl	80068b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <HAL_TIM_PWM_Start+0x24>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	bf14      	ite	ne
 80061e8:	2301      	movne	r3, #1
 80061ea:	2300      	moveq	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	e022      	b.n	8006236 <HAL_TIM_PWM_Start+0x6a>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d109      	bne.n	800620a <HAL_TIM_PWM_Start+0x3e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b01      	cmp	r3, #1
 8006200:	bf14      	ite	ne
 8006202:	2301      	movne	r3, #1
 8006204:	2300      	moveq	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	e015      	b.n	8006236 <HAL_TIM_PWM_Start+0x6a>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b08      	cmp	r3, #8
 800620e:	d109      	bne.n	8006224 <HAL_TIM_PWM_Start+0x58>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b01      	cmp	r3, #1
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	e008      	b.n	8006236 <HAL_TIM_PWM_Start+0x6a>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	bf14      	ite	ne
 8006230:	2301      	movne	r3, #1
 8006232:	2300      	moveq	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e068      	b.n	8006310 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d104      	bne.n	800624e <HAL_TIM_PWM_Start+0x82>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800624c:	e013      	b.n	8006276 <HAL_TIM_PWM_Start+0xaa>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b04      	cmp	r3, #4
 8006252:	d104      	bne.n	800625e <HAL_TIM_PWM_Start+0x92>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800625c:	e00b      	b.n	8006276 <HAL_TIM_PWM_Start+0xaa>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b08      	cmp	r3, #8
 8006262:	d104      	bne.n	800626e <HAL_TIM_PWM_Start+0xa2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800626c:	e003      	b.n	8006276 <HAL_TIM_PWM_Start+0xaa>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2201      	movs	r2, #1
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fdbe 	bl	8006e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a23      	ldr	r2, [pc, #140]	@ (8006318 <HAL_TIM_PWM_Start+0x14c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d107      	bne.n	800629e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800629c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006318 <HAL_TIM_PWM_Start+0x14c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d018      	beq.n	80062da <HAL_TIM_PWM_Start+0x10e>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b0:	d013      	beq.n	80062da <HAL_TIM_PWM_Start+0x10e>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a19      	ldr	r2, [pc, #100]	@ (800631c <HAL_TIM_PWM_Start+0x150>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d00e      	beq.n	80062da <HAL_TIM_PWM_Start+0x10e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a17      	ldr	r2, [pc, #92]	@ (8006320 <HAL_TIM_PWM_Start+0x154>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d009      	beq.n	80062da <HAL_TIM_PWM_Start+0x10e>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a16      	ldr	r2, [pc, #88]	@ (8006324 <HAL_TIM_PWM_Start+0x158>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d004      	beq.n	80062da <HAL_TIM_PWM_Start+0x10e>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a14      	ldr	r2, [pc, #80]	@ (8006328 <HAL_TIM_PWM_Start+0x15c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d111      	bne.n	80062fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b06      	cmp	r3, #6
 80062ea:	d010      	beq.n	800630e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fc:	e007      	b.n	800630e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0201 	orr.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40010000 	.word	0x40010000
 800631c:	40000400 	.word	0x40000400
 8006320:	40000800 	.word	0x40000800
 8006324:	40000c00 	.word	0x40000c00
 8006328:	40014000 	.word	0x40014000

0800632c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b02      	cmp	r3, #2
 8006340:	d122      	bne.n	8006388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b02      	cmp	r3, #2
 800634e:	d11b      	bne.n	8006388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0202 	mvn.w	r2, #2
 8006358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa81 	bl	8006876 <HAL_TIM_IC_CaptureCallback>
 8006374:	e005      	b.n	8006382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fa73 	bl	8006862 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fa84 	bl	800688a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b04      	cmp	r3, #4
 8006394:	d122      	bne.n	80063dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d11b      	bne.n	80063dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0204 	mvn.w	r2, #4
 80063ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fa57 	bl	8006876 <HAL_TIM_IC_CaptureCallback>
 80063c8:	e005      	b.n	80063d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fa49 	bl	8006862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fa5a 	bl	800688a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d122      	bne.n	8006430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d11b      	bne.n	8006430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0208 	mvn.w	r2, #8
 8006400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2204      	movs	r2, #4
 8006406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fa2d 	bl	8006876 <HAL_TIM_IC_CaptureCallback>
 800641c:	e005      	b.n	800642a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa1f 	bl	8006862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fa30 	bl	800688a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b10      	cmp	r3, #16
 800643c:	d122      	bne.n	8006484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b10      	cmp	r3, #16
 800644a:	d11b      	bne.n	8006484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0210 	mvn.w	r2, #16
 8006454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2208      	movs	r2, #8
 800645a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fa03 	bl	8006876 <HAL_TIM_IC_CaptureCallback>
 8006470:	e005      	b.n	800647e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9f5 	bl	8006862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fa06 	bl	800688a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b01      	cmp	r3, #1
 8006490:	d10e      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b01      	cmp	r3, #1
 800649e:	d107      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f06f 0201 	mvn.w	r2, #1
 80064a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9cf 	bl	800684e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ba:	2b80      	cmp	r3, #128	@ 0x80
 80064bc:	d10e      	bne.n	80064dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064c8:	2b80      	cmp	r3, #128	@ 0x80
 80064ca:	d107      	bne.n	80064dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80064d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fd30 	bl	8006f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e6:	2b40      	cmp	r3, #64	@ 0x40
 80064e8:	d10e      	bne.n	8006508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f4:	2b40      	cmp	r3, #64	@ 0x40
 80064f6:	d107      	bne.n	8006508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f9cb 	bl	800689e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b20      	cmp	r3, #32
 8006514:	d10e      	bne.n	8006534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b20      	cmp	r3, #32
 8006522:	d107      	bne.n	8006534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0220 	mvn.w	r2, #32
 800652c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fcfa 	bl	8006f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006552:	2b01      	cmp	r3, #1
 8006554:	d101      	bne.n	800655a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006556:	2302      	movs	r3, #2
 8006558:	e0ae      	b.n	80066b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b0c      	cmp	r3, #12
 8006566:	f200 809f 	bhi.w	80066a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800656a:	a201      	add	r2, pc, #4	@ (adr r2, 8006570 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	080065a5 	.word	0x080065a5
 8006574:	080066a9 	.word	0x080066a9
 8006578:	080066a9 	.word	0x080066a9
 800657c:	080066a9 	.word	0x080066a9
 8006580:	080065e5 	.word	0x080065e5
 8006584:	080066a9 	.word	0x080066a9
 8006588:	080066a9 	.word	0x080066a9
 800658c:	080066a9 	.word	0x080066a9
 8006590:	08006627 	.word	0x08006627
 8006594:	080066a9 	.word	0x080066a9
 8006598:	080066a9 	.word	0x080066a9
 800659c:	080066a9 	.word	0x080066a9
 80065a0:	08006667 	.word	0x08006667
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fa02 	bl	80069b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0208 	orr.w	r2, r2, #8
 80065be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0204 	bic.w	r2, r2, #4
 80065ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6999      	ldr	r1, [r3, #24]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	691a      	ldr	r2, [r3, #16]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	619a      	str	r2, [r3, #24]
      break;
 80065e2:	e064      	b.n	80066ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fa48 	bl	8006a80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699a      	ldr	r2, [r3, #24]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800660e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6999      	ldr	r1, [r3, #24]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	021a      	lsls	r2, r3, #8
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	619a      	str	r2, [r3, #24]
      break;
 8006624:	e043      	b.n	80066ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fa93 	bl	8006b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f042 0208 	orr.w	r2, r2, #8
 8006640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0204 	bic.w	r2, r2, #4
 8006650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69d9      	ldr	r1, [r3, #28]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	61da      	str	r2, [r3, #28]
      break;
 8006664:	e023      	b.n	80066ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	4618      	mov	r0, r3
 800666e:	f000 fadd 	bl	8006c2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69da      	ldr	r2, [r3, #28]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69da      	ldr	r2, [r3, #28]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69d9      	ldr	r1, [r3, #28]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	021a      	lsls	r2, r3, #8
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	61da      	str	r2, [r3, #28]
      break;
 80066a6:	e002      	b.n	80066ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]
      break;
 80066ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <HAL_TIM_ConfigClockSource+0x1c>
 80066d8:	2302      	movs	r3, #2
 80066da:	e0b4      	b.n	8006846 <HAL_TIM_ConfigClockSource+0x186>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006702:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006714:	d03e      	beq.n	8006794 <HAL_TIM_ConfigClockSource+0xd4>
 8006716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800671a:	f200 8087 	bhi.w	800682c <HAL_TIM_ConfigClockSource+0x16c>
 800671e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006722:	f000 8086 	beq.w	8006832 <HAL_TIM_ConfigClockSource+0x172>
 8006726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800672a:	d87f      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
 800672c:	2b70      	cmp	r3, #112	@ 0x70
 800672e:	d01a      	beq.n	8006766 <HAL_TIM_ConfigClockSource+0xa6>
 8006730:	2b70      	cmp	r3, #112	@ 0x70
 8006732:	d87b      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
 8006734:	2b60      	cmp	r3, #96	@ 0x60
 8006736:	d050      	beq.n	80067da <HAL_TIM_ConfigClockSource+0x11a>
 8006738:	2b60      	cmp	r3, #96	@ 0x60
 800673a:	d877      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
 800673c:	2b50      	cmp	r3, #80	@ 0x50
 800673e:	d03c      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0xfa>
 8006740:	2b50      	cmp	r3, #80	@ 0x50
 8006742:	d873      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
 8006744:	2b40      	cmp	r3, #64	@ 0x40
 8006746:	d058      	beq.n	80067fa <HAL_TIM_ConfigClockSource+0x13a>
 8006748:	2b40      	cmp	r3, #64	@ 0x40
 800674a:	d86f      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
 800674c:	2b30      	cmp	r3, #48	@ 0x30
 800674e:	d064      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x15a>
 8006750:	2b30      	cmp	r3, #48	@ 0x30
 8006752:	d86b      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
 8006754:	2b20      	cmp	r3, #32
 8006756:	d060      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x15a>
 8006758:	2b20      	cmp	r3, #32
 800675a:	d867      	bhi.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d05c      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x15a>
 8006760:	2b10      	cmp	r3, #16
 8006762:	d05a      	beq.n	800681a <HAL_TIM_ConfigClockSource+0x15a>
 8006764:	e062      	b.n	800682c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	6899      	ldr	r1, [r3, #8]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f000 fb23 	bl	8006dc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006788:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	609a      	str	r2, [r3, #8]
      break;
 8006792:	e04f      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6818      	ldr	r0, [r3, #0]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	6899      	ldr	r1, [r3, #8]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f000 fb0c 	bl	8006dc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067b6:	609a      	str	r2, [r3, #8]
      break;
 80067b8:	e03c      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6859      	ldr	r1, [r3, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f000 fa80 	bl	8006ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2150      	movs	r1, #80	@ 0x50
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fad9 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 80067d8:	e02c      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6859      	ldr	r1, [r3, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f000 fa9f 	bl	8006d2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2160      	movs	r1, #96	@ 0x60
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fac9 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 80067f8:	e01c      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	6859      	ldr	r1, [r3, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	461a      	mov	r2, r3
 8006808:	f000 fa60 	bl	8006ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2140      	movs	r1, #64	@ 0x40
 8006812:	4618      	mov	r0, r3
 8006814:	f000 fab9 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 8006818:	e00c      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4619      	mov	r1, r3
 8006824:	4610      	mov	r0, r2
 8006826:	f000 fab0 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 800682a:	e003      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	73fb      	strb	r3, [r7, #15]
      break;
 8006830:	e000      	b.n	8006834 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a34      	ldr	r2, [pc, #208]	@ (8006998 <TIM_Base_SetConfig+0xe4>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00f      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d2:	d00b      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a31      	ldr	r2, [pc, #196]	@ (800699c <TIM_Base_SetConfig+0xe8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d007      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a30      	ldr	r2, [pc, #192]	@ (80069a0 <TIM_Base_SetConfig+0xec>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_Base_SetConfig+0x38>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a2f      	ldr	r2, [pc, #188]	@ (80069a4 <TIM_Base_SetConfig+0xf0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d108      	bne.n	80068fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a25      	ldr	r2, [pc, #148]	@ (8006998 <TIM_Base_SetConfig+0xe4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d01b      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800690c:	d017      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a22      	ldr	r2, [pc, #136]	@ (800699c <TIM_Base_SetConfig+0xe8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d013      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a21      	ldr	r2, [pc, #132]	@ (80069a0 <TIM_Base_SetConfig+0xec>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00f      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a20      	ldr	r2, [pc, #128]	@ (80069a4 <TIM_Base_SetConfig+0xf0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00b      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a1f      	ldr	r2, [pc, #124]	@ (80069a8 <TIM_Base_SetConfig+0xf4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d007      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1e      	ldr	r2, [pc, #120]	@ (80069ac <TIM_Base_SetConfig+0xf8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d003      	beq.n	800693e <TIM_Base_SetConfig+0x8a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a1d      	ldr	r2, [pc, #116]	@ (80069b0 <TIM_Base_SetConfig+0xfc>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d108      	bne.n	8006950 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a08      	ldr	r2, [pc, #32]	@ (8006998 <TIM_Base_SetConfig+0xe4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d103      	bne.n	8006984 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	615a      	str	r2, [r3, #20]
}
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40010000 	.word	0x40010000
 800699c:	40000400 	.word	0x40000400
 80069a0:	40000800 	.word	0x40000800
 80069a4:	40000c00 	.word	0x40000c00
 80069a8:	40014000 	.word	0x40014000
 80069ac:	40014400 	.word	0x40014400
 80069b0:	40014800 	.word	0x40014800

080069b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	f023 0201 	bic.w	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0303 	bic.w	r3, r3, #3
 80069ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f023 0302 	bic.w	r3, r3, #2
 80069fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8006a7c <TIM_OC1_SetConfig+0xc8>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d10c      	bne.n	8006a2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f023 0308 	bic.w	r3, r3, #8
 8006a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f023 0304 	bic.w	r3, r3, #4
 8006a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a13      	ldr	r2, [pc, #76]	@ (8006a7c <TIM_OC1_SetConfig+0xc8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d111      	bne.n	8006a56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	621a      	str	r2, [r3, #32]
}
 8006a70:	bf00      	nop
 8006a72:	371c      	adds	r7, #28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	40010000 	.word	0x40010000

08006a80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f023 0210 	bic.w	r2, r3, #16
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f023 0320 	bic.w	r3, r3, #32
 8006aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a1e      	ldr	r2, [pc, #120]	@ (8006b54 <TIM_OC2_SetConfig+0xd4>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d10d      	bne.n	8006afc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006afa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a15      	ldr	r2, [pc, #84]	@ (8006b54 <TIM_OC2_SetConfig+0xd4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d113      	bne.n	8006b2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	621a      	str	r2, [r3, #32]
}
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	40010000 	.word	0x40010000

08006b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	021b      	lsls	r3, r3, #8
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c28 <TIM_OC3_SetConfig+0xd0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d10d      	bne.n	8006bd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	021b      	lsls	r3, r3, #8
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a14      	ldr	r2, [pc, #80]	@ (8006c28 <TIM_OC3_SetConfig+0xd0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d113      	bne.n	8006c02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	621a      	str	r2, [r3, #32]
}
 8006c1c:	bf00      	nop
 8006c1e:	371c      	adds	r7, #28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	40010000 	.word	0x40010000

08006c2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	031b      	lsls	r3, r3, #12
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a10      	ldr	r2, [pc, #64]	@ (8006cc8 <TIM_OC4_SetConfig+0x9c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d109      	bne.n	8006ca0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	019b      	lsls	r3, r3, #6
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	621a      	str	r2, [r3, #32]
}
 8006cba:	bf00      	nop
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	40010000 	.word	0x40010000

08006ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f023 0201 	bic.w	r2, r3, #1
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f023 030a 	bic.w	r3, r3, #10
 8006d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b087      	sub	sp, #28
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f023 0210 	bic.w	r2, r3, #16
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	031b      	lsls	r3, r3, #12
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	621a      	str	r2, [r3, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	371c      	adds	r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b085      	sub	sp, #20
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006da0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f043 0307 	orr.w	r3, r3, #7
 8006dac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	609a      	str	r2, [r3, #8]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	021a      	lsls	r2, r3, #8
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	609a      	str	r2, [r3, #8]
}
 8006df4:	bf00      	nop
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f003 031f 	and.w	r3, r3, #31
 8006e12:	2201      	movs	r2, #1
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1a      	ldr	r2, [r3, #32]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	43db      	mvns	r3, r3
 8006e22:	401a      	ands	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a1a      	ldr	r2, [r3, #32]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f003 031f 	and.w	r3, r3, #31
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	fa01 f303 	lsl.w	r3, r1, r3
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e050      	b.n	8006f06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d018      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eb0:	d013      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a18      	ldr	r2, [pc, #96]	@ (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00e      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a16      	ldr	r2, [pc, #88]	@ (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d009      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a15      	ldr	r2, [pc, #84]	@ (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d004      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a13      	ldr	r2, [pc, #76]	@ (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d10c      	bne.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40000400 	.word	0x40000400
 8006f1c:	40000800 	.word	0x40000800
 8006f20:	40000c00 	.word	0x40000c00
 8006f24:	40014000 	.word	0x40014000

08006f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e047      	b.n	8006ff2 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d106      	bne.n	8006f7c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7fd f96a 	bl	8004250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2224      	movs	r2, #36	@ 0x24
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fded 	bl	8007b74 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	691a      	ldr	r2, [r3, #16]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695a      	ldr	r2, [r3, #20]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8006fb8:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	695a      	ldr	r2, [r3, #20]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f042 0208 	orr.w	r2, r2, #8
 8006fc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b08a      	sub	sp, #40	@ 0x28
 8006ffe:	af02      	add	r7, sp, #8
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	4613      	mov	r3, r2
 8007008:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b20      	cmp	r3, #32
 8007018:	d17c      	bne.n	8007114 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <HAL_UART_Transmit+0x2c>
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e075      	b.n	8007116 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007030:	2b01      	cmp	r3, #1
 8007032:	d101      	bne.n	8007038 <HAL_UART_Transmit+0x3e>
 8007034:	2302      	movs	r3, #2
 8007036:	e06e      	b.n	8007116 <HAL_UART_Transmit+0x11c>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2221      	movs	r2, #33	@ 0x21
 800704a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800704e:	f7fd f9ed 	bl	800442c <HAL_GetTick>
 8007052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	88fa      	ldrh	r2, [r7, #6]
 8007058:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	88fa      	ldrh	r2, [r7, #6]
 800705e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007068:	d108      	bne.n	800707c <HAL_UART_Transmit+0x82>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d104      	bne.n	800707c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007072:	2300      	movs	r3, #0
 8007074:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	61bb      	str	r3, [r7, #24]
 800707a:	e003      	b.n	8007084 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007080:	2300      	movs	r3, #0
 8007082:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800708c:	e02a      	b.n	80070e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2200      	movs	r2, #0
 8007096:	2180      	movs	r1, #128	@ 0x80
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 fb29 	bl	80076f0 <UART_WaitOnFlagUntilTimeout>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e036      	b.n	8007116 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10b      	bne.n	80070c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	3302      	adds	r3, #2
 80070c2:	61bb      	str	r3, [r7, #24]
 80070c4:	e007      	b.n	80070d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	781a      	ldrb	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	3301      	adds	r3, #1
 80070d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070da:	b29b      	uxth	r3, r3
 80070dc:	3b01      	subs	r3, #1
 80070de:	b29a      	uxth	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1cf      	bne.n	800708e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2200      	movs	r2, #0
 80070f6:	2140      	movs	r1, #64	@ 0x40
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 faf9 	bl	80076f0 <UART_WaitOnFlagUntilTimeout>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e006      	b.n	8007116 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2220      	movs	r2, #32
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	e000      	b.n	8007116 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007114:	2302      	movs	r3, #2
  }
}
 8007116:	4618      	mov	r0, r3
 8007118:	3720      	adds	r7, #32
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b084      	sub	sp, #16
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	4613      	mov	r3, r2
 800712a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b20      	cmp	r3, #32
 8007136:	d11d      	bne.n	8007174 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <HAL_UART_Receive_IT+0x26>
 800713e:	88fb      	ldrh	r3, [r7, #6]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e016      	b.n	8007176 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800714e:	2b01      	cmp	r3, #1
 8007150:	d101      	bne.n	8007156 <HAL_UART_Receive_IT+0x38>
 8007152:	2302      	movs	r3, #2
 8007154:	e00f      	b.n	8007176 <HAL_UART_Receive_IT+0x58>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007164:	88fb      	ldrh	r3, [r7, #6]
 8007166:	461a      	mov	r2, r3
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 fb2e 	bl	80077cc <UART_Start_Receive_IT>
 8007170:	4603      	mov	r3, r0
 8007172:	e000      	b.n	8007176 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007174:	2302      	movs	r3, #2
  }
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b0ba      	sub	sp, #232	@ 0xe8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b6:	f003 030f 	and.w	r3, r3, #15
 80071ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80071be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10f      	bne.n	80071e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <HAL_UART_IRQHandler+0x66>
 80071d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fc0d 	bl	80079fe <UART_Receive_IT>
      return;
 80071e4:	e256      	b.n	8007694 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 80de 	beq.w	80073ac <HAL_UART_IRQHandler+0x22c>
 80071f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007200:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 80d1 	beq.w	80073ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800720a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00b      	beq.n	800722e <HAL_UART_IRQHandler+0xae>
 8007216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800721a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800721e:	2b00      	cmp	r3, #0
 8007220:	d005      	beq.n	800722e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007226:	f043 0201 	orr.w	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800722e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007232:	f003 0304 	and.w	r3, r3, #4
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <HAL_UART_IRQHandler+0xd2>
 800723a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724a:	f043 0202 	orr.w	r2, r3, #2
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00b      	beq.n	8007276 <HAL_UART_IRQHandler+0xf6>
 800725e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d005      	beq.n	8007276 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726e:	f043 0204 	orr.w	r2, r3, #4
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b00      	cmp	r3, #0
 8007280:	d011      	beq.n	80072a6 <HAL_UART_IRQHandler+0x126>
 8007282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b00      	cmp	r3, #0
 800728c:	d105      	bne.n	800729a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800728e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729e:	f043 0208 	orr.w	r2, r3, #8
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 81ed 	beq.w	800768a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d008      	beq.n	80072ce <HAL_UART_IRQHandler+0x14e>
 80072bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072c0:	f003 0320 	and.w	r3, r3, #32
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fb98 	bl	80079fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d8:	2b40      	cmp	r3, #64	@ 0x40
 80072da:	bf0c      	ite	eq
 80072dc:	2301      	moveq	r3, #1
 80072de:	2300      	movne	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d103      	bne.n	80072fa <HAL_UART_IRQHandler+0x17a>
 80072f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d04f      	beq.n	800739a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 faa0 	bl	8007840 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800730a:	2b40      	cmp	r3, #64	@ 0x40
 800730c:	d141      	bne.n	8007392 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3314      	adds	r3, #20
 8007314:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007324:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800732c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3314      	adds	r3, #20
 8007336:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800733a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800733e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007346:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800734a:	e841 2300 	strex	r3, r2, [r1]
 800734e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1d9      	bne.n	800730e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735e:	2b00      	cmp	r3, #0
 8007360:	d013      	beq.n	800738a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007366:	4a7d      	ldr	r2, [pc, #500]	@ (800755c <HAL_UART_IRQHandler+0x3dc>)
 8007368:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736e:	4618      	mov	r0, r3
 8007370:	f7fd fa29 	bl	80047c6 <HAL_DMA_Abort_IT>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d016      	beq.n	80073a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007384:	4610      	mov	r0, r2
 8007386:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007388:	e00e      	b.n	80073a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f99a 	bl	80076c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007390:	e00a      	b.n	80073a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f996 	bl	80076c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007398:	e006      	b.n	80073a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f992 	bl	80076c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80073a6:	e170      	b.n	800768a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a8:	bf00      	nop
    return;
 80073aa:	e16e      	b.n	800768a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	f040 814a 	bne.w	800764a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ba:	f003 0310 	and.w	r3, r3, #16
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 8143 	beq.w	800764a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073c8:	f003 0310 	and.w	r3, r3, #16
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 813c 	beq.w	800764a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073d2:	2300      	movs	r3, #0
 80073d4:	60bb      	str	r3, [r7, #8]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60bb      	str	r3, [r7, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	60bb      	str	r3, [r7, #8]
 80073e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f2:	2b40      	cmp	r3, #64	@ 0x40
 80073f4:	f040 80b4 	bne.w	8007560 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007404:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8140 	beq.w	800768e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007416:	429a      	cmp	r2, r3
 8007418:	f080 8139 	bcs.w	800768e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007422:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800742e:	f000 8088 	beq.w	8007542 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	330c      	adds	r3, #12
 8007438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007448:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800744c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	330c      	adds	r3, #12
 800745a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800745e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800746a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1d9      	bne.n	8007432 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3314      	adds	r3, #20
 8007484:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007488:	e853 3f00 	ldrex	r3, [r3]
 800748c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800748e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007490:	f023 0301 	bic.w	r3, r3, #1
 8007494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3314      	adds	r3, #20
 800749e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80074a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80074a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80074aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80074b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e1      	bne.n	800747e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3314      	adds	r3, #20
 80074c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80074ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3314      	adds	r3, #20
 80074da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80074de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80074e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80074e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80074ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e3      	bne.n	80074ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	330c      	adds	r3, #12
 8007506:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007512:	f023 0310 	bic.w	r3, r3, #16
 8007516:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	330c      	adds	r3, #12
 8007520:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007524:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007526:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800752a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e3      	bne.n	8007500 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753c:	4618      	mov	r0, r3
 800753e:	f7fd f8d2 	bl	80046e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800754a:	b29b      	uxth	r3, r3
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	b29b      	uxth	r3, r3
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f8c0 	bl	80076d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007558:	e099      	b.n	800768e <HAL_UART_IRQHandler+0x50e>
 800755a:	bf00      	nop
 800755c:	08007907 	.word	0x08007907
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007568:	b29b      	uxth	r3, r3
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007574:	b29b      	uxth	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 808b 	beq.w	8007692 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800757c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 8086 	beq.w	8007692 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	330c      	adds	r3, #12
 800758c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800759c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	330c      	adds	r3, #12
 80075a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80075aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80075ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e3      	bne.n	8007586 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3314      	adds	r3, #20
 80075c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	623b      	str	r3, [r7, #32]
   return(result);
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	f023 0301 	bic.w	r3, r3, #1
 80075d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3314      	adds	r3, #20
 80075de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80075e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80075e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1e3      	bne.n	80075be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2220      	movs	r2, #32
 80075fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	330c      	adds	r3, #12
 800760a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	e853 3f00 	ldrex	r3, [r3]
 8007612:	60fb      	str	r3, [r7, #12]
   return(result);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 0310 	bic.w	r3, r3, #16
 800761a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	330c      	adds	r3, #12
 8007624:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007628:	61fa      	str	r2, [r7, #28]
 800762a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762c:	69b9      	ldr	r1, [r7, #24]
 800762e:	69fa      	ldr	r2, [r7, #28]
 8007630:	e841 2300 	strex	r3, r2, [r1]
 8007634:	617b      	str	r3, [r7, #20]
   return(result);
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1e3      	bne.n	8007604 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800763c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f848 	bl	80076d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007648:	e023      	b.n	8007692 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800764a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800764e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007652:	2b00      	cmp	r3, #0
 8007654:	d009      	beq.n	800766a <HAL_UART_IRQHandler+0x4ea>
 8007656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800765a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f963 	bl	800792e <UART_Transmit_IT>
    return;
 8007668:	e014      	b.n	8007694 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800766a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800766e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00e      	beq.n	8007694 <HAL_UART_IRQHandler+0x514>
 8007676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800767a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800767e:	2b00      	cmp	r3, #0
 8007680:	d008      	beq.n	8007694 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f9a3 	bl	80079ce <UART_EndTransmit_IT>
    return;
 8007688:	e004      	b.n	8007694 <HAL_UART_IRQHandler+0x514>
    return;
 800768a:	bf00      	nop
 800768c:	e002      	b.n	8007694 <HAL_UART_IRQHandler+0x514>
      return;
 800768e:	bf00      	nop
 8007690:	e000      	b.n	8007694 <HAL_UART_IRQHandler+0x514>
      return;
 8007692:	bf00      	nop
  }
}
 8007694:	37e8      	adds	r7, #232	@ 0xe8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop

0800769c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b090      	sub	sp, #64	@ 0x40
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	4613      	mov	r3, r2
 80076fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007700:	e050      	b.n	80077a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007708:	d04c      	beq.n	80077a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800770a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800770c:	2b00      	cmp	r3, #0
 800770e:	d007      	beq.n	8007720 <UART_WaitOnFlagUntilTimeout+0x30>
 8007710:	f7fc fe8c 	bl	800442c <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800771c:	429a      	cmp	r2, r3
 800771e:	d241      	bcs.n	80077a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	330c      	adds	r3, #12
 8007726:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772a:	e853 3f00 	ldrex	r3, [r3]
 800772e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007732:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	330c      	adds	r3, #12
 800773e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007740:	637a      	str	r2, [r7, #52]	@ 0x34
 8007742:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007746:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800774e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e5      	bne.n	8007720 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3314      	adds	r3, #20
 800775a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	613b      	str	r3, [r7, #16]
   return(result);
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	f023 0301 	bic.w	r3, r3, #1
 800776a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3314      	adds	r3, #20
 8007772:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007774:	623a      	str	r2, [r7, #32]
 8007776:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	69f9      	ldr	r1, [r7, #28]
 800777a:	6a3a      	ldr	r2, [r7, #32]
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	61bb      	str	r3, [r7, #24]
   return(result);
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e5      	bne.n	8007754 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2220      	movs	r2, #32
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e00f      	b.n	80077c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	4013      	ands	r3, r2
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	bf0c      	ite	eq
 80077b4:	2301      	moveq	r3, #1
 80077b6:	2300      	movne	r3, #0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	461a      	mov	r2, r3
 80077bc:	79fb      	ldrb	r3, [r7, #7]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d09f      	beq.n	8007702 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3740      	adds	r7, #64	@ 0x40
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	4613      	mov	r3, r2
 80077d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	88fa      	ldrh	r2, [r7, #6]
 80077e4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	88fa      	ldrh	r2, [r7, #6]
 80077ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2222      	movs	r2, #34	@ 0x22
 80077f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007810:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	695a      	ldr	r2, [r3, #20]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f042 0201 	orr.w	r2, r2, #1
 8007820:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0220 	orr.w	r2, r2, #32
 8007830:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007840:	b480      	push	{r7}
 8007842:	b095      	sub	sp, #84	@ 0x54
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	330c      	adds	r3, #12
 800784e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800785e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	330c      	adds	r3, #12
 8007866:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007868:	643a      	str	r2, [r7, #64]	@ 0x40
 800786a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800786e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e5      	bne.n	8007848 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3314      	adds	r3, #20
 8007882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	61fb      	str	r3, [r7, #28]
   return(result);
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	f023 0301 	bic.w	r3, r3, #1
 8007892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3314      	adds	r3, #20
 800789a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800789c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800789e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e5      	bne.n	800787c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d119      	bne.n	80078ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	330c      	adds	r3, #12
 80078be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f023 0310 	bic.w	r3, r3, #16
 80078ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	330c      	adds	r3, #12
 80078d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078d8:	61ba      	str	r2, [r7, #24]
 80078da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6979      	ldr	r1, [r7, #20]
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	613b      	str	r3, [r7, #16]
   return(result);
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e5      	bne.n	80078b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80078fa:	bf00      	nop
 80078fc:	3754      	adds	r7, #84	@ 0x54
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007912:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f7ff fecf 	bl	80076c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007926:	bf00      	nop
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800792e:	b480      	push	{r7}
 8007930:	b085      	sub	sp, #20
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b21      	cmp	r3, #33	@ 0x21
 8007940:	d13e      	bne.n	80079c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800794a:	d114      	bne.n	8007976 <UART_Transmit_IT+0x48>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d110      	bne.n	8007976 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007968:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	1c9a      	adds	r2, r3, #2
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	621a      	str	r2, [r3, #32]
 8007974:	e008      	b.n	8007988 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	1c59      	adds	r1, r3, #1
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6211      	str	r1, [r2, #32]
 8007980:	781a      	ldrb	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800798c:	b29b      	uxth	r3, r3
 800798e:	3b01      	subs	r3, #1
 8007990:	b29b      	uxth	r3, r3
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	4619      	mov	r1, r3
 8007996:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10f      	bne.n	80079bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	e000      	b.n	80079c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079c0:	2302      	movs	r3, #2
  }
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff fe54 	bl	800769c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b08c      	sub	sp, #48	@ 0x30
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b22      	cmp	r3, #34	@ 0x22
 8007a10:	f040 80ab 	bne.w	8007b6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a1c:	d117      	bne.n	8007a4e <UART_Receive_IT+0x50>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d113      	bne.n	8007a4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a46:	1c9a      	adds	r2, r3, #2
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a4c:	e026      	b.n	8007a9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007a54:	2300      	movs	r3, #0
 8007a56:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a60:	d007      	beq.n	8007a72 <UART_Receive_IT+0x74>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10a      	bne.n	8007a80 <UART_Receive_IT+0x82>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d106      	bne.n	8007a80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7c:	701a      	strb	r2, [r3, #0]
 8007a7e:	e008      	b.n	8007a92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d15a      	bne.n	8007b66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0220 	bic.w	r2, r2, #32
 8007abe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ace:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	695a      	ldr	r2, [r3, #20]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 0201 	bic.w	r2, r2, #1
 8007ade:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d135      	bne.n	8007b5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	330c      	adds	r3, #12
 8007afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	613b      	str	r3, [r7, #16]
   return(result);
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f023 0310 	bic.w	r3, r3, #16
 8007b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	330c      	adds	r3, #12
 8007b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b16:	623a      	str	r2, [r7, #32]
 8007b18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1a:	69f9      	ldr	r1, [r7, #28]
 8007b1c:	6a3a      	ldr	r2, [r7, #32]
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e5      	bne.n	8007af6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0310 	and.w	r3, r3, #16
 8007b34:	2b10      	cmp	r3, #16
 8007b36:	d10a      	bne.n	8007b4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff fdbf 	bl	80076d8 <HAL_UARTEx_RxEventCallback>
 8007b5a:	e002      	b.n	8007b62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7ff fda7 	bl	80076b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	e002      	b.n	8007b6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	e000      	b.n	8007b6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b6a:	2302      	movs	r3, #2
  }
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3730      	adds	r7, #48	@ 0x30
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b78:	b0c0      	sub	sp, #256	@ 0x100
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b90:	68d9      	ldr	r1, [r3, #12]
 8007b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	ea40 0301 	orr.w	r3, r0, r1
 8007b9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007bcc:	f021 010c 	bic.w	r1, r1, #12
 8007bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007bda:	430b      	orrs	r3, r1
 8007bdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bee:	6999      	ldr	r1, [r3, #24]
 8007bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	ea40 0301 	orr.w	r3, r0, r1
 8007bfa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	4b8f      	ldr	r3, [pc, #572]	@ (8007e40 <UART_SetConfig+0x2cc>)
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d005      	beq.n	8007c14 <UART_SetConfig+0xa0>
 8007c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	4b8d      	ldr	r3, [pc, #564]	@ (8007e44 <UART_SetConfig+0x2d0>)
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d104      	bne.n	8007c1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c14:	f7fd fc1c 	bl	8005450 <HAL_RCC_GetPCLK2Freq>
 8007c18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007c1c:	e003      	b.n	8007c26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c1e:	f7fd fc03 	bl	8005428 <HAL_RCC_GetPCLK1Freq>
 8007c22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c2a:	69db      	ldr	r3, [r3, #28]
 8007c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c30:	f040 810c 	bne.w	8007e4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007c42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007c46:	4622      	mov	r2, r4
 8007c48:	462b      	mov	r3, r5
 8007c4a:	1891      	adds	r1, r2, r2
 8007c4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c4e:	415b      	adcs	r3, r3
 8007c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007c56:	4621      	mov	r1, r4
 8007c58:	eb12 0801 	adds.w	r8, r2, r1
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	eb43 0901 	adc.w	r9, r3, r1
 8007c62:	f04f 0200 	mov.w	r2, #0
 8007c66:	f04f 0300 	mov.w	r3, #0
 8007c6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c76:	4690      	mov	r8, r2
 8007c78:	4699      	mov	r9, r3
 8007c7a:	4623      	mov	r3, r4
 8007c7c:	eb18 0303 	adds.w	r3, r8, r3
 8007c80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c84:	462b      	mov	r3, r5
 8007c86:	eb49 0303 	adc.w	r3, r9, r3
 8007c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007c9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	18db      	adds	r3, r3, r3
 8007ca6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ca8:	4613      	mov	r3, r2
 8007caa:	eb42 0303 	adc.w	r3, r2, r3
 8007cae:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007cb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007cb8:	f7f8 ff7c 	bl	8000bb4 <__aeabi_uldivmod>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4b61      	ldr	r3, [pc, #388]	@ (8007e48 <UART_SetConfig+0x2d4>)
 8007cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8007cc6:	095b      	lsrs	r3, r3, #5
 8007cc8:	011c      	lsls	r4, r3, #4
 8007cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007cd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007cdc:	4642      	mov	r2, r8
 8007cde:	464b      	mov	r3, r9
 8007ce0:	1891      	adds	r1, r2, r2
 8007ce2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ce4:	415b      	adcs	r3, r3
 8007ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ce8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007cec:	4641      	mov	r1, r8
 8007cee:	eb12 0a01 	adds.w	sl, r2, r1
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	eb43 0b01 	adc.w	fp, r3, r1
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d0c:	4692      	mov	sl, r2
 8007d0e:	469b      	mov	fp, r3
 8007d10:	4643      	mov	r3, r8
 8007d12:	eb1a 0303 	adds.w	r3, sl, r3
 8007d16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d1a:	464b      	mov	r3, r9
 8007d1c:	eb4b 0303 	adc.w	r3, fp, r3
 8007d20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007d34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	18db      	adds	r3, r3, r3
 8007d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d3e:	4613      	mov	r3, r2
 8007d40:	eb42 0303 	adc.w	r3, r2, r3
 8007d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007d4e:	f7f8 ff31 	bl	8000bb4 <__aeabi_uldivmod>
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	4611      	mov	r1, r2
 8007d58:	4b3b      	ldr	r3, [pc, #236]	@ (8007e48 <UART_SetConfig+0x2d4>)
 8007d5a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d5e:	095b      	lsrs	r3, r3, #5
 8007d60:	2264      	movs	r2, #100	@ 0x64
 8007d62:	fb02 f303 	mul.w	r3, r2, r3
 8007d66:	1acb      	subs	r3, r1, r3
 8007d68:	00db      	lsls	r3, r3, #3
 8007d6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007d6e:	4b36      	ldr	r3, [pc, #216]	@ (8007e48 <UART_SetConfig+0x2d4>)
 8007d70:	fba3 2302 	umull	r2, r3, r3, r2
 8007d74:	095b      	lsrs	r3, r3, #5
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d7c:	441c      	add	r4, r3
 8007d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d90:	4642      	mov	r2, r8
 8007d92:	464b      	mov	r3, r9
 8007d94:	1891      	adds	r1, r2, r2
 8007d96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d98:	415b      	adcs	r3, r3
 8007d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007da0:	4641      	mov	r1, r8
 8007da2:	1851      	adds	r1, r2, r1
 8007da4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007da6:	4649      	mov	r1, r9
 8007da8:	414b      	adcs	r3, r1
 8007daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	f04f 0300 	mov.w	r3, #0
 8007db4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007db8:	4659      	mov	r1, fp
 8007dba:	00cb      	lsls	r3, r1, #3
 8007dbc:	4651      	mov	r1, sl
 8007dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dc2:	4651      	mov	r1, sl
 8007dc4:	00ca      	lsls	r2, r1, #3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4603      	mov	r3, r0
 8007dcc:	4642      	mov	r2, r8
 8007dce:	189b      	adds	r3, r3, r2
 8007dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	460a      	mov	r2, r1
 8007dd8:	eb42 0303 	adc.w	r3, r2, r3
 8007ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007dec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007df0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007df4:	460b      	mov	r3, r1
 8007df6:	18db      	adds	r3, r3, r3
 8007df8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	eb42 0303 	adc.w	r3, r2, r3
 8007e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007e0a:	f7f8 fed3 	bl	8000bb4 <__aeabi_uldivmod>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4b0d      	ldr	r3, [pc, #52]	@ (8007e48 <UART_SetConfig+0x2d4>)
 8007e14:	fba3 1302 	umull	r1, r3, r3, r2
 8007e18:	095b      	lsrs	r3, r3, #5
 8007e1a:	2164      	movs	r1, #100	@ 0x64
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	3332      	adds	r3, #50	@ 0x32
 8007e26:	4a08      	ldr	r2, [pc, #32]	@ (8007e48 <UART_SetConfig+0x2d4>)
 8007e28:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	f003 0207 	and.w	r2, r3, #7
 8007e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4422      	add	r2, r4
 8007e3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e3c:	e106      	b.n	800804c <UART_SetConfig+0x4d8>
 8007e3e:	bf00      	nop
 8007e40:	40011000 	.word	0x40011000
 8007e44:	40011400 	.word	0x40011400
 8007e48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e50:	2200      	movs	r2, #0
 8007e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e5e:	4642      	mov	r2, r8
 8007e60:	464b      	mov	r3, r9
 8007e62:	1891      	adds	r1, r2, r2
 8007e64:	6239      	str	r1, [r7, #32]
 8007e66:	415b      	adcs	r3, r3
 8007e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e6e:	4641      	mov	r1, r8
 8007e70:	1854      	adds	r4, r2, r1
 8007e72:	4649      	mov	r1, r9
 8007e74:	eb43 0501 	adc.w	r5, r3, r1
 8007e78:	f04f 0200 	mov.w	r2, #0
 8007e7c:	f04f 0300 	mov.w	r3, #0
 8007e80:	00eb      	lsls	r3, r5, #3
 8007e82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e86:	00e2      	lsls	r2, r4, #3
 8007e88:	4614      	mov	r4, r2
 8007e8a:	461d      	mov	r5, r3
 8007e8c:	4643      	mov	r3, r8
 8007e8e:	18e3      	adds	r3, r4, r3
 8007e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e94:	464b      	mov	r3, r9
 8007e96:	eb45 0303 	adc.w	r3, r5, r3
 8007e9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007eaa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007eae:	f04f 0200 	mov.w	r2, #0
 8007eb2:	f04f 0300 	mov.w	r3, #0
 8007eb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007eba:	4629      	mov	r1, r5
 8007ebc:	008b      	lsls	r3, r1, #2
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	008a      	lsls	r2, r1, #2
 8007ec8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007ecc:	f7f8 fe72 	bl	8000bb4 <__aeabi_uldivmod>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4b60      	ldr	r3, [pc, #384]	@ (8008058 <UART_SetConfig+0x4e4>)
 8007ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	011c      	lsls	r4, r3, #4
 8007ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ee8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007eec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ef0:	4642      	mov	r2, r8
 8007ef2:	464b      	mov	r3, r9
 8007ef4:	1891      	adds	r1, r2, r2
 8007ef6:	61b9      	str	r1, [r7, #24]
 8007ef8:	415b      	adcs	r3, r3
 8007efa:	61fb      	str	r3, [r7, #28]
 8007efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f00:	4641      	mov	r1, r8
 8007f02:	1851      	adds	r1, r2, r1
 8007f04:	6139      	str	r1, [r7, #16]
 8007f06:	4649      	mov	r1, r9
 8007f08:	414b      	adcs	r3, r1
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	f04f 0200 	mov.w	r2, #0
 8007f10:	f04f 0300 	mov.w	r3, #0
 8007f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f18:	4659      	mov	r1, fp
 8007f1a:	00cb      	lsls	r3, r1, #3
 8007f1c:	4651      	mov	r1, sl
 8007f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f22:	4651      	mov	r1, sl
 8007f24:	00ca      	lsls	r2, r1, #3
 8007f26:	4610      	mov	r0, r2
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	4642      	mov	r2, r8
 8007f2e:	189b      	adds	r3, r3, r2
 8007f30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f34:	464b      	mov	r3, r9
 8007f36:	460a      	mov	r2, r1
 8007f38:	eb42 0303 	adc.w	r3, r2, r3
 8007f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	f04f 0300 	mov.w	r3, #0
 8007f54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007f58:	4649      	mov	r1, r9
 8007f5a:	008b      	lsls	r3, r1, #2
 8007f5c:	4641      	mov	r1, r8
 8007f5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f62:	4641      	mov	r1, r8
 8007f64:	008a      	lsls	r2, r1, #2
 8007f66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007f6a:	f7f8 fe23 	bl	8000bb4 <__aeabi_uldivmod>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4611      	mov	r1, r2
 8007f74:	4b38      	ldr	r3, [pc, #224]	@ (8008058 <UART_SetConfig+0x4e4>)
 8007f76:	fba3 2301 	umull	r2, r3, r3, r1
 8007f7a:	095b      	lsrs	r3, r3, #5
 8007f7c:	2264      	movs	r2, #100	@ 0x64
 8007f7e:	fb02 f303 	mul.w	r3, r2, r3
 8007f82:	1acb      	subs	r3, r1, r3
 8007f84:	011b      	lsls	r3, r3, #4
 8007f86:	3332      	adds	r3, #50	@ 0x32
 8007f88:	4a33      	ldr	r2, [pc, #204]	@ (8008058 <UART_SetConfig+0x4e4>)
 8007f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8e:	095b      	lsrs	r3, r3, #5
 8007f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f94:	441c      	add	r4, r3
 8007f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007fa0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007fa4:	4642      	mov	r2, r8
 8007fa6:	464b      	mov	r3, r9
 8007fa8:	1891      	adds	r1, r2, r2
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	415b      	adcs	r3, r3
 8007fae:	60fb      	str	r3, [r7, #12]
 8007fb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fb4:	4641      	mov	r1, r8
 8007fb6:	1851      	adds	r1, r2, r1
 8007fb8:	6039      	str	r1, [r7, #0]
 8007fba:	4649      	mov	r1, r9
 8007fbc:	414b      	adcs	r3, r1
 8007fbe:	607b      	str	r3, [r7, #4]
 8007fc0:	f04f 0200 	mov.w	r2, #0
 8007fc4:	f04f 0300 	mov.w	r3, #0
 8007fc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fcc:	4659      	mov	r1, fp
 8007fce:	00cb      	lsls	r3, r1, #3
 8007fd0:	4651      	mov	r1, sl
 8007fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fd6:	4651      	mov	r1, sl
 8007fd8:	00ca      	lsls	r2, r1, #3
 8007fda:	4610      	mov	r0, r2
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4603      	mov	r3, r0
 8007fe0:	4642      	mov	r2, r8
 8007fe2:	189b      	adds	r3, r3, r2
 8007fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fe6:	464b      	mov	r3, r9
 8007fe8:	460a      	mov	r2, r1
 8007fea:	eb42 0303 	adc.w	r3, r2, r3
 8007fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ffa:	667a      	str	r2, [r7, #100]	@ 0x64
 8007ffc:	f04f 0200 	mov.w	r2, #0
 8008000:	f04f 0300 	mov.w	r3, #0
 8008004:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008008:	4649      	mov	r1, r9
 800800a:	008b      	lsls	r3, r1, #2
 800800c:	4641      	mov	r1, r8
 800800e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008012:	4641      	mov	r1, r8
 8008014:	008a      	lsls	r2, r1, #2
 8008016:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800801a:	f7f8 fdcb 	bl	8000bb4 <__aeabi_uldivmod>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4b0d      	ldr	r3, [pc, #52]	@ (8008058 <UART_SetConfig+0x4e4>)
 8008024:	fba3 1302 	umull	r1, r3, r3, r2
 8008028:	095b      	lsrs	r3, r3, #5
 800802a:	2164      	movs	r1, #100	@ 0x64
 800802c:	fb01 f303 	mul.w	r3, r1, r3
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	3332      	adds	r3, #50	@ 0x32
 8008036:	4a08      	ldr	r2, [pc, #32]	@ (8008058 <UART_SetConfig+0x4e4>)
 8008038:	fba2 2303 	umull	r2, r3, r2, r3
 800803c:	095b      	lsrs	r3, r3, #5
 800803e:	f003 020f 	and.w	r2, r3, #15
 8008042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4422      	add	r2, r4
 800804a:	609a      	str	r2, [r3, #8]
}
 800804c:	bf00      	nop
 800804e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008052:	46bd      	mov	sp, r7
 8008054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008058:	51eb851f 	.word	0x51eb851f

0800805c <memset>:
 800805c:	4402      	add	r2, r0
 800805e:	4603      	mov	r3, r0
 8008060:	4293      	cmp	r3, r2
 8008062:	d100      	bne.n	8008066 <memset+0xa>
 8008064:	4770      	bx	lr
 8008066:	f803 1b01 	strb.w	r1, [r3], #1
 800806a:	e7f9      	b.n	8008060 <memset+0x4>

0800806c <__libc_init_array>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	4d0d      	ldr	r5, [pc, #52]	@ (80080a4 <__libc_init_array+0x38>)
 8008070:	4c0d      	ldr	r4, [pc, #52]	@ (80080a8 <__libc_init_array+0x3c>)
 8008072:	1b64      	subs	r4, r4, r5
 8008074:	10a4      	asrs	r4, r4, #2
 8008076:	2600      	movs	r6, #0
 8008078:	42a6      	cmp	r6, r4
 800807a:	d109      	bne.n	8008090 <__libc_init_array+0x24>
 800807c:	4d0b      	ldr	r5, [pc, #44]	@ (80080ac <__libc_init_array+0x40>)
 800807e:	4c0c      	ldr	r4, [pc, #48]	@ (80080b0 <__libc_init_array+0x44>)
 8008080:	f000 f818 	bl	80080b4 <_init>
 8008084:	1b64      	subs	r4, r4, r5
 8008086:	10a4      	asrs	r4, r4, #2
 8008088:	2600      	movs	r6, #0
 800808a:	42a6      	cmp	r6, r4
 800808c:	d105      	bne.n	800809a <__libc_init_array+0x2e>
 800808e:	bd70      	pop	{r4, r5, r6, pc}
 8008090:	f855 3b04 	ldr.w	r3, [r5], #4
 8008094:	4798      	blx	r3
 8008096:	3601      	adds	r6, #1
 8008098:	e7ee      	b.n	8008078 <__libc_init_array+0xc>
 800809a:	f855 3b04 	ldr.w	r3, [r5], #4
 800809e:	4798      	blx	r3
 80080a0:	3601      	adds	r6, #1
 80080a2:	e7f2      	b.n	800808a <__libc_init_array+0x1e>
 80080a4:	08008198 	.word	0x08008198
 80080a8:	08008198 	.word	0x08008198
 80080ac:	08008198 	.word	0x08008198
 80080b0:	0800819c 	.word	0x0800819c

080080b4 <_init>:
 80080b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b6:	bf00      	nop
 80080b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ba:	bc08      	pop	{r3}
 80080bc:	469e      	mov	lr, r3
 80080be:	4770      	bx	lr

080080c0 <_fini>:
 80080c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c2:	bf00      	nop
 80080c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c6:	bc08      	pop	{r3}
 80080c8:	469e      	mov	lr, r3
 80080ca:	4770      	bx	lr
