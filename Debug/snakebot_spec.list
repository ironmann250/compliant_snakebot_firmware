
snakebot_spec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007848  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080079e0  080079e0  000089e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa0  08007aa0  000090ac  2**0
                  CONTENTS
  4 .ARM          00000008  08007aa0  08007aa0  00008aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aa8  08007aa8  000090ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa8  08007aa8  00008aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007aac  08007aac  00008aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08007ab0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200000b0  08007b5c  000090b0  2**3
                  ALLOC
 10 ._user_heap_stack 00001004  200003e4  08007b5c  000093e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012998  00000000  00000000  000090dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003080  00000000  00000000  0001ba74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0001eaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d67  00000000  00000000  0001fc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017be7  00000000  00000000  000209a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fca  00000000  00000000  0003858e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000909db  00000000  00000000  0004f558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dff33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e0  00000000  00000000  000dff78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e4958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b0 	.word	0x200000b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080079c8 	.word	0x080079c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000b4 	.word	0x200000b4
 80001d4:	080079c8 	.word	0x080079c8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b96a 	b.w	8000e00 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	460c      	mov	r4, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d14e      	bne.n	8000bee <__udivmoddi4+0xaa>
 8000b50:	4694      	mov	ip, r2
 8000b52:	458c      	cmp	ip, r1
 8000b54:	4686      	mov	lr, r0
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	d962      	bls.n	8000c22 <__udivmoddi4+0xde>
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0320 	rsb	r3, r2, #32
 8000b62:	4091      	lsls	r1, r2
 8000b64:	fa20 f303 	lsr.w	r3, r0, r3
 8000b68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6c:	4319      	orrs	r1, r3
 8000b6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b76:	fa1f f68c 	uxth.w	r6, ip
 8000b7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b82:	fb07 1114 	mls	r1, r7, r4, r1
 8000b86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8a:	fb04 f106 	mul.w	r1, r4, r6
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x64>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b9a:	f080 8112 	bcs.w	8000dc2 <__udivmoddi4+0x27e>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 810f 	bls.w	8000dc2 <__udivmoddi4+0x27e>
 8000ba4:	3c02      	subs	r4, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bba:	fb00 f606 	mul.w	r6, r0, r6
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x94>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bca:	f080 80fc 	bcs.w	8000dc6 <__udivmoddi4+0x282>
 8000bce:	429e      	cmp	r6, r3
 8000bd0:	f240 80f9 	bls.w	8000dc6 <__udivmoddi4+0x282>
 8000bd4:	4463      	add	r3, ip
 8000bd6:	3802      	subs	r0, #2
 8000bd8:	1b9b      	subs	r3, r3, r6
 8000bda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bde:	2100      	movs	r1, #0
 8000be0:	b11d      	cbz	r5, 8000bea <__udivmoddi4+0xa6>
 8000be2:	40d3      	lsrs	r3, r2
 8000be4:	2200      	movs	r2, #0
 8000be6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d905      	bls.n	8000bfe <__udivmoddi4+0xba>
 8000bf2:	b10d      	cbz	r5, 8000bf8 <__udivmoddi4+0xb4>
 8000bf4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	e7f5      	b.n	8000bea <__udivmoddi4+0xa6>
 8000bfe:	fab3 f183 	clz	r1, r3
 8000c02:	2900      	cmp	r1, #0
 8000c04:	d146      	bne.n	8000c94 <__udivmoddi4+0x150>
 8000c06:	42a3      	cmp	r3, r4
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xcc>
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	f0c0 80f0 	bcc.w	8000df0 <__udivmoddi4+0x2ac>
 8000c10:	1a86      	subs	r6, r0, r2
 8000c12:	eb64 0303 	sbc.w	r3, r4, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	2d00      	cmp	r5, #0
 8000c1a:	d0e6      	beq.n	8000bea <__udivmoddi4+0xa6>
 8000c1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c20:	e7e3      	b.n	8000bea <__udivmoddi4+0xa6>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	f040 8090 	bne.w	8000d48 <__udivmoddi4+0x204>
 8000c28:	eba1 040c 	sub.w	r4, r1, ip
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	fa1f f78c 	uxth.w	r7, ip
 8000c34:	2101      	movs	r1, #1
 8000c36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c46:	fb07 f006 	mul.w	r0, r7, r6
 8000c4a:	4298      	cmp	r0, r3
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x11c>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x11a>
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2b4>
 8000c5e:	4626      	mov	r6, r4
 8000c60:	1a1c      	subs	r4, r3, r0
 8000c62:	fa1f f38e 	uxth.w	r3, lr
 8000c66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb00 f707 	mul.w	r7, r0, r7
 8000c76:	429f      	cmp	r7, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x148>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x146>
 8000c84:	429f      	cmp	r7, r3
 8000c86:	f200 80b0 	bhi.w	8000dea <__udivmoddi4+0x2a6>
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	1bdb      	subs	r3, r3, r7
 8000c8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c92:	e7a5      	b.n	8000be0 <__udivmoddi4+0x9c>
 8000c94:	f1c1 0620 	rsb	r6, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c9e:	431f      	orrs	r7, r3
 8000ca0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ca4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ca8:	ea43 030c 	orr.w	r3, r3, ip
 8000cac:	40f4      	lsrs	r4, r6
 8000cae:	fa00 f801 	lsl.w	r8, r0, r1
 8000cb2:	0c38      	lsrs	r0, r7, #16
 8000cb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ccc:	45a1      	cmp	r9, r4
 8000cce:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x1a6>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cda:	f080 8084 	bcs.w	8000de6 <__udivmoddi4+0x2a2>
 8000cde:	45a1      	cmp	r9, r4
 8000ce0:	f240 8081 	bls.w	8000de6 <__udivmoddi4+0x2a2>
 8000ce4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce8:	443c      	add	r4, r7
 8000cea:	eba4 0409 	sub.w	r4, r4, r9
 8000cee:	fa1f f983 	uxth.w	r9, r3
 8000cf2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cf6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cfa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d02:	45a4      	cmp	ip, r4
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x1d2>
 8000d06:	193c      	adds	r4, r7, r4
 8000d08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d0c:	d267      	bcs.n	8000dde <__udivmoddi4+0x29a>
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	d965      	bls.n	8000dde <__udivmoddi4+0x29a>
 8000d12:	3b02      	subs	r3, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d1e:	eba4 040c 	sub.w	r4, r4, ip
 8000d22:	429c      	cmp	r4, r3
 8000d24:	46ce      	mov	lr, r9
 8000d26:	469c      	mov	ip, r3
 8000d28:	d351      	bcc.n	8000dce <__udivmoddi4+0x28a>
 8000d2a:	d04e      	beq.n	8000dca <__udivmoddi4+0x286>
 8000d2c:	b155      	cbz	r5, 8000d44 <__udivmoddi4+0x200>
 8000d2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d32:	eb64 040c 	sbc.w	r4, r4, ip
 8000d36:	fa04 f606 	lsl.w	r6, r4, r6
 8000d3a:	40cb      	lsrs	r3, r1
 8000d3c:	431e      	orrs	r6, r3
 8000d3e:	40cc      	lsrs	r4, r1
 8000d40:	e9c5 6400 	strd	r6, r4, [r5]
 8000d44:	2100      	movs	r1, #0
 8000d46:	e750      	b.n	8000bea <__udivmoddi4+0xa6>
 8000d48:	f1c2 0320 	rsb	r3, r2, #32
 8000d4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d54:	fa24 f303 	lsr.w	r3, r4, r3
 8000d58:	4094      	lsls	r4, r2
 8000d5a:	430c      	orrs	r4, r1
 8000d5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d76:	fb00 f107 	mul.w	r1, r0, r7
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x24c>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d86:	d22c      	bcs.n	8000de2 <__udivmoddi4+0x29e>
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d92a      	bls.n	8000de2 <__udivmoddi4+0x29e>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	4463      	add	r3, ip
 8000d90:	1a5b      	subs	r3, r3, r1
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d98:	fb08 3311 	mls	r3, r8, r1, r3
 8000d9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da0:	fb01 f307 	mul.w	r3, r1, r7
 8000da4:	42a3      	cmp	r3, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x276>
 8000da8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000db0:	d213      	bcs.n	8000dda <__udivmoddi4+0x296>
 8000db2:	42a3      	cmp	r3, r4
 8000db4:	d911      	bls.n	8000dda <__udivmoddi4+0x296>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4464      	add	r4, ip
 8000dba:	1ae4      	subs	r4, r4, r3
 8000dbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dc0:	e739      	b.n	8000c36 <__udivmoddi4+0xf2>
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	e6f0      	b.n	8000ba8 <__udivmoddi4+0x64>
 8000dc6:	4608      	mov	r0, r1
 8000dc8:	e706      	b.n	8000bd8 <__udivmoddi4+0x94>
 8000dca:	45c8      	cmp	r8, r9
 8000dcc:	d2ae      	bcs.n	8000d2c <__udivmoddi4+0x1e8>
 8000dce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dd6:	3801      	subs	r0, #1
 8000dd8:	e7a8      	b.n	8000d2c <__udivmoddi4+0x1e8>
 8000dda:	4631      	mov	r1, r6
 8000ddc:	e7ed      	b.n	8000dba <__udivmoddi4+0x276>
 8000dde:	4603      	mov	r3, r0
 8000de0:	e799      	b.n	8000d16 <__udivmoddi4+0x1d2>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e7d4      	b.n	8000d90 <__udivmoddi4+0x24c>
 8000de6:	46d6      	mov	lr, sl
 8000de8:	e77f      	b.n	8000cea <__udivmoddi4+0x1a6>
 8000dea:	4463      	add	r3, ip
 8000dec:	3802      	subs	r0, #2
 8000dee:	e74d      	b.n	8000c8c <__udivmoddi4+0x148>
 8000df0:	4606      	mov	r6, r0
 8000df2:	4623      	mov	r3, r4
 8000df4:	4608      	mov	r0, r1
 8000df6:	e70f      	b.n	8000c18 <__udivmoddi4+0xd4>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	e730      	b.n	8000c60 <__udivmoddi4+0x11c>
 8000dfe:	bf00      	nop

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <MX_CRC_Init+0x20>)
 8000e0a:	4a07      	ldr	r2, [pc, #28]	@ (8000e28 <MX_CRC_Init+0x24>)
 8000e0c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_CRC_Init+0x20>)
 8000e10:	f003 f8d7 	bl	8003fc2 <HAL_CRC_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e1a:	f000 fb7d 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000cc 	.word	0x200000cc
 8000e28:	40023000 	.word	0x40023000

08000e2c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0b      	ldr	r2, [pc, #44]	@ (8000e68 <HAL_CRC_MspInit+0x3c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d10d      	bne.n	8000e5a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <HAL_CRC_MspInit+0x40>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a09      	ldr	r2, [pc, #36]	@ (8000e6c <HAL_CRC_MspInit+0x40>)
 8000e48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <HAL_CRC_MspInit+0x40>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40023000 	.word	0x40023000
 8000e6c:	40023800 	.word	0x40023800

08000e70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f78 <MX_GPIO_Init+0x108>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a3a      	ldr	r2, [pc, #232]	@ (8000f78 <MX_GPIO_Init+0x108>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b38      	ldr	r3, [pc, #224]	@ (8000f78 <MX_GPIO_Init+0x108>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b34      	ldr	r3, [pc, #208]	@ (8000f78 <MX_GPIO_Init+0x108>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a33      	ldr	r2, [pc, #204]	@ (8000f78 <MX_GPIO_Init+0x108>)
 8000eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b31      	ldr	r3, [pc, #196]	@ (8000f78 <MX_GPIO_Init+0x108>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f78 <MX_GPIO_Init+0x108>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8000f78 <MX_GPIO_Init+0x108>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b2a      	ldr	r3, [pc, #168]	@ (8000f78 <MX_GPIO_Init+0x108>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <MX_GPIO_Init+0x108>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a25      	ldr	r2, [pc, #148]	@ (8000f78 <MX_GPIO_Init+0x108>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b23      	ldr	r3, [pc, #140]	@ (8000f78 <MX_GPIO_Init+0x108>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000efc:	481f      	ldr	r0, [pc, #124]	@ (8000f7c <MX_GPIO_Init+0x10c>)
 8000efe:	f003 fa93 	bl	8004428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS3_Pin|CS2_Pin|CS1_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000f08:	481d      	ldr	r0, [pc, #116]	@ (8000f80 <MX_GPIO_Init+0x110>)
 8000f0a:	f003 fa8d 	bl	8004428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SLEEP_GPIO_Port, SLEEP_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2108      	movs	r1, #8
 8000f12:	481c      	ldr	r0, [pc, #112]	@ (8000f84 <MX_GPIO_Init+0x114>)
 8000f14:	f003 fa88 	bl	8004428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4812      	ldr	r0, [pc, #72]	@ (8000f7c <MX_GPIO_Init+0x10c>)
 8000f32:	f003 f8f5 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS3_Pin|CS2_Pin|CS1_Pin;
 8000f36:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <MX_GPIO_Init+0x110>)
 8000f50:	f003 f8e6 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SLEEP_Pin;
 8000f54:	2308      	movs	r3, #8
 8000f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SLEEP_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4806      	ldr	r0, [pc, #24]	@ (8000f84 <MX_GPIO_Init+0x114>)
 8000f6c:	f003 f8d8 	bl	8004120 <HAL_GPIO_Init>

}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	@ 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020400 	.word	0x40020400

08000f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f002 fe71 	bl	8003c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f92:	f000 f90f 	bl	80011b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  srand(HAL_GetTick());
 8000f96:	f002 fed3 	bl	8003d40 <HAL_GetTick>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 faab 	bl	80014f8 <srand>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa2:	f7ff ff65 	bl	8000e70 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000fa6:	f002 fadb 	bl	8003560 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000faa:	f002 fb3d 	bl	8003628 <MX_TIM4_Init>
  MX_SPI2_Init();
 8000fae:	f002 f98d 	bl	80032cc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000fb2:	f002 fdbb 	bl	8003b2c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fb6:	f002 fa87 	bl	80034c8 <MX_TIM2_Init>
  MX_CRC_Init();
 8000fba:	f7ff ff23 	bl	8000e04 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000fbe:	4868      	ldr	r0, [pc, #416]	@ (8001160 <main+0x1d8>)
 8000fc0:	f004 fcdc 	bl	800597c <HAL_TIM_Base_Start_IT>
	//htim3.Instance->CCR1=50;
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4867      	ldr	r0, [pc, #412]	@ (8001164 <main+0x1dc>)
 8000fc8:	f004 fd8a 	bl	8005ae0 <HAL_TIM_PWM_Start>
	//htim4.Instance->CCR1=50;
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4866      	ldr	r0, [pc, #408]	@ (8001168 <main+0x1e0>)
 8000fd0:	f004 fd86 	bl	8005ae0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	4863      	ldr	r0, [pc, #396]	@ (8001164 <main+0x1dc>)
 8000fd8:	f004 fd82 	bl	8005ae0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8000fdc:	2104      	movs	r1, #4
 8000fde:	4862      	ldr	r0, [pc, #392]	@ (8001168 <main+0x1e0>)
 8000fe0:	f004 fd7e 	bl	8005ae0 <HAL_TIM_PWM_Start>
	//motor stuffs
	HAL_UART_Receive_IT (&huart2, Rx_data, 4);
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	4961      	ldr	r1, [pc, #388]	@ (800116c <main+0x1e4>)
 8000fe8:	4861      	ldr	r0, [pc, #388]	@ (8001170 <main+0x1e8>)
 8000fea:	f005 fd22 	bl	8006a32 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	4860      	ldr	r0, [pc, #384]	@ (8001174 <main+0x1ec>)
 8000ff4:	f003 fa18 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ffe:	485e      	ldr	r0, [pc, #376]	@ (8001178 <main+0x1f0>)
 8001000:	f003 fa12 	bl	8004428 <HAL_GPIO_WritePin>

	//HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_SET);
	//htim3.Instance->CCR1=50;
	//PID stuffs
	offset1=2.0/360;
 8001004:	495d      	ldr	r1, [pc, #372]	@ (800117c <main+0x1f4>)
 8001006:	a348      	add	r3, pc, #288	@ (adr r3, 8001128 <main+0x1a0>)
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	e9c1 2300 	strd	r2, r3, [r1]
	angle_setpoint1=180;
 8001010:	495b      	ldr	r1, [pc, #364]	@ (8001180 <main+0x1f8>)
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	4b5b      	ldr	r3, [pc, #364]	@ (8001184 <main+0x1fc>)
 8001018:	e9c1 2300 	strd	r2, r3, [r1]
	angle_setpoint2=180;
 800101c:	495a      	ldr	r1, [pc, #360]	@ (8001188 <main+0x200>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	4b58      	ldr	r3, [pc, #352]	@ (8001184 <main+0x1fc>)
 8001024:	e9c1 2300 	strd	r2, r3, [r1]
	//PID(&motor_1_PID,&rev,&PIDOut,&angle_setpoint, 2, 8, 0, _PID_P_ON_E, _PID_CD_DIRECT); //kinda fast rev
	PID(&motor_1_PID,&rev1,&PIDOut1,&angle_setpoint1, 5.7000, 57.0000, 0.1425, _PID_P_ON_E, _PID_CD_DIRECT); // first angular
 8001028:	2300      	movs	r3, #0
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	2301      	movs	r3, #1
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	ed9f 2b3f 	vldr	d2, [pc, #252]	@ 8001130 <main+0x1a8>
 8001034:	ed9f 1b40 	vldr	d1, [pc, #256]	@ 8001138 <main+0x1b0>
 8001038:	ed9f 0b41 	vldr	d0, [pc, #260]	@ 8001140 <main+0x1b8>
 800103c:	4b50      	ldr	r3, [pc, #320]	@ (8001180 <main+0x1f8>)
 800103e:	4a53      	ldr	r2, [pc, #332]	@ (800118c <main+0x204>)
 8001040:	4953      	ldr	r1, [pc, #332]	@ (8001190 <main+0x208>)
 8001042:	4854      	ldr	r0, [pc, #336]	@ (8001194 <main+0x20c>)
 8001044:	f000 fad8 	bl	80015f8 <PID>
	PID_SetMode(&motor_1_PID, _PID_MODE_AUTOMATIC);
 8001048:	2101      	movs	r1, #1
 800104a:	4852      	ldr	r0, [pc, #328]	@ (8001194 <main+0x20c>)
 800104c:	f000 fb20 	bl	8001690 <PID_SetMode>
	PID_SetSampleTime(&motor_1_PID,4);
 8001050:	2104      	movs	r1, #4
 8001052:	4850      	ldr	r0, [pc, #320]	@ (8001194 <main+0x20c>)
 8001054:	f000 fc90 	bl	8001978 <PID_SetSampleTime>
	PID_SetOutputLimits(&motor_1_PID, -100, 100);
 8001058:	ed9f 1b3b 	vldr	d1, [pc, #236]	@ 8001148 <main+0x1c0>
 800105c:	ed9f 0b3c 	vldr	d0, [pc, #240]	@ 8001150 <main+0x1c8>
 8001060:	484c      	ldr	r0, [pc, #304]	@ (8001194 <main+0x20c>)
 8001062:	f000 fb33 	bl	80016cc <PID_SetOutputLimits>
	PID(&motor_2_PID,&rev2,&PIDOut2,&angle_setpoint2, 5.7000, 57.0000, 0.1425, _PID_P_ON_E, _PID_CD_DIRECT); // first angular
 8001066:	2300      	movs	r3, #0
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2301      	movs	r3, #1
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	ed9f 2b30 	vldr	d2, [pc, #192]	@ 8001130 <main+0x1a8>
 8001072:	ed9f 1b31 	vldr	d1, [pc, #196]	@ 8001138 <main+0x1b0>
 8001076:	ed9f 0b32 	vldr	d0, [pc, #200]	@ 8001140 <main+0x1b8>
 800107a:	4b43      	ldr	r3, [pc, #268]	@ (8001188 <main+0x200>)
 800107c:	4a46      	ldr	r2, [pc, #280]	@ (8001198 <main+0x210>)
 800107e:	4947      	ldr	r1, [pc, #284]	@ (800119c <main+0x214>)
 8001080:	4847      	ldr	r0, [pc, #284]	@ (80011a0 <main+0x218>)
 8001082:	f000 fab9 	bl	80015f8 <PID>
	PID_SetMode(&motor_2_PID, _PID_MODE_AUTOMATIC);
 8001086:	2101      	movs	r1, #1
 8001088:	4845      	ldr	r0, [pc, #276]	@ (80011a0 <main+0x218>)
 800108a:	f000 fb01 	bl	8001690 <PID_SetMode>
	PID_SetSampleTime(&motor_2_PID,4);
 800108e:	2104      	movs	r1, #4
 8001090:	4843      	ldr	r0, [pc, #268]	@ (80011a0 <main+0x218>)
 8001092:	f000 fc71 	bl	8001978 <PID_SetSampleTime>
	PID_SetOutputLimits(&motor_2_PID, -100, 100);
 8001096:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 8001148 <main+0x1c0>
 800109a:	ed9f 0b2d 	vldr	d0, [pc, #180]	@ 8001150 <main+0x1c8>
 800109e:	4840      	ldr	r0, [pc, #256]	@ (80011a0 <main+0x218>)
 80010a0:	f000 fb14 	bl	80016cc <PID_SetOutputLimits>
	Moving_Average_Init(&mot1_filterStruct);
 80010a4:	483f      	ldr	r0, [pc, #252]	@ (80011a4 <main+0x21c>)
 80010a6:	f000 fa4b 	bl	8001540 <Moving_Average_Init>
	Moving_Average_Init(&mot2_filterStruct);
 80010aa:	483f      	ldr	r0, [pc, #252]	@ (80011a8 <main+0x220>)
 80010ac:	f000 fa48 	bl	8001540 <Moving_Average_Init>
	//set initial angle
	//cw(100);
	//HAL_Delay(500);
	//stop();
	HAL_UART_Transmit(&huart2, str, sizeof(str), 1000);
 80010b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b4:	2298      	movs	r2, #152	@ 0x98
 80010b6:	493d      	ldr	r1, [pc, #244]	@ (80011ac <main+0x224>)
 80010b8:	482d      	ldr	r0, [pc, #180]	@ (8001170 <main+0x1e8>)
 80010ba:	f005 fc28 	bl	800690e <HAL_UART_Transmit>
	//sprintf_min((char*)str,"test\n");//,angle2,revol2);
	HAL_UART_Transmit(&huart2,str,sizeof(str),0xff);
 80010be:	23ff      	movs	r3, #255	@ 0xff
 80010c0:	2298      	movs	r2, #152	@ 0x98
 80010c2:	493a      	ldr	r1, [pc, #232]	@ (80011ac <main+0x224>)
 80010c4:	482a      	ldr	r0, [pc, #168]	@ (8001170 <main+0x1e8>)
 80010c6:	f005 fc22 	bl	800690e <HAL_UART_Transmit>
	tle5012_Rset();
 80010ca:	f002 fd01 	bl	8003ad0 <tle5012_Rset>
	tle5012_Rset();
 80010ce:	f002 fcff 	bl	8003ad0 <tle5012_Rset>
	tle5012_Rset();
 80010d2:	f002 fcfd 	bl	8003ad0 <tle5012_Rset>
	tle5012_Rset();
 80010d6:	f002 fcfb 	bl	8003ad0 <tle5012_Rset>
	read_sensors();
 80010da:	f000 f97d 	bl	80013d8 <read_sensors>
	read_sensors();
 80010de:	f000 f97b 	bl	80013d8 <read_sensors>
	read_sensors();
 80010e2:	f000 f979 	bl	80013d8 <read_sensors>
	read_sensors();
 80010e6:	f000 f977 	bl	80013d8 <read_sensors>
	read_sensors();
 80010ea:	f000 f975 	bl	80013d8 <read_sensors>
	read_sensors();
 80010ee:	f000 f973 	bl	80013d8 <read_sensors>
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
	reset_motors();
 80010f2:	f000 f8c7 	bl	8001284 <reset_motors>
	tle5012_Rset();
 80010f6:	f002 fceb 	bl	8003ad0 <tle5012_Rset>
	HAL_Delay(3000);
 80010fa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80010fe:	f002 fe2b 	bl	8003d58 <HAL_Delay>
	angle_setpoint1=init_angle_1;
 8001102:	491f      	ldr	r1, [pc, #124]	@ (8001180 <main+0x1f8>)
 8001104:	a314      	add	r3, pc, #80	@ (adr r3, 8001158 <main+0x1d0>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	e9c1 2300 	strd	r2, r3, [r1]
	angle_setpoint2=init_angle_2;
 800110e:	491e      	ldr	r1, [pc, #120]	@ (8001188 <main+0x200>)
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b26      	ldr	r3, [pc, #152]	@ (80011b0 <main+0x228>)
 8001116:	e9c1 2300 	strd	r2, r3, [r1]
	  		}*/

	  		//sprintf_min((char*)string,"rx: %d%d%d%d%d%d \r\n",Rx_data[0],Rx_data[1],Rx_data[2],Rx_data[3],Rx_data[4],Rx_data[5]);
	  		//HAL_UART_Transmit(&huart2,string,sizeof(string),0xff);
	  		//sprintf_min((char*)string,"1: %.2f,%d,%.2f  2: %.2f,%d \r\n",angle_,revol,PIDOut,angle2,revol2);
	  read_sensors();
 800111a:	f000 f95d 	bl	80013d8 <read_sensors>
	  print_debug();
 800111e:	f000 f8cd 	bl	80012bc <print_debug>
  {
 8001122:	bf00      	nop
 8001124:	e7f9      	b.n	800111a <main+0x192>
 8001126:	bf00      	nop
 8001128:	16c16c17 	.word	0x16c16c17
 800112c:	3f76c16c 	.word	0x3f76c16c
 8001130:	a3d70a3d 	.word	0xa3d70a3d
 8001134:	3fc23d70 	.word	0x3fc23d70
 8001138:	00000000 	.word	0x00000000
 800113c:	404c8000 	.word	0x404c8000
 8001140:	cccccccd 	.word	0xcccccccd
 8001144:	4016cccc 	.word	0x4016cccc
 8001148:	00000000 	.word	0x00000000
 800114c:	40590000 	.word	0x40590000
 8001150:	00000000 	.word	0x00000000
 8001154:	c0590000 	.word	0xc0590000
 8001158:	47ae147b 	.word	0x47ae147b
 800115c:	4032fae1 	.word	0x4032fae1
 8001160:	200002c4 	.word	0x200002c4
 8001164:	2000030c 	.word	0x2000030c
 8001168:	20000354 	.word	0x20000354
 800116c:	20000200 	.word	0x20000200
 8001170:	2000039c 	.word	0x2000039c
 8001174:	40020400 	.word	0x40020400
 8001178:	40020800 	.word	0x40020800
 800117c:	200001e8 	.word	0x200001e8
 8001180:	200001e0 	.word	0x200001e0
 8001184:	40668000 	.word	0x40668000
 8001188:	200001f8 	.word	0x200001f8
 800118c:	200001d8 	.word	0x200001d8
 8001190:	200000e8 	.word	0x200000e8
 8001194:	200000f8 	.word	0x200000f8
 8001198:	200001f0 	.word	0x200001f0
 800119c:	200000f0 	.word	0x200000f0
 80011a0:	20000168 	.word	0x20000168
 80011a4:	2000020c 	.word	0x2000020c
 80011a8:	2000023c 	.word	0x2000023c
 80011ac:	20000000 	.word	0x20000000
 80011b0:	40324000 	.word	0x40324000

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b094      	sub	sp, #80	@ 0x50
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	2230      	movs	r2, #48	@ 0x30
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f006 fbd4 	bl	8007970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	4b27      	ldr	r3, [pc, #156]	@ (800127c <SystemClock_Config+0xc8>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	4a26      	ldr	r2, [pc, #152]	@ (800127c <SystemClock_Config+0xc8>)
 80011e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e8:	4b24      	ldr	r3, [pc, #144]	@ (800127c <SystemClock_Config+0xc8>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	4b21      	ldr	r3, [pc, #132]	@ (8001280 <SystemClock_Config+0xcc>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a20      	ldr	r2, [pc, #128]	@ (8001280 <SystemClock_Config+0xcc>)
 80011fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <SystemClock_Config+0xcc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001210:	2301      	movs	r3, #1
 8001212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001214:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121a:	2302      	movs	r3, #2
 800121c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800121e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001224:	2304      	movs	r3, #4
 8001226:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001228:	2364      	movs	r3, #100	@ 0x64
 800122a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800122c:	2302      	movs	r3, #2
 800122e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001230:	2304      	movs	r3, #4
 8001232:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	4618      	mov	r0, r3
 800123a:	f003 f90f 	bl	800445c <HAL_RCC_OscConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001244:	f000 f968 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001248:	230f      	movs	r3, #15
 800124a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124c:	2302      	movs	r3, #2
 800124e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001254:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	2103      	movs	r1, #3
 8001264:	4618      	mov	r0, r3
 8001266:	f003 fb71 	bl	800494c <HAL_RCC_ClockConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001270:	f000 f952 	bl	8001518 <Error_Handler>
  }
}
 8001274:	bf00      	nop
 8001276:	3750      	adds	r7, #80	@ 0x50
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	40007000 	.word	0x40007000

08001284 <reset_motors>:
	htim4.Instance->CCR1=100;
	htim4.Instance->CCR2=100;
	//htim4.Instance->CCR1=0;
}
void reset_motors()
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1=0;
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <reset_motors+0x30>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2200      	movs	r2, #0
 800128e:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2=0;
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <reset_motors+0x30>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	639a      	str	r2, [r3, #56]	@ 0x38
	htim4.Instance->CCR1=0;
 8001298:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <reset_motors+0x34>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	635a      	str	r2, [r3, #52]	@ 0x34
	htim4.Instance->CCR2=0;
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <reset_motors+0x34>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000030c 	.word	0x2000030c
 80012b8:	20000354 	.word	0x20000354

080012bc <print_debug>:
			num=-num;
		}
	return num;
}
void print_debug()
{
 80012bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012c0:	ed2d 8b04 	vpush	{d8-d9}
 80012c4:	b09f      	sub	sp, #124	@ 0x7c
 80012c6:	af16      	add	r7, sp, #88	@ 0x58

	sprintf_min((char*)str,"%.2f,%.2f,%.3f,%.3f,%.5f,%.5f,%d,%d,%.2f,%.2f,%.2f,%.2f,%d \r\n",angle_,angle2,rev1,rev2,rev_rp1,rev_rp2,revol1,revol2,PIDOut1,PIDOut2,angle_setpoint1,angle_setpoint2,osc_state);//r_abs(rev1-angle_setpoint1));
 80012c8:	4b33      	ldr	r3, [pc, #204]	@ (8001398 <print_debug+0xdc>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f8e7 	bl	80004a0 <__aeabi_f2d>
 80012d2:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80012d6:	4b31      	ldr	r3, [pc, #196]	@ (800139c <print_debug+0xe0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f8e0 	bl	80004a0 <__aeabi_f2d>
 80012e0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80012e4:	4b2e      	ldr	r3, [pc, #184]	@ (80013a0 <print_debug+0xe4>)
 80012e6:	ed93 8b00 	vldr	d8, [r3]
 80012ea:	4b2e      	ldr	r3, [pc, #184]	@ (80013a4 <print_debug+0xe8>)
 80012ec:	ed93 9b00 	vldr	d9, [r3]
 80012f0:	4b2d      	ldr	r3, [pc, #180]	@ (80013a8 <print_debug+0xec>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f8d3 	bl	80004a0 <__aeabi_f2d>
 80012fa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80012fe:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <print_debug+0xf0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f8cc 	bl	80004a0 <__aeabi_f2d>
 8001308:	e9c7 0100 	strd	r0, r1, [r7]
 800130c:	4b28      	ldr	r3, [pc, #160]	@ (80013b0 <print_debug+0xf4>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	461e      	mov	r6, r3
 8001314:	4b27      	ldr	r3, [pc, #156]	@ (80013b4 <print_debug+0xf8>)
 8001316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131a:	461a      	mov	r2, r3
 800131c:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <print_debug+0xfc>)
 800131e:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001322:	4b26      	ldr	r3, [pc, #152]	@ (80013bc <print_debug+0x100>)
 8001324:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001328:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <print_debug+0x104>)
 800132a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800132e:	4b25      	ldr	r3, [pc, #148]	@ (80013c4 <print_debug+0x108>)
 8001330:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001334:	4b24      	ldr	r3, [pc, #144]	@ (80013c8 <print_debug+0x10c>)
 8001336:	f993 3000 	ldrsb.w	r3, [r3]
 800133a:	9314      	str	r3, [sp, #80]	@ 0x50
 800133c:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8001340:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8001344:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8001348:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800134c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800134e:	960a      	str	r6, [sp, #40]	@ 0x28
 8001350:	ed97 7b00 	vldr	d7, [r7]
 8001354:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001358:	ed97 7b02 	vldr	d7, [r7, #8]
 800135c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001360:	ed8d 9b04 	vstr	d9, [sp, #16]
 8001364:	ed8d 8b02 	vstr	d8, [sp, #8]
 8001368:	ed97 7b04 	vldr	d7, [r7, #16]
 800136c:	ed8d 7b00 	vstr	d7, [sp]
 8001370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001374:	4915      	ldr	r1, [pc, #84]	@ (80013cc <print_debug+0x110>)
 8001376:	4816      	ldr	r0, [pc, #88]	@ (80013d0 <print_debug+0x114>)
 8001378:	f001 ff8c 	bl	8003294 <sprintf_>
	HAL_UART_Transmit(&huart2,str,sizeof(str),0xff);
 800137c:	23ff      	movs	r3, #255	@ 0xff
 800137e:	2298      	movs	r2, #152	@ 0x98
 8001380:	4913      	ldr	r1, [pc, #76]	@ (80013d0 <print_debug+0x114>)
 8001382:	4814      	ldr	r0, [pc, #80]	@ (80013d4 <print_debug+0x118>)
 8001384:	f005 fac3 	bl	800690e <HAL_UART_Transmit>
}
 8001388:	bf00      	nop
 800138a:	3724      	adds	r7, #36	@ 0x24
 800138c:	46bd      	mov	sp, r7
 800138e:	ecbd 8b04 	vpop	{d8-d9}
 8001392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001396:	bf00      	nop
 8001398:	200000e0 	.word	0x200000e0
 800139c:	200000e4 	.word	0x200000e4
 80013a0:	200000e8 	.word	0x200000e8
 80013a4:	200000f0 	.word	0x200000f0
 80013a8:	200000d8 	.word	0x200000d8
 80013ac:	200000dc 	.word	0x200000dc
 80013b0:	200000d4 	.word	0x200000d4
 80013b4:	200000d6 	.word	0x200000d6
 80013b8:	200001d8 	.word	0x200001d8
 80013bc:	200001f0 	.word	0x200001f0
 80013c0:	200001e0 	.word	0x200001e0
 80013c4:	200001f8 	.word	0x200001f8
 80013c8:	2000009c 	.word	0x2000009c
 80013cc:	080079e0 	.word	0x080079e0
 80013d0:	20000000 	.word	0x20000000
 80013d4:	2000039c 	.word	0x2000039c

080013d8 <read_sensors>:
void read_sensors()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	angle_ = tle5012_ReadAngle();//Moving_Average_Compute(,&mot1_filterStruct);
 80013dc:	f002 fa48 	bl	8003870 <tle5012_ReadAngle>
 80013e0:	eef0 7a40 	vmov.f32	s15, s0
 80013e4:	4b3b      	ldr	r3, [pc, #236]	@ (80014d4 <read_sensors+0xfc>)
 80013e6:	edc3 7a00 	vstr	s15, [r3]
	tle5012_ReadAngle2(&angle2);
 80013ea:	483b      	ldr	r0, [pc, #236]	@ (80014d8 <read_sensors+0x100>)
 80013ec:	f002 fa84 	bl	80038f8 <tle5012_ReadAngle2>
	//angle2=Moving_Average_Compute(angle2,&mot2_filterStruct);
	revol1 = tle5012_ReadRevol(0);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f002 fac5 	bl	8003980 <tle5012_ReadRevol>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b38      	ldr	r3, [pc, #224]	@ (80014dc <read_sensors+0x104>)
 80013fc:	801a      	strh	r2, [r3, #0]
	revol2 = tle5012_ReadRevol2(0);
 80013fe:	2000      	movs	r0, #0
 8001400:	f002 fb12 	bl	8003a28 <tle5012_ReadRevol2>
 8001404:	4603      	mov	r3, r0
 8001406:	b21a      	sxth	r2, r3
 8001408:	4b35      	ldr	r3, [pc, #212]	@ (80014e0 <read_sensors+0x108>)
 800140a:	801a      	strh	r2, [r3, #0]
	rev1=(revol1+(angle_/360))*360;
 800140c:	4b33      	ldr	r3, [pc, #204]	@ (80014dc <read_sensors+0x104>)
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800141a:	4b2e      	ldr	r3, [pc, #184]	@ (80014d4 <read_sensors+0xfc>)
 800141c:	edd3 6a00 	vldr	s13, [r3]
 8001420:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 80014e4 <read_sensors+0x10c>
 8001424:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80014e4 <read_sensors+0x10c>
 8001430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001434:	ee17 0a90 	vmov	r0, s15
 8001438:	f7ff f832 	bl	80004a0 <__aeabi_f2d>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4929      	ldr	r1, [pc, #164]	@ (80014e8 <read_sensors+0x110>)
 8001442:	e9c1 2300 	strd	r2, r3, [r1]
	rev2=(revol2+(angle2/360))*360;
 8001446:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <read_sensors+0x108>)
 8001448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <read_sensors+0x100>)
 8001456:	edd3 6a00 	vldr	s13, [r3]
 800145a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80014e4 <read_sensors+0x10c>
 800145e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001466:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80014e4 <read_sensors+0x10c>
 800146a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146e:	ee17 0a90 	vmov	r0, s15
 8001472:	f7ff f815 	bl	80004a0 <__aeabi_f2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	491c      	ldr	r1, [pc, #112]	@ (80014ec <read_sensors+0x114>)
 800147c:	e9c1 2300 	strd	r2, r3, [r1]
	rev_rp1=(revol1+(angle_/360));
 8001480:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <read_sensors+0x104>)
 8001482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <read_sensors+0xfc>)
 8001490:	edd3 6a00 	vldr	s13, [r3]
 8001494:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80014e4 <read_sensors+0x10c>
 8001498:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <read_sensors+0x118>)
 80014a2:	edc3 7a00 	vstr	s15, [r3]
	rev_rp2=(revol2+(angle2/360));
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <read_sensors+0x108>)
 80014a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ac:	ee07 3a90 	vmov	s15, r3
 80014b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014b4:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <read_sensors+0x100>)
 80014b6:	edd3 6a00 	vldr	s13, [r3]
 80014ba:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 80014e4 <read_sensors+0x10c>
 80014be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80014c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <read_sensors+0x11c>)
 80014c8:	edc3 7a00 	vstr	s15, [r3]
	print_debug();
 80014cc:	f7ff fef6 	bl	80012bc <print_debug>
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200000e0 	.word	0x200000e0
 80014d8:	200000e4 	.word	0x200000e4
 80014dc:	200000d4 	.word	0x200000d4
 80014e0:	200000d6 	.word	0x200000d6
 80014e4:	43b40000 	.word	0x43b40000
 80014e8:	200000e8 	.word	0x200000e8
 80014ec:	200000f0 	.word	0x200000f0
 80014f0:	200000d8 	.word	0x200000d8
 80014f4:	200000dc 	.word	0x200000dc

080014f8 <srand>:
				}
	}

}

void srand(uint32_t s) {
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    seed = s;
 8001500:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <srand+0x1c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000098 	.word	0x20000098

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(10);
 8001520:	200a      	movs	r0, #10
 8001522:	f002 fc19 	bl	8003d58 <HAL_Delay>
	  HAL_UART_Transmit(&huart2,str,sizeof(str),1000);
 8001526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152a:	2298      	movs	r2, #152	@ 0x98
 800152c:	4902      	ldr	r1, [pc, #8]	@ (8001538 <Error_Handler+0x20>)
 800152e:	4803      	ldr	r0, [pc, #12]	@ (800153c <Error_Handler+0x24>)
 8001530:	f005 f9ed 	bl	800690e <HAL_UART_Transmit>
	  HAL_Delay(10);
 8001534:	bf00      	nop
 8001536:	e7f3      	b.n	8001520 <Error_Handler+0x8>
 8001538:	20000000 	.word	0x20000000
 800153c:	2000039c 	.word	0x2000039c

08001540 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	filter_struct->Sum = 0;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	629a      	str	r2, [r3, #40]	@ 0x28
	filter_struct->WindowPointer = 0;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	62da      	str	r2, [r3, #44]	@ 0x2c
	
	for(uint32_t i=0; i<WindowLength; i++)
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	e007      	b.n	800156c <Moving_Average_Init+0x2c>
	{
		filter_struct->History[i] = 0;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	2100      	movs	r1, #0
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint32_t i=0; i<WindowLength; i++)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3301      	adds	r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b09      	cmp	r3, #9
 8001570:	d9f4      	bls.n	800155c <Moving_Average_Init+0x1c>
	}
}
 8001572:	bf00      	nop
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80015b0:	f7ff fa5e 	bl	8000a70 <__aeabi_dcmpgt>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 80015c6:	e011      	b.n	80015ec <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80015d4:	f7ff fa2e 	bl	8000a34 <__aeabi_dcmplt>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d100      	bne.n	80015e0 <PID_Init+0x60>
}
 80015de:	e005      	b.n	80015ec <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	0000      	movs	r0, r0
	...

080015f8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	@ 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6278      	str	r0, [r7, #36]	@ 0x24
 8001600:	6239      	str	r1, [r7, #32]
 8001602:	61fa      	str	r2, [r7, #28]
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	ed87 0b04 	vstr	d0, [r7, #16]
 800160a:	ed87 1b02 	vstr	d1, [r7, #8]
 800160e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	6a3a      	ldr	r2, [r7, #32]
 800161c:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001626:	2200      	movs	r2, #0
 8001628:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800162a:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8001680 <PID+0x88>
 800162e:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001688 <PID+0x90>
 8001632:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001634:	f000 f84a 	bl	80016cc <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163a:	2264      	movs	r2, #100	@ 0x64
 800163c:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 800163e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001642:	4619      	mov	r1, r3
 8001644:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001646:	f000 f957 	bl	80018f8 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800164a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800164e:	4619      	mov	r1, r3
 8001650:	ed97 2b00 	vldr	d2, [r7]
 8001654:	ed97 1b02 	vldr	d1, [r7, #8]
 8001658:	ed97 0b04 	vldr	d0, [r7, #16]
 800165c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800165e:	f000 f8a3 	bl	80017a8 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8001662:	f002 fb6d 	bl	8003d40 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	1ad2      	subs	r2, r2, r3
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	605a      	str	r2, [r3, #4]
	
}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	@ 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	f3af 8000 	nop.w
 8001680:	00000000 	.word	0x00000000
 8001684:	406fe000 	.word	0x406fe000
	...

08001690 <PID_SetMode>:
	
}

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	bf0c      	ite	eq
 80016a2:	2301      	moveq	r3, #1
 80016a4:	2300      	movne	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d006      	beq.n	80016be <PID_SetMode+0x2e>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff61 	bl	8001580 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	705a      	strb	r2, [r3, #1]
	
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6178      	str	r0, [r7, #20]
 80016d4:	ed87 0b02 	vstr	d0, [r7, #8]
 80016d8:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80016dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016e4:	f7ff f9ba 	bl	8000a5c <__aeabi_dcmpge>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d158      	bne.n	80017a0 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 80016ee:	6979      	ldr	r1, [r7, #20]
 80016f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016f4:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 80016f8:	6979      	ldr	r1, [r7, #20]
 80016fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016fe:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	785b      	ldrb	r3, [r3, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d04b      	beq.n	80017a2 <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001718:	f7ff f9aa 	bl	8000a70 <__aeabi_dcmpgt>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800172c:	e9c1 2300 	strd	r2, r3, [r1]
 8001730:	e012      	b.n	8001758 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	e9d3 0100 	ldrd	r0, r1, [r3]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001740:	f7ff f978 	bl	8000a34 <__aeabi_dcmplt>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001754:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001764:	f7ff f984 	bl	8000a70 <__aeabi_dcmpgt>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8001774:	6979      	ldr	r1, [r7, #20]
 8001776:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800177a:	e012      	b.n	80017a2 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001788:	f7ff f954 	bl	8000a34 <__aeabi_dcmplt>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001798:	6979      	ldr	r1, [r7, #20]
 800179a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800179e:	e000      	b.n	80017a2 <PID_SetOutputLimits+0xd6>
		return;
 80017a0:	bf00      	nop
		}
		else { }
		
	}
	
}
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	61f8      	str	r0, [r7, #28]
 80017b0:	ed87 0b04 	vstr	d0, [r7, #16]
 80017b4:	ed87 1b02 	vstr	d1, [r7, #8]
 80017b8:	ed87 2b00 	vstr	d2, [r7]
 80017bc:	460b      	mov	r3, r1
 80017be:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017cc:	f7ff f932 	bl	8000a34 <__aeabi_dcmplt>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 8089 	bne.w	80018ea <PID_SetTunings2+0x142>
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017e4:	f7ff f926 	bl	8000a34 <__aeabi_dcmplt>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d17d      	bne.n	80018ea <PID_SetTunings2+0x142>
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017fa:	f7ff f91b 	bl	8000a34 <__aeabi_dcmplt>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d172      	bne.n	80018ea <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	7efa      	ldrb	r2, [r7, #27]
 8001808:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800180a:	7efb      	ldrb	r3, [r7, #27]
 800180c:	2b01      	cmp	r3, #1
 800180e:	bf0c      	ite	eq
 8001810:	2301      	moveq	r3, #1
 8001812:	2300      	movne	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 800181c:	69f9      	ldr	r1, [r7, #28]
 800181e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001822:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001826:	69f9      	ldr	r1, [r7, #28]
 8001828:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800182c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001830:	69f9      	ldr	r1, [r7, #28]
 8001832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001836:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe0c 	bl	800045c <__aeabi_ui2d>
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	4b2a      	ldr	r3, [pc, #168]	@ (80018f4 <PID_SetTunings2+0x14c>)
 800184a:	f7fe ffab 	bl	80007a4 <__aeabi_ddiv>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8001856:	69f9      	ldr	r1, [r7, #28]
 8001858:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800185c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001860:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001864:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001868:	f7fe fe72 	bl	8000550 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	69f9      	ldr	r1, [r7, #28]
 8001872:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001876:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800187a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800187e:	f7fe ff91 	bl	80007a4 <__aeabi_ddiv>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	69f9      	ldr	r1, [r7, #28]
 8001888:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	78db      	ldrb	r3, [r3, #3]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d12b      	bne.n	80018ec <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800189a:	f04f 0000 	mov.w	r0, #0
 800189e:	f04f 0100 	mov.w	r1, #0
 80018a2:	f7fe fc9d 	bl	80001e0 <__aeabi_dsub>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	69f9      	ldr	r1, [r7, #28]
 80018ac:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018b6:	f04f 0000 	mov.w	r0, #0
 80018ba:	f04f 0100 	mov.w	r1, #0
 80018be:	f7fe fc8f 	bl	80001e0 <__aeabi_dsub>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	69f9      	ldr	r1, [r7, #28]
 80018c8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80018d2:	f04f 0000 	mov.w	r0, #0
 80018d6:	f04f 0100 	mov.w	r1, #0
 80018da:	f7fe fc81 	bl	80001e0 <__aeabi_dsub>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	69f9      	ldr	r1, [r7, #28]
 80018e4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 80018e8:	e000      	b.n	80018ec <PID_SetTunings2+0x144>
		return;
 80018ea:	bf00      	nop
		
	}
	
}
 80018ec:	3728      	adds	r7, #40	@ 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	408f4000 	.word	0x408f4000

080018f8 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	785b      	ldrb	r3, [r3, #1]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d02e      	beq.n	800196a <PID_SetControllerDirection+0x72>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	78db      	ldrb	r3, [r3, #3]
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	429a      	cmp	r2, r3
 8001914:	d029      	beq.n	800196a <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800191c:	f04f 0000 	mov.w	r0, #0
 8001920:	f04f 0100 	mov.w	r1, #0
 8001924:	f7fe fc5c 	bl	80001e0 <__aeabi_dsub>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001938:	f04f 0000 	mov.w	r0, #0
 800193c:	f04f 0100 	mov.w	r1, #0
 8001940:	f7fe fc4e 	bl	80001e0 <__aeabi_dsub>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001954:	f04f 0000 	mov.w	r0, #0
 8001958:	f04f 0100 	mov.w	r1, #0
 800195c:	f7fe fc40 	bl	80001e0 <__aeabi_dsub>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	70da      	strb	r2, [r3, #3]
	
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001978:	b5b0      	push	{r4, r5, r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	dd2e      	ble.n	80019e6 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001988:	6838      	ldr	r0, [r7, #0]
 800198a:	f7fe fd77 	bl	800047c <__aeabi_i2d>
 800198e:	4604      	mov	r4, r0
 8001990:	460d      	mov	r5, r1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fd60 	bl	800045c <__aeabi_ui2d>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4620      	mov	r0, r4
 80019a2:	4629      	mov	r1, r5
 80019a4:	f7fe fefe 	bl	80007a4 <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80019b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ba:	f7fe fdc9 	bl	8000550 <__aeabi_dmul>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80019ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019d2:	f7fe fee7 	bl	80007a4 <__aeabi_ddiv>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	609a      	str	r2, [r3, #8]
		
	}
	
}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}

080019ee <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4603      	mov	r3, r0
 80019fc:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d204      	bcs.n	8001a10 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	7bfa      	ldrb	r2, [r7, #15]
 8001a0e:	701a      	strb	r2, [r3, #0]
  }
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	4603      	mov	r3, r0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	e002      	b.n	8001a4e <_strnlen_s+0x16>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <_strnlen_s+0x28>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	1e5a      	subs	r2, r3, #1
 8001a5a:	603a      	str	r2, [r7, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f3      	bne.n	8001a48 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	1ad3      	subs	r3, r2, r3
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a80:	d904      	bls.n	8001a8c <_is_digit+0x1a>
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b39      	cmp	r3, #57	@ 0x39
 8001a86:	d801      	bhi.n	8001a8c <_is_digit+0x1a>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <_is_digit+0x1c>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001aac:	e00e      	b.n	8001acc <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4618      	mov	r0, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	1c59      	adds	r1, r3, #1
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6011      	str	r1, [r2, #0]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	4403      	add	r3, r0
 8001ac8:	3b30      	subs	r3, #48	@ 0x30
 8001aca:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ffcd 	bl	8001a72 <_is_digit>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1e7      	bne.n	8001aae <_atoi+0xe>
  }
  return i;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d125      	bne.n	8001b50 <_out_rev+0x68>
 8001b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d120      	bne.n	8001b50 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8001b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	e00a      	b.n	8001b2a <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	1c53      	adds	r3, r2, #1
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	68fc      	ldr	r4, [r7, #12]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68b9      	ldr	r1, [r7, #8]
 8001b20:	2020      	movs	r0, #32
 8001b22:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3301      	adds	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3f0      	bcc.n	8001b14 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8001b32:	e00d      	b.n	8001b50 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8001b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b36:	3b01      	subs	r3, #1
 8001b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b3e:	4413      	add	r3, r2
 8001b40:	7818      	ldrb	r0, [r3, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	1c53      	adds	r3, r2, #1
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	68fc      	ldr	r4, [r7, #12]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	47a0      	blx	r4
  while (len) {
 8001b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ee      	bne.n	8001b34 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00e      	beq.n	8001b7e <_out_rev+0x96>
    while (idx - start_idx < width) {
 8001b60:	e007      	b.n	8001b72 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	1c53      	adds	r3, r2, #1
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	68fc      	ldr	r4, [r7, #12]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	2020      	movs	r0, #32
 8001b70:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d8f1      	bhi.n	8001b62 <_out_rev+0x7a>
    }
  }

  return idx;
 8001b7e:	687b      	ldr	r3, [r7, #4]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	371c      	adds	r7, #28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}

08001b88 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af04      	add	r7, sp, #16
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d136      	bne.n	8001c0e <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d018      	beq.n	8001bd8 <_ntoa_format+0x50>
 8001ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d013      	beq.n	8001bd8 <_ntoa_format+0x50>
 8001bb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d104      	bne.n	8001bc2 <_ntoa_format+0x3a>
 8001bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00a      	beq.n	8001bd8 <_ntoa_format+0x50>
      width--;
 8001bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001bc8:	e006      	b.n	8001bd8 <_ntoa_format+0x50>
      buf[len++] = '0';
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	61fa      	str	r2, [r7, #28]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2230      	movs	r2, #48	@ 0x30
 8001bd6:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d20a      	bcs.n	8001bf6 <_ntoa_format+0x6e>
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b1f      	cmp	r3, #31
 8001be4:	d9f1      	bls.n	8001bca <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001be6:	e006      	b.n	8001bf6 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	61fa      	str	r2, [r7, #28]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2230      	movs	r2, #48	@ 0x30
 8001bf4:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d006      	beq.n	8001c0e <_ntoa_format+0x86>
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d202      	bcs.n	8001c0e <_ntoa_format+0x86>
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b1f      	cmp	r3, #31
 8001c0c:	d9ec      	bls.n	8001be8 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d058      	beq.n	8001cca <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <_ntoa_format+0xc8>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <_ntoa_format+0xc8>
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d003      	beq.n	8001c38 <_ntoa_format+0xb0>
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d10b      	bne.n	8001c50 <_ntoa_format+0xc8>
      len--;
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <_ntoa_format+0xc8>
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	2b10      	cmp	r3, #16
 8001c48:	d102      	bne.n	8001c50 <_ntoa_format+0xc8>
        len--;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	2b10      	cmp	r3, #16
 8001c54:	d10f      	bne.n	8001c76 <_ntoa_format+0xee>
 8001c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c58:	f003 0320 	and.w	r3, r3, #32
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10a      	bne.n	8001c76 <_ntoa_format+0xee>
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b1f      	cmp	r3, #31
 8001c64:	d807      	bhi.n	8001c76 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	61fa      	str	r2, [r7, #28]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4413      	add	r3, r2
 8001c70:	2278      	movs	r2, #120	@ 0x78
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e01f      	b.n	8001cb6 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	2b10      	cmp	r3, #16
 8001c7a:	d10f      	bne.n	8001c9c <_ntoa_format+0x114>
 8001c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00a      	beq.n	8001c9c <_ntoa_format+0x114>
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	2b1f      	cmp	r3, #31
 8001c8a:	d807      	bhi.n	8001c9c <_ntoa_format+0x114>
      buf[len++] = 'X';
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	61fa      	str	r2, [r7, #28]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4413      	add	r3, r2
 8001c96:	2258      	movs	r2, #88	@ 0x58
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	e00c      	b.n	8001cb6 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d109      	bne.n	8001cb6 <_ntoa_format+0x12e>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	2b1f      	cmp	r3, #31
 8001ca6:	d806      	bhi.n	8001cb6 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	61fa      	str	r2, [r7, #28]
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	2262      	movs	r2, #98	@ 0x62
 8001cb4:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	2b1f      	cmp	r3, #31
 8001cba:	d806      	bhi.n	8001cca <_ntoa_format+0x142>
      buf[len++] = '0';
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	61fa      	str	r2, [r7, #28]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	2230      	movs	r2, #48	@ 0x30
 8001cc8:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	d824      	bhi.n	8001d1a <_ntoa_format+0x192>
    if (negative) {
 8001cd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <_ntoa_format+0x160>
      buf[len++] = '-';
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	61fa      	str	r2, [r7, #28]
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	222d      	movs	r2, #45	@ 0x2d
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	e018      	b.n	8001d1a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8001ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	61fa      	str	r2, [r7, #28]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	222b      	movs	r2, #43	@ 0x2b
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e00b      	b.n	8001d1a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <_ntoa_format+0x192>
      buf[len++] = ' ';
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	61fa      	str	r2, [r7, #28]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4413      	add	r3, r2
 8001d16:	2220      	movs	r2, #32
 8001d18:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d1c:	9303      	str	r3, [sp, #12]
 8001d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	68b9      	ldr	r1, [r7, #8]
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f7ff fed9 	bl	8001ae8 <_out_rev>
 8001d36:	4603      	mov	r3, r0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b096      	sub	sp, #88	@ 0x58
 8001d44:	af08      	add	r7, sp, #32
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8001d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d103      	bne.n	8001d60 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5a:	f023 0310 	bic.w	r3, r3, #16
 8001d5e:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <_ntoa_long+0x30>
 8001d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d032      	beq.n	8001dd6 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8001d70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d74:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d78:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001d7a:	fb01 f202 	mul.w	r2, r1, r2
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001d84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d88:	2b09      	cmp	r3, #9
 8001d8a:	d804      	bhi.n	8001d96 <_ntoa_long+0x56>
 8001d8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d90:	3330      	adds	r3, #48	@ 0x30
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	e00d      	b.n	8001db2 <_ntoa_long+0x72>
 8001d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <_ntoa_long+0x64>
 8001da0:	2241      	movs	r2, #65	@ 0x41
 8001da2:	e000      	b.n	8001da6 <_ntoa_long+0x66>
 8001da4:	2261      	movs	r2, #97	@ 0x61
 8001da6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001daa:	4413      	add	r3, r2
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	3b0a      	subs	r3, #10
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001db4:	1c59      	adds	r1, r3, #1
 8001db6:	6379      	str	r1, [r7, #52]	@ 0x34
 8001db8:	3338      	adds	r3, #56	@ 0x38
 8001dba:	443b      	add	r3, r7
 8001dbc:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001dc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <_ntoa_long+0x96>
 8001dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dd2:	2b1f      	cmp	r3, #31
 8001dd4:	d9cc      	bls.n	8001d70 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd8:	9306      	str	r3, [sp, #24]
 8001dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ddc:	9305      	str	r3, [sp, #20]
 8001dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001de0:	9304      	str	r3, [sp, #16]
 8001de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001de4:	9303      	str	r3, [sp, #12]
 8001de6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001dea:	9302      	str	r3, [sp, #8]
 8001dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f7ff fec3 	bl	8001b88 <_ntoa_format>
 8001e02:	4603      	mov	r3, r0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3738      	adds	r7, #56	@ 0x38
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b096      	sub	sp, #88	@ 0x58
 8001e10:	af08      	add	r7, sp, #32
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8001e1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e22:	4313      	orrs	r3, r2
 8001e24:	d103      	bne.n	8001e2e <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8001e26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e28:	f023 0310 	bic.w	r3, r3, #16
 8001e2c:	663b      	str	r3, [r7, #96]	@ 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001e2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <_ntoa_long_long+0x34>
 8001e38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	d037      	beq.n	8001eb0 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8001e40:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001e44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e48:	f7fe fe64 	bl	8000b14 <__aeabi_uldivmod>
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001e52:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e56:	2b09      	cmp	r3, #9
 8001e58:	d804      	bhi.n	8001e64 <_ntoa_long_long+0x58>
 8001e5a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e5e:	3330      	adds	r3, #48	@ 0x30
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	e00d      	b.n	8001e80 <_ntoa_long_long+0x74>
 8001e64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <_ntoa_long_long+0x66>
 8001e6e:	2241      	movs	r2, #65	@ 0x41
 8001e70:	e000      	b.n	8001e74 <_ntoa_long_long+0x68>
 8001e72:	2261      	movs	r2, #97	@ 0x61
 8001e74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e78:	4413      	add	r3, r2
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3b0a      	subs	r3, #10
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e82:	1c59      	adds	r1, r3, #1
 8001e84:	6379      	str	r1, [r7, #52]	@ 0x34
 8001e86:	3338      	adds	r3, #56	@ 0x38
 8001e88:	443b      	add	r3, r7
 8001e8a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001e8e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e92:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001e96:	f7fe fe3d 	bl	8000b14 <__aeabi_uldivmod>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001ea2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	d002      	beq.n	8001eb0 <_ntoa_long_long+0xa4>
 8001eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eac:	2b1f      	cmp	r3, #31
 8001eae:	d9c7      	bls.n	8001e40 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001eb2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001eb4:	9206      	str	r2, [sp, #24]
 8001eb6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001eb8:	9205      	str	r2, [sp, #20]
 8001eba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ebc:	9204      	str	r2, [sp, #16]
 8001ebe:	9303      	str	r3, [sp, #12]
 8001ec0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001ec4:	9302      	str	r3, [sp, #8]
 8001ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	f107 0310 	add.w	r3, r7, #16
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f7ff fe56 	bl	8001b88 <_ntoa_format>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3738      	adds	r7, #56	@ 0x38
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b09d      	sub	sp, #116	@ 0x74
 8001eec:	af04      	add	r7, sp, #16
 8001eee:	6178      	str	r0, [r7, #20]
 8001ef0:	6139      	str	r1, [r7, #16]
 8001ef2:	60fa      	str	r2, [r7, #12]
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  double diff = 0.0;
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8001f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f12:	f7fe fd85 	bl	8000a20 <__aeabi_dcmpeq>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10f      	bne.n	8001f3c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f1e:	9303      	str	r3, [sp, #12]
 8001f20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f22:	9302      	str	r3, [sp, #8]
 8001f24:	2303      	movs	r3, #3
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	4ba7      	ldr	r3, [pc, #668]	@ (80021c8 <_ftoa+0x2e0>)
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	6939      	ldr	r1, [r7, #16]
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff fdd8 	bl	8001ae8 <_out_rev>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	e222      	b.n	8002382 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 8001f44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f48:	f7fe fd74 	bl	8000a34 <__aeabi_dcmplt>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00f      	beq.n	8001f72 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001f52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f54:	9303      	str	r3, [sp, #12]
 8001f56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f58:	9302      	str	r3, [sp, #8]
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	4b9b      	ldr	r3, [pc, #620]	@ (80021cc <_ftoa+0x2e4>)
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	6939      	ldr	r1, [r7, #16]
 8001f68:	6978      	ldr	r0, [r7, #20]
 8001f6a:	f7ff fdbd 	bl	8001ae8 <_out_rev>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	e207      	b.n	8002382 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8001f72:	f04f 32ff 	mov.w	r2, #4294967295
 8001f76:	4b96      	ldr	r3, [pc, #600]	@ (80021d0 <_ftoa+0x2e8>)
 8001f78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f7c:	f7fe fd78 	bl	8000a70 <__aeabi_dcmpgt>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d01d      	beq.n	8001fc2 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001f86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <_ftoa+0xac>
 8001f90:	4b90      	ldr	r3, [pc, #576]	@ (80021d4 <_ftoa+0x2ec>)
 8001f92:	e000      	b.n	8001f96 <_ftoa+0xae>
 8001f94:	4b90      	ldr	r3, [pc, #576]	@ (80021d8 <_ftoa+0x2f0>)
 8001f96:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001f98:	f002 0204 	and.w	r2, r2, #4
 8001f9c:	2a00      	cmp	r2, #0
 8001f9e:	d001      	beq.n	8001fa4 <_ftoa+0xbc>
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	e000      	b.n	8001fa6 <_ftoa+0xbe>
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001fa8:	9103      	str	r1, [sp, #12]
 8001faa:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001fac:	9102      	str	r1, [sp, #8]
 8001fae:	9201      	str	r2, [sp, #4]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	6939      	ldr	r1, [r7, #16]
 8001fb8:	6978      	ldr	r0, [r7, #20]
 8001fba:	f7ff fd95 	bl	8001ae8 <_out_rev>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	e1df      	b.n	8002382 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001fc2:	a37d      	add	r3, pc, #500	@ (adr r3, 80021b8 <_ftoa+0x2d0>)
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fcc:	f7fe fd50 	bl	8000a70 <__aeabi_dcmpgt>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <_ftoa+0x102>
 8001fd6:	a37a      	add	r3, pc, #488	@ (adr r3, 80021c0 <_ftoa+0x2d8>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fe0:	f7fe fd28 	bl	8000a34 <__aeabi_dcmplt>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00f      	beq.n	800200a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001fea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001fec:	9302      	str	r3, [sp, #8]
 8001fee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	ed97 0b00 	vldr	d0, [r7]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	6939      	ldr	r1, [r7, #16]
 8002000:	6978      	ldr	r0, [r7, #20]
 8002002:	f000 f9c9 	bl	8002398 <_etoa>
 8002006:	4603      	mov	r3, r0
 8002008:	e1bb      	b.n	8002382 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800200a:	2300      	movs	r3, #0
 800200c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
  if (value < 0) {
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	e9d7 0100 	ldrd	r0, r1, [r7]
 800201c:	f7fe fd0a 	bl	8000a34 <__aeabi_dcmplt>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00e      	beq.n	8002044 <_ftoa+0x15c>
    negative = true;
 8002026:	2301      	movs	r3, #1
 8002028:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    value = 0 - value;
 800202c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002030:	f04f 0000 	mov.w	r0, #0
 8002034:	f04f 0100 	mov.w	r1, #0
 8002038:	f7fe f8d2 	bl	80001e0 <__aeabi_dsub>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10d      	bne.n	800206a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800204e:	2306      	movs	r3, #6
 8002050:	673b      	str	r3, [r7, #112]	@ 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002052:	e00a      	b.n	800206a <_ftoa+0x182>
    buf[len++] = '0';
 8002054:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800205a:	3360      	adds	r3, #96	@ 0x60
 800205c:	443b      	add	r3, r7
 800205e:	2230      	movs	r2, #48	@ 0x30
 8002060:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002064:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002066:	3b01      	subs	r3, #1
 8002068:	673b      	str	r3, [r7, #112]	@ 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800206a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800206c:	2b1f      	cmp	r3, #31
 800206e:	d802      	bhi.n	8002076 <_ftoa+0x18e>
 8002070:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002072:	2b09      	cmp	r3, #9
 8002074:	d8ee      	bhi.n	8002054 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800207a:	f7fe fd03 	bl	8000a84 <__aeabi_d2iz>
 800207e:	4603      	mov	r3, r0
 8002080:	657b      	str	r3, [r7, #84]	@ 0x54
  double tmp = (value - whole) * pow10[prec];
 8002082:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002084:	f7fe f9fa 	bl	800047c <__aeabi_i2d>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002090:	f7fe f8a6 	bl	80001e0 <__aeabi_dsub>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	4a4f      	ldr	r2, [pc, #316]	@ (80021dc <_ftoa+0x2f4>)
 800209e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a8:	f7fe fa52 	bl	8000550 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  unsigned long frac = (unsigned long)tmp;
 80020b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80020b8:	f7fe fd0c 	bl	8000ad4 <__aeabi_d2uiz>
 80020bc:	4603      	mov	r3, r0
 80020be:	653b      	str	r3, [r7, #80]	@ 0x50
  diff = tmp - frac;
 80020c0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020c2:	f7fe f9cb 	bl	800045c <__aeabi_ui2d>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80020ce:	f7fe f887 	bl	80001e0 <__aeabi_dsub>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

  if (diff > 0.5) {
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	4b40      	ldr	r3, [pc, #256]	@ (80021e0 <_ftoa+0x2f8>)
 80020e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80020e4:	f7fe fcc4 	bl	8000a70 <__aeabi_dcmpgt>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d016      	beq.n	800211c <_ftoa+0x234>
    ++frac;
 80020ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020f0:	3301      	adds	r3, #1
 80020f2:	653b      	str	r3, [r7, #80]	@ 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80020f4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020f6:	f7fe f9b1 	bl	800045c <__aeabi_ui2d>
 80020fa:	4a38      	ldr	r2, [pc, #224]	@ (80021dc <_ftoa+0x2f4>)
 80020fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	f7fe fca9 	bl	8000a5c <__aeabi_dcmpge>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01a      	beq.n	8002146 <_ftoa+0x25e>
      frac = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	653b      	str	r3, [r7, #80]	@ 0x50
      ++whole;
 8002114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002116:	3301      	adds	r3, #1
 8002118:	657b      	str	r3, [r7, #84]	@ 0x54
 800211a:	e014      	b.n	8002146 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	4b2f      	ldr	r3, [pc, #188]	@ (80021e0 <_ftoa+0x2f8>)
 8002122:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002126:	f7fe fc85 	bl	8000a34 <__aeabi_dcmplt>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10a      	bne.n	8002146 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002132:	2b00      	cmp	r3, #0
 8002134:	d004      	beq.n	8002140 <_ftoa+0x258>
 8002136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002142:	3301      	adds	r3, #1
 8002144:	653b      	str	r3, [r7, #80]	@ 0x50
  }

  if (prec == 0U) {
 8002146:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002148:	2b00      	cmp	r3, #0
 800214a:	d14b      	bne.n	80021e4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800214c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800214e:	f7fe f995 	bl	800047c <__aeabi_i2d>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	e9d7 0100 	ldrd	r0, r1, [r7]
 800215a:	f7fe f841 	bl	80001e0 <__aeabi_dsub>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002166:	2301      	movs	r3, #1
 8002168:	461c      	mov	r4, r3
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	4b1c      	ldr	r3, [pc, #112]	@ (80021e0 <_ftoa+0x2f8>)
 8002170:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002174:	f7fe fc5e 	bl	8000a34 <__aeabi_dcmplt>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <_ftoa+0x29a>
 800217e:	2300      	movs	r3, #0
 8002180:	461c      	mov	r4, r3
 8002182:	b2e3      	uxtb	r3, r4
 8002184:	f083 0301 	eor.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <_ftoa+0x2ba>
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <_ftoa+0x2f8>)
 8002194:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002198:	f7fe fc6a 	bl	8000a70 <__aeabi_dcmpgt>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d064      	beq.n	800226c <_ftoa+0x384>
 80021a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8081 	beq.w	80022b0 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80021ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021b0:	3301      	adds	r3, #1
 80021b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80021b4:	e07c      	b.n	80022b0 <_ftoa+0x3c8>
 80021b6:	bf00      	nop
 80021b8:	00000000 	.word	0x00000000
 80021bc:	41cdcd65 	.word	0x41cdcd65
 80021c0:	00000000 	.word	0x00000000
 80021c4:	c1cdcd65 	.word	0xc1cdcd65
 80021c8:	08007a20 	.word	0x08007a20
 80021cc:	08007a24 	.word	0x08007a24
 80021d0:	7fefffff 	.word	0x7fefffff
 80021d4:	08007a2c 	.word	0x08007a2c
 80021d8:	08007a34 	.word	0x08007a34
 80021dc:	08007a38 	.word	0x08007a38
 80021e0:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 80021e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80021e8:	e01f      	b.n	800222a <_ftoa+0x342>
      --count;
 80021ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021ec:	3b01      	subs	r3, #1
 80021ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 80021f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80021f2:	4b66      	ldr	r3, [pc, #408]	@ (800238c <_ftoa+0x4a4>)
 80021f4:	fba3 2301 	umull	r2, r3, r3, r1
 80021f8:	08da      	lsrs	r2, r3, #3
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	1aca      	subs	r2, r1, r3
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002208:	1c59      	adds	r1, r3, #1
 800220a:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800220c:	3230      	adds	r2, #48	@ 0x30
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	3360      	adds	r3, #96	@ 0x60
 8002212:	443b      	add	r3, r7
 8002214:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800221a:	4a5c      	ldr	r2, [pc, #368]	@ (800238c <_ftoa+0x4a4>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	653b      	str	r3, [r7, #80]	@ 0x50
 8002224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800222a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800222c:	2b1f      	cmp	r3, #31
 800222e:	d9dc      	bls.n	80021ea <_ftoa+0x302>
 8002230:	e009      	b.n	8002246 <_ftoa+0x35e>
        break;
 8002232:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002234:	e007      	b.n	8002246 <_ftoa+0x35e>
      buf[len++] = '0';
 8002236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800223c:	3360      	adds	r3, #96	@ 0x60
 800223e:	443b      	add	r3, r7
 8002240:	2230      	movs	r2, #48	@ 0x30
 8002242:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002248:	2b1f      	cmp	r3, #31
 800224a:	d804      	bhi.n	8002256 <_ftoa+0x36e>
 800224c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800224e:	1e5a      	subs	r2, r3, #1
 8002250:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1ef      	bne.n	8002236 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002258:	2b1f      	cmp	r3, #31
 800225a:	d829      	bhi.n	80022b0 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800225c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002262:	3360      	adds	r3, #96	@ 0x60
 8002264:	443b      	add	r3, r7
 8002266:	222e      	movs	r2, #46	@ 0x2e
 8002268:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800226c:	e020      	b.n	80022b0 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800226e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002270:	4b47      	ldr	r3, [pc, #284]	@ (8002390 <_ftoa+0x4a8>)
 8002272:	fb83 1302 	smull	r1, r3, r3, r2
 8002276:	1099      	asrs	r1, r3, #2
 8002278:	17d3      	asrs	r3, r2, #31
 800227a:	1ac9      	subs	r1, r1, r3
 800227c:	460b      	mov	r3, r1
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	1ad1      	subs	r1, r2, r3
 8002286:	b2ca      	uxtb	r2, r1
 8002288:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800228a:	1c59      	adds	r1, r3, #1
 800228c:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800228e:	3230      	adds	r2, #48	@ 0x30
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	3360      	adds	r3, #96	@ 0x60
 8002294:	443b      	add	r3, r7
 8002296:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800229a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800229c:	4a3c      	ldr	r2, [pc, #240]	@ (8002390 <_ftoa+0x4a8>)
 800229e:	fb82 1203 	smull	r1, r2, r2, r3
 80022a2:	1092      	asrs	r2, r2, #2
 80022a4:	17db      	asrs	r3, r3, #31
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80022aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80022b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022b2:	2b1f      	cmp	r3, #31
 80022b4:	d9db      	bls.n	800226e <_ftoa+0x386>
 80022b6:	e000      	b.n	80022ba <_ftoa+0x3d2>
      break;
 80022b8:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80022ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d123      	bne.n	800230c <_ftoa+0x424>
 80022c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d01e      	beq.n	800230c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80022ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d014      	beq.n	80022fe <_ftoa+0x416>
 80022d4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d104      	bne.n	80022e6 <_ftoa+0x3fe>
 80022dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <_ftoa+0x416>
      width--;
 80022e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022e8:	3b01      	subs	r3, #1
 80022ea:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80022ec:	e007      	b.n	80022fe <_ftoa+0x416>
      buf[len++] = '0';
 80022ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80022f4:	3360      	adds	r3, #96	@ 0x60
 80022f6:	443b      	add	r3, r7
 80022f8:	2230      	movs	r2, #48	@ 0x30
 80022fa:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80022fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002300:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002302:	429a      	cmp	r2, r3
 8002304:	d202      	bcs.n	800230c <_ftoa+0x424>
 8002306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002308:	2b1f      	cmp	r3, #31
 800230a:	d9f0      	bls.n	80022ee <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800230c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800230e:	2b1f      	cmp	r3, #31
 8002310:	d827      	bhi.n	8002362 <_ftoa+0x47a>
    if (negative) {
 8002312:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <_ftoa+0x444>
      buf[len++] = '-';
 800231a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002320:	3360      	adds	r3, #96	@ 0x60
 8002322:	443b      	add	r3, r7
 8002324:	222d      	movs	r2, #45	@ 0x2d
 8002326:	f803 2c48 	strb.w	r2, [r3, #-72]
 800232a:	e01a      	b.n	8002362 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 800232c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800233c:	3360      	adds	r3, #96	@ 0x60
 800233e:	443b      	add	r3, r7
 8002340:	222b      	movs	r2, #43	@ 0x2b
 8002342:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002346:	e00c      	b.n	8002362 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8002348:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d007      	beq.n	8002362 <_ftoa+0x47a>
      buf[len++] = ' ';
 8002352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002358:	3360      	adds	r3, #96	@ 0x60
 800235a:	443b      	add	r3, r7
 800235c:	2220      	movs	r2, #32
 800235e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002362:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002364:	9303      	str	r3, [sp, #12]
 8002366:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002368:	9302      	str	r3, [sp, #8]
 800236a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	f107 0318 	add.w	r3, r7, #24
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	6939      	ldr	r1, [r7, #16]
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f7ff fbb4 	bl	8001ae8 <_out_rev>
 8002380:	4603      	mov	r3, r0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3764      	adds	r7, #100	@ 0x64
 8002386:	46bd      	mov	sp, r7
 8002388:	bd90      	pop	{r4, r7, pc}
 800238a:	bf00      	nop
 800238c:	cccccccd 	.word	0xcccccccd
 8002390:	66666667 	.word	0x66666667
 8002394:	00000000 	.word	0x00000000

08002398 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800239c:	b09f      	sub	sp, #124	@ 0x7c
 800239e:	af06      	add	r7, sp, #24
 80023a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80023a2:	6239      	str	r1, [r7, #32]
 80023a4:	61fa      	str	r2, [r7, #28]
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80023ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023b4:	f7fe fb34 	bl	8000a20 <__aeabi_dcmpeq>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d014      	beq.n	80023e8 <_etoa+0x50>
 80023be:	f04f 32ff 	mov.w	r2, #4294967295
 80023c2:	4bc1      	ldr	r3, [pc, #772]	@ (80026c8 <_etoa+0x330>)
 80023c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023c8:	f7fe fb52 	bl	8000a70 <__aeabi_dcmpgt>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10a      	bne.n	80023e8 <_etoa+0x50>
 80023d2:	f04f 32ff 	mov.w	r2, #4294967295
 80023d6:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
 80023da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023de:	f7fe fb29 	bl	8000a34 <__aeabi_dcmplt>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d012      	beq.n	800240e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80023e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	ed97 0b04 	vldr	d0, [r7, #16]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	6a39      	ldr	r1, [r7, #32]
 8002404:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002406:	f7ff fd6f 	bl	8001ee8 <_ftoa>
 800240a:	4603      	mov	r3, r0
 800240c:	e23f      	b.n	800288e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800240e:	2301      	movs	r3, #1
 8002410:	461e      	mov	r6, r3
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800241e:	f7fe fb09 	bl	8000a34 <__aeabi_dcmplt>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <_etoa+0x94>
 8002428:	2300      	movs	r3, #0
 800242a:	461e      	mov	r6, r3
 800242c:	f887 6053 	strb.w	r6, [r7, #83]	@ 0x53
  if (negative) {
 8002430:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002434:	2b00      	cmp	r3, #0
 8002436:	d009      	beq.n	800244c <_etoa+0xb4>
    value = -value;
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	ed97 7b00 	vldr	d7, [r7]
 8002448:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800244c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002458:	2306      	movs	r3, #6
 800245a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800245e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002462:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002466:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	0d0a      	lsrs	r2, r1, #20
 8002474:	2300      	movs	r3, #0
 8002476:	4613      	mov	r3, r2
 8002478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800247c:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8002480:	64fb      	str	r3, [r7, #76]	@ 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002486:	4690      	mov	r8, r2
 8002488:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800248c:	4644      	mov	r4, r8
 800248e:	f049 557f 	orr.w	r5, r9, #1069547520	@ 0x3fc00000
 8002492:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8002496:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800249a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800249c:	f7fd ffee 	bl	800047c <__aeabi_i2d>
 80024a0:	a37d      	add	r3, pc, #500	@ (adr r3, 8002698 <_etoa+0x300>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fe f853 	bl	8000550 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	a37b      	add	r3, pc, #492	@ (adr r3, 80026a0 <_etoa+0x308>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	f7fd fe94 	bl	80001e4 <__adddf3>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4614      	mov	r4, r2
 80024c2:	461d      	mov	r5, r3
 80024c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	4b7f      	ldr	r3, [pc, #508]	@ (80026cc <_etoa+0x334>)
 80024ce:	f7fd fe87 	bl	80001e0 <__aeabi_dsub>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4610      	mov	r0, r2
 80024d8:	4619      	mov	r1, r3
 80024da:	a373      	add	r3, pc, #460	@ (adr r3, 80026a8 <_etoa+0x310>)
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	f7fe f836 	bl	8000550 <__aeabi_dmul>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4620      	mov	r0, r4
 80024ea:	4629      	mov	r1, r5
 80024ec:	f7fd fe7a 	bl	80001e4 <__adddf3>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f7fe fac4 	bl	8000a84 <__aeabi_d2iz>
 80024fc:	4603      	mov	r3, r0
 80024fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002500:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002502:	f7fd ffbb 	bl	800047c <__aeabi_i2d>
 8002506:	a36a      	add	r3, pc, #424	@ (adr r3, 80026b0 <_etoa+0x318>)
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	f7fe f820 	bl	8000550 <__aeabi_dmul>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	4b6c      	ldr	r3, [pc, #432]	@ (80026d0 <_etoa+0x338>)
 800251e:	f7fd fe61 	bl	80001e4 <__adddf3>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	f7fe faab 	bl	8000a84 <__aeabi_d2iz>
 800252e:	4603      	mov	r3, r0
 8002530:	64fb      	str	r3, [r7, #76]	@ 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002532:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002534:	f7fd ffa2 	bl	800047c <__aeabi_i2d>
 8002538:	a35f      	add	r3, pc, #380	@ (adr r3, 80026b8 <_etoa+0x320>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f7fe f807 	bl	8000550 <__aeabi_dmul>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4614      	mov	r4, r2
 8002548:	461d      	mov	r5, r3
 800254a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800254c:	f7fd ff96 	bl	800047c <__aeabi_i2d>
 8002550:	a35b      	add	r3, pc, #364	@ (adr r3, 80026c0 <_etoa+0x328>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fd fffb 	bl	8000550 <__aeabi_dmul>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4620      	mov	r0, r4
 8002560:	4629      	mov	r1, r5
 8002562:	f7fd fe3d 	bl	80001e0 <__aeabi_dsub>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  const double z2 = z * z;
 800256e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002572:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002576:	f7fd ffeb 	bl	8000550 <__aeabi_dmul>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002584:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002588:	17da      	asrs	r2, r3, #31
 800258a:	469a      	mov	sl, r3
 800258c:	4693      	mov	fp, r2
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800259a:	2200      	movs	r2, #0
 800259c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80025a0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80025a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	f7fd fe1a 	bl	80001e4 <__adddf3>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4690      	mov	r8, r2
 80025b6:	4699      	mov	r9, r3
 80025b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025bc:	f04f 0000 	mov.w	r0, #0
 80025c0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80025c4:	f7fd fe0c 	bl	80001e0 <__aeabi_dsub>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4692      	mov	sl, r2
 80025ce:	469b      	mov	fp, r3
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	4b3f      	ldr	r3, [pc, #252]	@ (80026d4 <_etoa+0x33c>)
 80025d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80025da:	f7fe f8e3 	bl	80007a4 <__aeabi_ddiv>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	4b3b      	ldr	r3, [pc, #236]	@ (80026d8 <_etoa+0x340>)
 80025ec:	f7fd fdfa 	bl	80001e4 <__adddf3>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80025f8:	f7fe f8d4 	bl	80007a4 <__aeabi_ddiv>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	4b34      	ldr	r3, [pc, #208]	@ (80026dc <_etoa+0x344>)
 800260a:	f7fd fdeb 	bl	80001e4 <__adddf3>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002616:	f7fe f8c5 	bl	80007a4 <__aeabi_ddiv>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4650      	mov	r0, sl
 8002620:	4659      	mov	r1, fp
 8002622:	f7fd fddf 	bl	80001e4 <__adddf3>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4640      	mov	r0, r8
 800262c:	4649      	mov	r1, r9
 800262e:	f7fe f8b9 	bl	80007a4 <__aeabi_ddiv>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	4b28      	ldr	r3, [pc, #160]	@ (80026e0 <_etoa+0x348>)
 8002640:	f7fd fdd0 	bl	80001e4 <__adddf3>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4620      	mov	r0, r4
 800264a:	4629      	mov	r1, r5
 800264c:	f7fd ff80 	bl	8000550 <__aeabi_dmul>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8002658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800265c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002660:	f7fe f9e8 	bl	8000a34 <__aeabi_dcmplt>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00d      	beq.n	8002686 <_etoa+0x2ee>
    expval--;
 800266a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800266c:	3b01      	subs	r3, #1
 800266e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    conv.F /= 10;
 8002670:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <_etoa+0x340>)
 800267a:	f7fe f893 	bl	80007a4 <__aeabi_ddiv>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002688:	2b63      	cmp	r3, #99	@ 0x63
 800268a:	dc2b      	bgt.n	80026e4 <_etoa+0x34c>
 800268c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800268e:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8002692:	db27      	blt.n	80026e4 <_etoa+0x34c>
 8002694:	2304      	movs	r3, #4
 8002696:	e026      	b.n	80026e6 <_etoa+0x34e>
 8002698:	509f79fb 	.word	0x509f79fb
 800269c:	3fd34413 	.word	0x3fd34413
 80026a0:	8b60c8b3 	.word	0x8b60c8b3
 80026a4:	3fc68a28 	.word	0x3fc68a28
 80026a8:	636f4361 	.word	0x636f4361
 80026ac:	3fd287a7 	.word	0x3fd287a7
 80026b0:	0979a371 	.word	0x0979a371
 80026b4:	400a934f 	.word	0x400a934f
 80026b8:	bbb55516 	.word	0xbbb55516
 80026bc:	40026bb1 	.word	0x40026bb1
 80026c0:	fefa39ef 	.word	0xfefa39ef
 80026c4:	3fe62e42 	.word	0x3fe62e42
 80026c8:	7fefffff 	.word	0x7fefffff
 80026cc:	3ff80000 	.word	0x3ff80000
 80026d0:	3fe00000 	.word	0x3fe00000
 80026d4:	402c0000 	.word	0x402c0000
 80026d8:	40240000 	.word	0x40240000
 80026dc:	40180000 	.word	0x40180000
 80026e0:	3ff00000 	.word	0x3ff00000
 80026e4:	2305      	movs	r3, #5
 80026e6:	65bb      	str	r3, [r7, #88]	@ 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80026e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d03d      	beq.n	8002770 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80026f4:	a368      	add	r3, pc, #416	@ (adr r3, 8002898 <_etoa+0x500>)
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026fe:	f7fe f9ad 	bl	8000a5c <__aeabi_dcmpge>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d024      	beq.n	8002752 <_etoa+0x3ba>
 8002708:	a365      	add	r3, pc, #404	@ (adr r3, 80028a0 <_etoa+0x508>)
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002712:	f7fe f98f 	bl	8000a34 <__aeabi_dcmplt>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01a      	beq.n	8002752 <_etoa+0x3ba>
      if ((int)prec > expval) {
 800271c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002720:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002722:	429a      	cmp	r2, r3
 8002724:	da07      	bge.n	8002736 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8002726:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800272a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002734:	e002      	b.n	800273c <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800273c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002740:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002744:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      // no characters in exponent
      minwidth = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	65bb      	str	r3, [r7, #88]	@ 0x58
      expval   = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002750:	e00e      	b.n	8002770 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8002752:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <_etoa+0x3d8>
 800275a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800275e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <_etoa+0x3d8>
        --prec;
 8002766:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800276a:	3b01      	subs	r3, #1
 800276c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002770:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002774:	657b      	str	r3, [r7, #84]	@ 0x54
  if (width > minwidth) {
 8002776:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800277a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800277c:	429a      	cmp	r2, r3
 800277e:	d904      	bls.n	800278a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002780:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002782:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	657b      	str	r3, [r7, #84]	@ 0x54
 8002788:	e001      	b.n	800278e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800278e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d004      	beq.n	80027a4 <_etoa+0x40c>
 800279a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  // rescale the float value
  if (expval) {
 80027a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <_etoa+0x426>
    value /= conv.F;
 80027aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027b2:	f7fd fff7 	bl	80007a4 <__aeabi_ddiv>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	637b      	str	r3, [r7, #52]	@ 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80027c2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d006      	beq.n	80027d8 <_etoa+0x440>
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	e003      	b.n	80027e0 <_etoa+0x448>
 80027d8:	ed97 7b04 	vldr	d7, [r7, #16]
 80027dc:	ed87 7b02 	vstr	d7, [r7, #8]
 80027e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027e8:	9302      	str	r3, [sp, #8]
 80027ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	ed97 0b02 	vldr	d0, [r7, #8]
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	6a39      	ldr	r1, [r7, #32]
 80027fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002800:	f7ff fb72 	bl	8001ee8 <_ftoa>
 8002804:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8002806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002808:	2b00      	cmp	r3, #0
 800280a:	d03f      	beq.n	800288c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800280c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <_etoa+0x484>
 8002818:	2045      	movs	r0, #69	@ 0x45
 800281a:	e000      	b.n	800281e <_etoa+0x486>
 800281c:	2065      	movs	r0, #101	@ 0x65
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	1c53      	adds	r3, r2, #1
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	6a39      	ldr	r1, [r7, #32]
 800282a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800282c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800282e:	2b00      	cmp	r3, #0
 8002830:	bfb8      	it	lt
 8002832:	425b      	neglt	r3, r3
 8002834:	4618      	mov	r0, r3
 8002836:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002838:	0fdb      	lsrs	r3, r3, #31
 800283a:	b2db      	uxtb	r3, r3
 800283c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800283e:	3a01      	subs	r2, #1
 8002840:	2105      	movs	r1, #5
 8002842:	9105      	str	r1, [sp, #20]
 8002844:	9204      	str	r2, [sp, #16]
 8002846:	2200      	movs	r2, #0
 8002848:	9203      	str	r2, [sp, #12]
 800284a:	220a      	movs	r2, #10
 800284c:	9202      	str	r2, [sp, #8]
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	9000      	str	r0, [sp, #0]
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	6a39      	ldr	r1, [r7, #32]
 8002858:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800285a:	f7ff fa71 	bl	8001d40 <_ntoa_long>
 800285e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002860:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00f      	beq.n	800288c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800286c:	e007      	b.n	800287e <_etoa+0x4e6>
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	1c53      	adds	r3, r2, #1
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	6a39      	ldr	r1, [r7, #32]
 800287a:	2020      	movs	r0, #32
 800287c:	47a0      	blx	r4
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002888:	429a      	cmp	r2, r3
 800288a:	d8f0      	bhi.n	800286e <_etoa+0x4d6>
    }
  }
  return idx;
 800288c:	69fb      	ldr	r3, [r7, #28]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3764      	adds	r7, #100	@ 0x64
 8002892:	46bd      	mov	sp, r7
 8002894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002898:	eb1c432d 	.word	0xeb1c432d
 800289c:	3f1a36e2 	.word	0x3f1a36e2
 80028a0:	00000000 	.word	0x00000000
 80028a4:	412e8480 	.word	0x412e8480

080028a8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80028a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ac:	b0a3      	sub	sp, #140	@ 0x8c
 80028ae:	af0a      	add	r7, sp, #40	@ 0x28
 80028b0:	6178      	str	r0, [r7, #20]
 80028b2:	6139      	str	r1, [r7, #16]
 80028b4:	60fa      	str	r2, [r7, #12]
 80028b6:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!buffer) {
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 84cf 	bne.w	8003262 <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 80028c4:	4ba8      	ldr	r3, [pc, #672]	@ (8002b68 <_vsnprintf+0x2c0>)
 80028c6:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 80028c8:	f000 bccb 	b.w	8003262 <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b25      	cmp	r3, #37	@ 0x25
 80028d2:	d00d      	beq.n	80028f0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	7818      	ldrb	r0, [r3, #0]
 80028d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028da:	1c53      	adds	r3, r2, #1
 80028dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028de:	697c      	ldr	r4, [r7, #20]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6939      	ldr	r1, [r7, #16]
 80028e4:	47a0      	blx	r4
      format++;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	3301      	adds	r3, #1
 80028ea:	60bb      	str	r3, [r7, #8]
      continue;
 80028ec:	f000 bcb9 	b.w	8003262 <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    do {
      switch (*format) {
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	3b20      	subs	r3, #32
 8002900:	2b10      	cmp	r3, #16
 8002902:	d857      	bhi.n	80029b4 <_vsnprintf+0x10c>
 8002904:	a201      	add	r2, pc, #4	@ (adr r2, 800290c <_vsnprintf+0x64>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	0800298d 	.word	0x0800298d
 8002910:	080029b5 	.word	0x080029b5
 8002914:	080029b5 	.word	0x080029b5
 8002918:	080029a1 	.word	0x080029a1
 800291c:	080029b5 	.word	0x080029b5
 8002920:	080029b5 	.word	0x080029b5
 8002924:	080029b5 	.word	0x080029b5
 8002928:	080029b5 	.word	0x080029b5
 800292c:	080029b5 	.word	0x080029b5
 8002930:	080029b5 	.word	0x080029b5
 8002934:	080029b5 	.word	0x080029b5
 8002938:	08002979 	.word	0x08002979
 800293c:	080029b5 	.word	0x080029b5
 8002940:	08002965 	.word	0x08002965
 8002944:	080029b5 	.word	0x080029b5
 8002948:	080029b5 	.word	0x080029b5
 800294c:	08002951 	.word	0x08002951
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	3301      	adds	r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	2301      	movs	r3, #1
 8002960:	653b      	str	r3, [r7, #80]	@ 0x50
 8002962:	e02a      	b.n	80029ba <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002964:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	3301      	adds	r3, #1
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	2301      	movs	r3, #1
 8002974:	653b      	str	r3, [r7, #80]	@ 0x50
 8002976:	e020      	b.n	80029ba <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002978:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	3301      	adds	r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	2301      	movs	r3, #1
 8002988:	653b      	str	r3, [r7, #80]	@ 0x50
 800298a:	e016      	b.n	80029ba <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800298c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800298e:	f043 0308 	orr.w	r3, r3, #8
 8002992:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	3301      	adds	r3, #1
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	2301      	movs	r3, #1
 800299c:	653b      	str	r3, [r7, #80]	@ 0x50
 800299e:	e00c      	b.n	80029ba <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80029a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029a2:	f043 0310 	orr.w	r3, r3, #16
 80029a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	3301      	adds	r3, #1
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	2301      	movs	r3, #1
 80029b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80029b2:	e002      	b.n	80029ba <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80029b4:	2300      	movs	r3, #0
 80029b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80029b8:	bf00      	nop
      }
    } while (n);
 80029ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d19c      	bne.n	80028fa <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (_is_digit(*format)) {
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff f852 	bl	8001a72 <_is_digit>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d006      	beq.n	80029e2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 80029d4:	f107 0308 	add.w	r3, r7, #8
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff f861 	bl	8001aa0 <_atoi>
 80029de:	65b8      	str	r0, [r7, #88]	@ 0x58
 80029e0:	e01a      	b.n	8002a18 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80029e8:	d116      	bne.n	8002a18 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 80029ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029ee:	1d1a      	adds	r2, r3, #4
 80029f0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if (w < 0) {
 80029f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	da07      	bge.n	8002a0e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 80029fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
        width = (unsigned int)-w;
 8002a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a08:	425b      	negs	r3, r3
 8002a0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a0c:	e001      	b.n	8002a12 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a10:	65bb      	str	r3, [r7, #88]	@ 0x58
      }
      format++;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	3301      	adds	r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (*format == '.') {
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a22:	d127      	bne.n	8002a74 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8002a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
      format++;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff f81b 	bl	8001a72 <_is_digit>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d006      	beq.n	8002a50 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8002a42:	f107 0308 	add.w	r3, r7, #8
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff f82a 	bl	8001aa0 <_atoi>
 8002a4c:	6578      	str	r0, [r7, #84]	@ 0x54
 8002a4e:	e011      	b.n	8002a74 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a56:	d10d      	bne.n	8002a74 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8002a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a5c:	1d1a      	adds	r2, r3, #4
 8002a5e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	637b      	str	r3, [r7, #52]	@ 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a6c:	657b      	str	r3, [r7, #84]	@ 0x54
        format++;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	3301      	adds	r3, #1
 8002a72:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	3b68      	subs	r3, #104	@ 0x68
 8002a7a:	2b12      	cmp	r3, #18
 8002a7c:	d866      	bhi.n	8002b4c <_vsnprintf+0x2a4>
 8002a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a84 <_vsnprintf+0x1dc>)
 8002a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a84:	08002af7 	.word	0x08002af7
 8002a88:	08002b4d 	.word	0x08002b4d
 8002a8c:	08002b2d 	.word	0x08002b2d
 8002a90:	08002b4d 	.word	0x08002b4d
 8002a94:	08002ad1 	.word	0x08002ad1
 8002a98:	08002b4d 	.word	0x08002b4d
 8002a9c:	08002b4d 	.word	0x08002b4d
 8002aa0:	08002b4d 	.word	0x08002b4d
 8002aa4:	08002b4d 	.word	0x08002b4d
 8002aa8:	08002b4d 	.word	0x08002b4d
 8002aac:	08002b4d 	.word	0x08002b4d
 8002ab0:	08002b4d 	.word	0x08002b4d
 8002ab4:	08002b1d 	.word	0x08002b1d
 8002ab8:	08002b4d 	.word	0x08002b4d
 8002abc:	08002b4d 	.word	0x08002b4d
 8002ac0:	08002b4d 	.word	0x08002b4d
 8002ac4:	08002b4d 	.word	0x08002b4d
 8002ac8:	08002b4d 	.word	0x08002b4d
 8002acc:	08002b3d 	.word	0x08002b3d
      case 'l' :
        flags |= FLAGS_LONG;
 8002ad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	3301      	adds	r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b6c      	cmp	r3, #108	@ 0x6c
 8002ae4:	d134      	bne.n	8002b50 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8002ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ae8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aec:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	3301      	adds	r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
        }
        break;
 8002af4:	e02c      	b.n	8002b50 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002af6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3301      	adds	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b68      	cmp	r3, #104	@ 0x68
 8002b0a:	d123      	bne.n	8002b54 <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8002b0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b12:	65fb      	str	r3, [r7, #92]	@ 0x5c
          format++;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	3301      	adds	r3, #1
 8002b18:	60bb      	str	r3, [r7, #8]
        }
        break;
 8002b1a:	e01b      	b.n	8002b54 <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002b1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b22:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	3301      	adds	r3, #1
 8002b28:	60bb      	str	r3, [r7, #8]
        break;
 8002b2a:	e014      	b.n	8002b56 <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002b2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b32:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	3301      	adds	r3, #1
 8002b38:	60bb      	str	r3, [r7, #8]
        break;
 8002b3a:	e00c      	b.n	8002b56 <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002b3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b42:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	3301      	adds	r3, #1
 8002b48:	60bb      	str	r3, [r7, #8]
        break;
 8002b4a:	e004      	b.n	8002b56 <_vsnprintf+0x2ae>
      default :
        break;
 8002b4c:	bf00      	nop
 8002b4e:	e002      	b.n	8002b56 <_vsnprintf+0x2ae>
        break;
 8002b50:	bf00      	nop
 8002b52:	e000      	b.n	8002b56 <_vsnprintf+0x2ae>
        break;
 8002b54:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b67      	cmp	r3, #103	@ 0x67
 8002b5c:	f300 80b8 	bgt.w	8002cd0 <_vsnprintf+0x428>
 8002b60:	2b25      	cmp	r3, #37	@ 0x25
 8002b62:	da27      	bge.n	8002bb4 <_vsnprintf+0x30c>
 8002b64:	e370      	b.n	8003248 <_vsnprintf+0x9a0>
 8002b66:	bf00      	nop
 8002b68:	08001a1d 	.word	0x08001a1d
 8002b6c:	3b69      	subs	r3, #105	@ 0x69
 8002b6e:	2201      	movs	r2, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	f249 0241 	movw	r2, #36929	@ 0x9041
 8002b78:	401a      	ands	r2, r3
 8002b7a:	2a00      	cmp	r2, #0
 8002b7c:	bf14      	ite	ne
 8002b7e:	2201      	movne	r2, #1
 8002b80:	2200      	moveq	r2, #0
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	2a00      	cmp	r2, #0
 8002b86:	f040 80aa 	bne.w	8002cde <_vsnprintf+0x436>
 8002b8a:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002b8e:	2a00      	cmp	r2, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2201      	movne	r2, #1
 8002b94:	2200      	moveq	r2, #0
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	2a00      	cmp	r2, #0
 8002b9a:	f040 82fb 	bne.w	8003194 <_vsnprintf+0x8ec>
 8002b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bf14      	ite	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	2300      	moveq	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 828d 	bne.w	80030cc <_vsnprintf+0x824>
 8002bb2:	e349      	b.n	8003248 <_vsnprintf+0x9a0>
 8002bb4:	3b25      	subs	r3, #37	@ 0x25
 8002bb6:	2b42      	cmp	r3, #66	@ 0x42
 8002bb8:	f200 8346 	bhi.w	8003248 <_vsnprintf+0x9a0>
 8002bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc4 <_vsnprintf+0x31c>)
 8002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc2:	bf00      	nop
 8002bc4:	08003231 	.word	0x08003231
 8002bc8:	08003249 	.word	0x08003249
 8002bcc:	08003249 	.word	0x08003249
 8002bd0:	08003249 	.word	0x08003249
 8002bd4:	08003249 	.word	0x08003249
 8002bd8:	08003249 	.word	0x08003249
 8002bdc:	08003249 	.word	0x08003249
 8002be0:	08003249 	.word	0x08003249
 8002be4:	08003249 	.word	0x08003249
 8002be8:	08003249 	.word	0x08003249
 8002bec:	08003249 	.word	0x08003249
 8002bf0:	08003249 	.word	0x08003249
 8002bf4:	08003249 	.word	0x08003249
 8002bf8:	08003249 	.word	0x08003249
 8002bfc:	08003249 	.word	0x08003249
 8002c00:	08003249 	.word	0x08003249
 8002c04:	08003249 	.word	0x08003249
 8002c08:	08003249 	.word	0x08003249
 8002c0c:	08003249 	.word	0x08003249
 8002c10:	08003249 	.word	0x08003249
 8002c14:	08003249 	.word	0x08003249
 8002c18:	08003249 	.word	0x08003249
 8002c1c:	08003249 	.word	0x08003249
 8002c20:	08003249 	.word	0x08003249
 8002c24:	08003249 	.word	0x08003249
 8002c28:	08003249 	.word	0x08003249
 8002c2c:	08003249 	.word	0x08003249
 8002c30:	08003249 	.word	0x08003249
 8002c34:	08003249 	.word	0x08003249
 8002c38:	08003249 	.word	0x08003249
 8002c3c:	08003249 	.word	0x08003249
 8002c40:	08003249 	.word	0x08003249
 8002c44:	08002fe5 	.word	0x08002fe5
 8002c48:	08002f95 	.word	0x08002f95
 8002c4c:	08002fe5 	.word	0x08002fe5
 8002c50:	08003249 	.word	0x08003249
 8002c54:	08003249 	.word	0x08003249
 8002c58:	08003249 	.word	0x08003249
 8002c5c:	08003249 	.word	0x08003249
 8002c60:	08003249 	.word	0x08003249
 8002c64:	08003249 	.word	0x08003249
 8002c68:	08003249 	.word	0x08003249
 8002c6c:	08003249 	.word	0x08003249
 8002c70:	08003249 	.word	0x08003249
 8002c74:	08003249 	.word	0x08003249
 8002c78:	08003249 	.word	0x08003249
 8002c7c:	08003249 	.word	0x08003249
 8002c80:	08003249 	.word	0x08003249
 8002c84:	08003249 	.word	0x08003249
 8002c88:	08003249 	.word	0x08003249
 8002c8c:	08003249 	.word	0x08003249
 8002c90:	08002cdf 	.word	0x08002cdf
 8002c94:	08003249 	.word	0x08003249
 8002c98:	08003249 	.word	0x08003249
 8002c9c:	08003249 	.word	0x08003249
 8002ca0:	08003249 	.word	0x08003249
 8002ca4:	08003249 	.word	0x08003249
 8002ca8:	08003249 	.word	0x08003249
 8002cac:	08003249 	.word	0x08003249
 8002cb0:	08003249 	.word	0x08003249
 8002cb4:	08003249 	.word	0x08003249
 8002cb8:	08002cdf 	.word	0x08002cdf
 8002cbc:	08003055 	.word	0x08003055
 8002cc0:	08002cdf 	.word	0x08002cdf
 8002cc4:	08002fe5 	.word	0x08002fe5
 8002cc8:	08002f95 	.word	0x08002f95
 8002ccc:	08002fe5 	.word	0x08002fe5
 8002cd0:	2b78      	cmp	r3, #120	@ 0x78
 8002cd2:	f300 82b9 	bgt.w	8003248 <_vsnprintf+0x9a0>
 8002cd6:	2b69      	cmp	r3, #105	@ 0x69
 8002cd8:	f6bf af48 	bge.w	8002b6c <_vsnprintf+0x2c4>
 8002cdc:	e2b4      	b.n	8003248 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b78      	cmp	r3, #120	@ 0x78
 8002ce4:	d003      	beq.n	8002cee <_vsnprintf+0x446>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b58      	cmp	r3, #88	@ 0x58
 8002cec:	d102      	bne.n	8002cf4 <_vsnprintf+0x44c>
          base = 16U;
 8002cee:	2310      	movs	r3, #16
 8002cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cf2:	e013      	b.n	8002d1c <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b6f      	cmp	r3, #111	@ 0x6f
 8002cfa:	d102      	bne.n	8002d02 <_vsnprintf+0x45a>
          base =  8U;
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d00:	e00c      	b.n	8002d1c <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b62      	cmp	r3, #98	@ 0x62
 8002d08:	d102      	bne.n	8002d10 <_vsnprintf+0x468>
          base =  2U;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d0e:	e005      	b.n	8002d1c <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8002d10:	230a      	movs	r3, #10
 8002d12:	64bb      	str	r3, [r7, #72]	@ 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002d14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d16:	f023 0310 	bic.w	r3, r3, #16
 8002d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b58      	cmp	r3, #88	@ 0x58
 8002d22:	d103      	bne.n	8002d2c <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 8002d24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d26:	f043 0320 	orr.w	r3, r3, #32
 8002d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b69      	cmp	r3, #105	@ 0x69
 8002d32:	d007      	beq.n	8002d44 <_vsnprintf+0x49c>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b64      	cmp	r3, #100	@ 0x64
 8002d3a:	d003      	beq.n	8002d44 <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002d3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d3e:	f023 030c 	bic.w	r3, r3, #12
 8002d42:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002d44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8002d4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b69      	cmp	r3, #105	@ 0x69
 8002d5c:	d004      	beq.n	8002d68 <_vsnprintf+0x4c0>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b64      	cmp	r3, #100	@ 0x64
 8002d64:	f040 8098 	bne.w	8002e98 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002d68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d031      	beq.n	8002dd6 <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d76:	3307      	adds	r3, #7
 8002d78:	f023 0307 	bic.w	r3, r3, #7
 8002d7c:	f103 0208 	add.w	r2, r3, #8
 8002d80:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d88:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	da06      	bge.n	8002da2 <_vsnprintf+0x4fa>
 8002d94:	2100      	movs	r1, #0
 8002d96:	f1d2 0800 	rsbs	r8, r2, #0
 8002d9a:	eb61 0903 	sbc.w	r9, r1, r3
 8002d9e:	4642      	mov	r2, r8
 8002da0:	464b      	mov	r3, r9
 8002da2:	69f9      	ldr	r1, [r7, #28]
 8002da4:	0fc9      	lsrs	r1, r1, #31
 8002da6:	b2c9      	uxtb	r1, r1
 8002da8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002daa:	2400      	movs	r4, #0
 8002dac:	4682      	mov	sl, r0
 8002dae:	46a3      	mov	fp, r4
 8002db0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002db2:	9008      	str	r0, [sp, #32]
 8002db4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002db6:	9007      	str	r0, [sp, #28]
 8002db8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002dba:	9006      	str	r0, [sp, #24]
 8002dbc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002dc0:	9102      	str	r1, [sp, #8]
 8002dc2:	e9cd 2300 	strd	r2, r3, [sp]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dca:	6939      	ldr	r1, [r7, #16]
 8002dcc:	6978      	ldr	r0, [r7, #20]
 8002dce:	f7ff f81d 	bl	8001e0c <_ntoa_long_long>
 8002dd2:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002dd4:	e0da      	b.n	8002f8c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002dd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8002de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002de4:	1d1a      	adds	r2, r3, #4
 8002de6:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bfb8      	it	lt
 8002df4:	425b      	neglt	r3, r3
 8002df6:	4619      	mov	r1, r3
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	0fdb      	lsrs	r3, r3, #31
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002e00:	9205      	str	r2, [sp, #20]
 8002e02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e04:	9204      	str	r2, [sp, #16]
 8002e06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e08:	9203      	str	r2, [sp, #12]
 8002e0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e0c:	9202      	str	r2, [sp, #8]
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	9100      	str	r1, [sp, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e16:	6939      	ldr	r1, [r7, #16]
 8002e18:	6978      	ldr	r0, [r7, #20]
 8002e1a:	f7fe ff91 	bl	8001d40 <_ntoa_long>
 8002e1e:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002e20:	e0b4      	b.n	8002f8c <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002e22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <_vsnprintf+0x594>
 8002e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e30:	1d1a      	adds	r2, r3, #4
 8002e32:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e012      	b.n	8002e62 <_vsnprintf+0x5ba>
 8002e3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <_vsnprintf+0x5ae>
 8002e46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e4a:	1d1a      	adds	r2, r3, #4
 8002e4c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b21b      	sxth	r3, r3
 8002e54:	e005      	b.n	8002e62 <_vsnprintf+0x5ba>
 8002e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e5a:	1d1a      	adds	r2, r3, #4
 8002e5c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	62bb      	str	r3, [r7, #40]	@ 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bfb8      	it	lt
 8002e6a:	425b      	neglt	r3, r3
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e70:	0fdb      	lsrs	r3, r3, #31
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002e76:	9205      	str	r2, [sp, #20]
 8002e78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e7a:	9204      	str	r2, [sp, #16]
 8002e7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e7e:	9203      	str	r2, [sp, #12]
 8002e80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e82:	9202      	str	r2, [sp, #8]
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	9100      	str	r1, [sp, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e8c:	6939      	ldr	r1, [r7, #16]
 8002e8e:	6978      	ldr	r0, [r7, #20]
 8002e90:	f7fe ff56 	bl	8001d40 <_ntoa_long>
 8002e94:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002e96:	e079      	b.n	8002f8c <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002e98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d022      	beq.n	8002ee8 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8002ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ea6:	3307      	adds	r3, #7
 8002ea8:	f023 0307 	bic.w	r3, r3, #7
 8002eac:	f103 0208 	add.w	r2, r3, #8
 8002eb0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002eba:	2000      	movs	r0, #0
 8002ebc:	460d      	mov	r5, r1
 8002ebe:	4606      	mov	r6, r0
 8002ec0:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002ec2:	9108      	str	r1, [sp, #32]
 8002ec4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002ec6:	9107      	str	r1, [sp, #28]
 8002ec8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002eca:	9106      	str	r1, [sp, #24]
 8002ecc:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	9102      	str	r1, [sp, #8]
 8002ed4:	e9cd 2300 	strd	r2, r3, [sp]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002edc:	6939      	ldr	r1, [r7, #16]
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	f7fe ff94 	bl	8001e0c <_ntoa_long_long>
 8002ee4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8002ee6:	e051      	b.n	8002f8c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002ee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d018      	beq.n	8002f24 <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002ef2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ef6:	1d1a      	adds	r2, r3, #4
 8002ef8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002f00:	9205      	str	r2, [sp, #20]
 8002f02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f04:	9204      	str	r2, [sp, #16]
 8002f06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f08:	9203      	str	r2, [sp, #12]
 8002f0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f0c:	9202      	str	r2, [sp, #8]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	9201      	str	r2, [sp, #4]
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f18:	6939      	ldr	r1, [r7, #16]
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7fe ff10 	bl	8001d40 <_ntoa_long>
 8002f20:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8002f22:	e033      	b.n	8002f8c <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002f24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <_vsnprintf+0x696>
 8002f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f32:	1d1a      	adds	r2, r3, #4
 8002f34:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	e012      	b.n	8002f64 <_vsnprintf+0x6bc>
 8002f3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <_vsnprintf+0x6b0>
 8002f48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f4c:	1d1a      	adds	r2, r3, #4
 8002f4e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	e005      	b.n	8002f64 <_vsnprintf+0x6bc>
 8002f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f5c:	1d1a      	adds	r2, r3, #4
 8002f5e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002f66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f68:	9305      	str	r3, [sp, #20]
 8002f6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f6c:	9304      	str	r3, [sp, #16]
 8002f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f70:	9303      	str	r3, [sp, #12]
 8002f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f74:	9302      	str	r3, [sp, #8]
 8002f76:	2300      	movs	r3, #0
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f82:	6939      	ldr	r1, [r7, #16]
 8002f84:	6978      	ldr	r0, [r7, #20]
 8002f86:	f7fe fedb 	bl	8001d40 <_ntoa_long>
 8002f8a:	64f8      	str	r0, [r7, #76]	@ 0x4c
          }
        }
        format++;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	60bb      	str	r3, [r7, #8]
        break;
 8002f92:	e166      	b.n	8003262 <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b46      	cmp	r3, #70	@ 0x46
 8002f9a:	d103      	bne.n	8002fa4 <_vsnprintf+0x6fc>
 8002f9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f9e:	f043 0320 	orr.w	r3, r3, #32
 8002fa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fa8:	3307      	adds	r3, #7
 8002faa:	f023 0307 	bic.w	r3, r3, #7
 8002fae:	f103 0208 	add.w	r2, r3, #8
 8002fb2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002fb6:	ed93 7b00 	vldr	d7, [r3]
 8002fba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fbc:	9302      	str	r3, [sp, #8]
 8002fbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	eeb0 0a47 	vmov.f32	s0, s14
 8002fca:	eef0 0a67 	vmov.f32	s1, s15
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fd2:	6939      	ldr	r1, [r7, #16]
 8002fd4:	6978      	ldr	r0, [r7, #20]
 8002fd6:	f7fe ff87 	bl	8001ee8 <_ftoa>
 8002fda:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
        break;
 8002fe2:	e13e      	b.n	8003262 <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b67      	cmp	r3, #103	@ 0x67
 8002fea:	d003      	beq.n	8002ff4 <_vsnprintf+0x74c>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b47      	cmp	r3, #71	@ 0x47
 8002ff2:	d103      	bne.n	8002ffc <_vsnprintf+0x754>
 8002ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ff6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b45      	cmp	r3, #69	@ 0x45
 8003002:	d003      	beq.n	800300c <_vsnprintf+0x764>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b47      	cmp	r3, #71	@ 0x47
 800300a:	d103      	bne.n	8003014 <_vsnprintf+0x76c>
 800300c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800300e:	f043 0320 	orr.w	r3, r3, #32
 8003012:	65fb      	str	r3, [r7, #92]	@ 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003014:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003018:	3307      	adds	r3, #7
 800301a:	f023 0307 	bic.w	r3, r3, #7
 800301e:	f103 0208 	add.w	r2, r3, #8
 8003022:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003026:	ed93 7b00 	vldr	d7, [r3]
 800302a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800302c:	9302      	str	r3, [sp, #8]
 800302e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	eeb0 0a47 	vmov.f32	s0, s14
 800303a:	eef0 0a67 	vmov.f32	s1, s15
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003042:	6939      	ldr	r1, [r7, #16]
 8003044:	6978      	ldr	r0, [r7, #20]
 8003046:	f7ff f9a7 	bl	8002398 <_etoa>
 800304a:	64f8      	str	r0, [r7, #76]	@ 0x4c
        format++;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	3301      	adds	r3, #1
 8003050:	60bb      	str	r3, [r7, #8]
        break;
 8003052:	e106      	b.n	8003262 <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003054:	2301      	movs	r3, #1
 8003056:	647b      	str	r3, [r7, #68]	@ 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10e      	bne.n	8003080 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8003062:	e007      	b.n	8003074 <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8003064:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003066:	1c53      	adds	r3, r2, #1
 8003068:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800306a:	697c      	ldr	r4, [r7, #20]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6939      	ldr	r1, [r7, #16]
 8003070:	2020      	movs	r0, #32
 8003072:	47a0      	blx	r4
          while (l++ < width) {
 8003074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	647a      	str	r2, [r7, #68]	@ 0x44
 800307a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800307c:	429a      	cmp	r2, r3
 800307e:	d8f1      	bhi.n	8003064 <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003080:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003084:	1d1a      	adds	r2, r3, #4
 8003086:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	b2d8      	uxtb	r0, r3
 800308e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003090:	1c53      	adds	r3, r2, #1
 8003092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003094:	697c      	ldr	r4, [r7, #20]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6939      	ldr	r1, [r7, #16]
 800309a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800309c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00e      	beq.n	80030c4 <_vsnprintf+0x81c>
          while (l++ < width) {
 80030a6:	e007      	b.n	80030b8 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 80030a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030aa:	1c53      	adds	r3, r2, #1
 80030ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030ae:	697c      	ldr	r4, [r7, #20]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6939      	ldr	r1, [r7, #16]
 80030b4:	2020      	movs	r0, #32
 80030b6:	47a0      	blx	r4
          while (l++ < width) {
 80030b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	647a      	str	r2, [r7, #68]	@ 0x44
 80030be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d8f1      	bhi.n	80030a8 <_vsnprintf+0x800>
          }
        }
        format++;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	3301      	adds	r3, #1
 80030c8:	60bb      	str	r3, [r7, #8]
        break;
 80030ca:	e0ca      	b.n	8003262 <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 80030cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030d0:	1d1a      	adds	r2, r3, #4
 80030d2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	643b      	str	r3, [r7, #64]	@ 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80030da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <_vsnprintf+0x83c>
 80030e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e2:	e001      	b.n	80030e8 <_vsnprintf+0x840>
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295
 80030e8:	4619      	mov	r1, r3
 80030ea:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80030ec:	f7fe fca4 	bl	8001a38 <_strnlen_s>
 80030f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80030f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 80030fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003100:	4293      	cmp	r3, r2
 8003102:	bf28      	it	cs
 8003104:	4613      	movcs	r3, r2
 8003106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8003108:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d11a      	bne.n	8003148 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8003112:	e007      	b.n	8003124 <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8003114:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003116:	1c53      	adds	r3, r2, #1
 8003118:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800311a:	697c      	ldr	r4, [r7, #20]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6939      	ldr	r1, [r7, #16]
 8003120:	2020      	movs	r0, #32
 8003122:	47a0      	blx	r4
          while (l++ < width) {
 8003124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800312a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800312c:	429a      	cmp	r2, r3
 800312e:	d8f1      	bhi.n	8003114 <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003130:	e00a      	b.n	8003148 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8003132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	643a      	str	r2, [r7, #64]	@ 0x40
 8003138:	7818      	ldrb	r0, [r3, #0]
 800313a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800313c:	1c53      	adds	r3, r2, #1
 800313e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003140:	697c      	ldr	r4, [r7, #20]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6939      	ldr	r1, [r7, #16]
 8003146:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003148:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d009      	beq.n	8003164 <_vsnprintf+0x8bc>
 8003150:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0eb      	beq.n	8003132 <_vsnprintf+0x88a>
 800315a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315c:	1e5a      	subs	r2, r3, #1
 800315e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e6      	bne.n	8003132 <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00e      	beq.n	800318c <_vsnprintf+0x8e4>
          while (l++ < width) {
 800316e:	e007      	b.n	8003180 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8003170:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003172:	1c53      	adds	r3, r2, #1
 8003174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003176:	697c      	ldr	r4, [r7, #20]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6939      	ldr	r1, [r7, #16]
 800317c:	2020      	movs	r0, #32
 800317e:	47a0      	blx	r4
          while (l++ < width) {
 8003180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003186:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003188:	429a      	cmp	r2, r3
 800318a:	d8f1      	bhi.n	8003170 <_vsnprintf+0x8c8>
          }
        }
        format++;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	3301      	adds	r3, #1
 8003190:	60bb      	str	r3, [r7, #8]
        break;
 8003192:	e066      	b.n	8003262 <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003194:	2308      	movs	r3, #8
 8003196:	65bb      	str	r3, [r7, #88]	@ 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003198:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800319a:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
 800319e:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 80031a0:	2300      	movs	r3, #0
 80031a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (is_ll) {
 80031a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d023      	beq.n	80031f6 <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 80031ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031b2:	1d1a      	adds	r2, r3, #4
 80031b4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	2300      	movs	r3, #0
 80031be:	603a      	str	r2, [r7, #0]
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031c4:	9308      	str	r3, [sp, #32]
 80031c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031c8:	9307      	str	r3, [sp, #28]
 80031ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031cc:	9306      	str	r3, [sp, #24]
 80031ce:	f04f 0210 	mov.w	r2, #16
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031da:	2300      	movs	r3, #0
 80031dc:	9302      	str	r3, [sp, #8]
 80031de:	e9d7 3400 	ldrd	r3, r4, [r7]
 80031e2:	e9cd 3400 	strd	r3, r4, [sp]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031ea:	6939      	ldr	r1, [r7, #16]
 80031ec:	6978      	ldr	r0, [r7, #20]
 80031ee:	f7fe fe0d 	bl	8001e0c <_ntoa_long_long>
 80031f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80031f4:	e018      	b.n	8003228 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80031f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031fa:	1d1a      	adds	r2, r3, #4
 80031fc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003206:	9305      	str	r3, [sp, #20]
 8003208:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800320a:	9304      	str	r3, [sp, #16]
 800320c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320e:	9303      	str	r3, [sp, #12]
 8003210:	2310      	movs	r3, #16
 8003212:	9302      	str	r3, [sp, #8]
 8003214:	2300      	movs	r3, #0
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	9200      	str	r2, [sp, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800321e:	6939      	ldr	r1, [r7, #16]
 8003220:	6978      	ldr	r0, [r7, #20]
 8003222:	f7fe fd8d 	bl	8001d40 <_ntoa_long>
 8003226:	64f8      	str	r0, [r7, #76]	@ 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	3301      	adds	r3, #1
 800322c:	60bb      	str	r3, [r7, #8]
        break;
 800322e:	e018      	b.n	8003262 <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003230:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003232:	1c53      	adds	r3, r2, #1
 8003234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003236:	697c      	ldr	r4, [r7, #20]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6939      	ldr	r1, [r7, #16]
 800323c:	2025      	movs	r0, #37	@ 0x25
 800323e:	47a0      	blx	r4
        format++;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	3301      	adds	r3, #1
 8003244:	60bb      	str	r3, [r7, #8]
        break;
 8003246:	e00c      	b.n	8003262 <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	7818      	ldrb	r0, [r3, #0]
 800324c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800324e:	1c53      	adds	r3, r2, #1
 8003250:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003252:	697c      	ldr	r4, [r7, #20]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6939      	ldr	r1, [r7, #16]
 8003258:	47a0      	blx	r4
        format++;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	3301      	adds	r3, #1
 800325e:	60bb      	str	r3, [r7, #8]
        break;
 8003260:	bf00      	nop
  while (*format)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	f47f ab30 	bne.w	80028cc <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800326c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	429a      	cmp	r2, r3
 8003272:	d302      	bcc.n	800327a <_vsnprintf+0x9d2>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1e5a      	subs	r2, r3, #1
 8003278:	e000      	b.n	800327c <_vsnprintf+0x9d4>
 800327a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800327c:	697c      	ldr	r4, [r7, #20]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6939      	ldr	r1, [r7, #16]
 8003282:	2000      	movs	r0, #0
 8003284:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003286:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8003288:	4618      	mov	r0, r3
 800328a:	3764      	adds	r7, #100	@ 0x64
 800328c:	46bd      	mov	sp, r7
 800328e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003292:	bf00      	nop

08003294 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8003294:	b40e      	push	{r1, r2, r3}
 8003296:	b580      	push	{r7, lr}
 8003298:	b087      	sub	sp, #28
 800329a:	af02      	add	r7, sp, #8
 800329c:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800329e:	f107 0320 	add.w	r3, r7, #32
 80032a2:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f04f 32ff 	mov.w	r2, #4294967295
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4805      	ldr	r0, [pc, #20]	@ (80032c8 <sprintf_+0x34>)
 80032b2:	f7ff faf9 	bl	80028a8 <_vsnprintf>
 80032b6:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80032b8:	68fb      	ldr	r3, [r7, #12]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032c4:	b003      	add	sp, #12
 80032c6:	4770      	bx	lr
 80032c8:	080019ef 	.word	0x080019ef

080032cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80032d0:	4b18      	ldr	r3, [pc, #96]	@ (8003334 <MX_SPI2_Init+0x68>)
 80032d2:	4a19      	ldr	r2, [pc, #100]	@ (8003338 <MX_SPI2_Init+0x6c>)
 80032d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80032d6:	4b17      	ldr	r3, [pc, #92]	@ (8003334 <MX_SPI2_Init+0x68>)
 80032d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80032dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80032de:	4b15      	ldr	r3, [pc, #84]	@ (8003334 <MX_SPI2_Init+0x68>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80032e4:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <MX_SPI2_Init+0x68>)
 80032e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032ea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032ec:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <MX_SPI2_Init+0x68>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032f2:	4b10      	ldr	r3, [pc, #64]	@ (8003334 <MX_SPI2_Init+0x68>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80032f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <MX_SPI2_Init+0x68>)
 80032fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003300:	4b0c      	ldr	r3, [pc, #48]	@ (8003334 <MX_SPI2_Init+0x68>)
 8003302:	2208      	movs	r2, #8
 8003304:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003306:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <MX_SPI2_Init+0x68>)
 8003308:	2200      	movs	r2, #0
 800330a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800330c:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <MX_SPI2_Init+0x68>)
 800330e:	2200      	movs	r2, #0
 8003310:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003312:	4b08      	ldr	r3, [pc, #32]	@ (8003334 <MX_SPI2_Init+0x68>)
 8003314:	2200      	movs	r2, #0
 8003316:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003318:	4b06      	ldr	r3, [pc, #24]	@ (8003334 <MX_SPI2_Init+0x68>)
 800331a:	220a      	movs	r2, #10
 800331c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800331e:	4805      	ldr	r0, [pc, #20]	@ (8003334 <MX_SPI2_Init+0x68>)
 8003320:	f001 fd34 	bl	8004d8c <HAL_SPI_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800332a:	f7fe f8f5 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	2000026c 	.word	0x2000026c
 8003338:	40003800 	.word	0x40003800

0800333c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08a      	sub	sp, #40	@ 0x28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a19      	ldr	r2, [pc, #100]	@ (80033c0 <HAL_SPI_MspInit+0x84>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d12c      	bne.n	80033b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	4b18      	ldr	r3, [pc, #96]	@ (80033c4 <HAL_SPI_MspInit+0x88>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	4a17      	ldr	r2, [pc, #92]	@ (80033c4 <HAL_SPI_MspInit+0x88>)
 8003368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800336c:	6413      	str	r3, [r2, #64]	@ 0x40
 800336e:	4b15      	ldr	r3, [pc, #84]	@ (80033c4 <HAL_SPI_MspInit+0x88>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	4b11      	ldr	r3, [pc, #68]	@ (80033c4 <HAL_SPI_MspInit+0x88>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	4a10      	ldr	r2, [pc, #64]	@ (80033c4 <HAL_SPI_MspInit+0x88>)
 8003384:	f043 0302 	orr.w	r3, r3, #2
 8003388:	6313      	str	r3, [r2, #48]	@ 0x30
 800338a:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <HAL_SPI_MspInit+0x88>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003396:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800339a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a4:	2303      	movs	r3, #3
 80033a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033a8:	2305      	movs	r3, #5
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	4619      	mov	r1, r3
 80033b2:	4805      	ldr	r0, [pc, #20]	@ (80033c8 <HAL_SPI_MspInit+0x8c>)
 80033b4:	f000 feb4 	bl	8004120 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80033b8:	bf00      	nop
 80033ba:	3728      	adds	r7, #40	@ 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40003800 	.word	0x40003800
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40020400 	.word	0x40020400

080033cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <HAL_MspInit+0x4c>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	4a0f      	ldr	r2, [pc, #60]	@ (8003418 <HAL_MspInit+0x4c>)
 80033dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003418 <HAL_MspInit+0x4c>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ea:	607b      	str	r3, [r7, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_MspInit+0x4c>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	4a08      	ldr	r2, [pc, #32]	@ (8003418 <HAL_MspInit+0x4c>)
 80033f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033fe:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <HAL_MspInit+0x4c>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800

0800341c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <NMI_Handler+0x4>

08003424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003428:	bf00      	nop
 800342a:	e7fd      	b.n	8003428 <HardFault_Handler+0x4>

0800342c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003430:	bf00      	nop
 8003432:	e7fd      	b.n	8003430 <MemManage_Handler+0x4>

08003434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003438:	bf00      	nop
 800343a:	e7fd      	b.n	8003438 <BusFault_Handler+0x4>

0800343c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003440:	bf00      	nop
 8003442:	e7fd      	b.n	8003440 <UsageFault_Handler+0x4>

08003444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003448:	bf00      	nop
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003472:	f000 fc51 	bl	8003d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003480:	4802      	ldr	r0, [pc, #8]	@ (800348c <TIM2_IRQHandler+0x10>)
 8003482:	f002 fbdd 	bl	8005c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	200002c4 	.word	0x200002c4

08003490 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003494:	4802      	ldr	r0, [pc, #8]	@ (80034a0 <USART2_IRQHandler+0x10>)
 8003496:	f003 fafd 	bl	8006a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	2000039c 	.word	0x2000039c

080034a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034a8:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <SystemInit+0x20>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ae:	4a05      	ldr	r2, [pc, #20]	@ (80034c4 <SystemInit+0x20>)
 80034b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034b8:	bf00      	nop
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	e000ed00 	.word	0xe000ed00

080034c8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034ce:	f107 0308 	add.w	r3, r7, #8
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034dc:	463b      	mov	r3, r7
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034e4:	4b1d      	ldr	r3, [pc, #116]	@ (800355c <MX_TIM2_Init+0x94>)
 80034e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80034ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 80034ec:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <MX_TIM2_Init+0x94>)
 80034ee:	2210      	movs	r2, #16
 80034f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034f2:	4b1a      	ldr	r3, [pc, #104]	@ (800355c <MX_TIM2_Init+0x94>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80034f8:	4b18      	ldr	r3, [pc, #96]	@ (800355c <MX_TIM2_Init+0x94>)
 80034fa:	220a      	movs	r2, #10
 80034fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034fe:	4b17      	ldr	r3, [pc, #92]	@ (800355c <MX_TIM2_Init+0x94>)
 8003500:	2200      	movs	r2, #0
 8003502:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003504:	4b15      	ldr	r3, [pc, #84]	@ (800355c <MX_TIM2_Init+0x94>)
 8003506:	2200      	movs	r2, #0
 8003508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800350a:	4814      	ldr	r0, [pc, #80]	@ (800355c <MX_TIM2_Init+0x94>)
 800350c:	f002 f9e6 	bl	80058dc <HAL_TIM_Base_Init>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8003516:	f7fd ffff 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800351a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800351e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003520:	f107 0308 	add.w	r3, r7, #8
 8003524:	4619      	mov	r1, r3
 8003526:	480d      	ldr	r0, [pc, #52]	@ (800355c <MX_TIM2_Init+0x94>)
 8003528:	f002 fd54 	bl	8005fd4 <HAL_TIM_ConfigClockSource>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8003532:	f7fd fff1 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003536:	2320      	movs	r3, #32
 8003538:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800353a:	2300      	movs	r3, #0
 800353c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800353e:	463b      	mov	r3, r7
 8003540:	4619      	mov	r1, r3
 8003542:	4806      	ldr	r0, [pc, #24]	@ (800355c <MX_TIM2_Init+0x94>)
 8003544:	f003 f90c 	bl	8006760 <HAL_TIMEx_MasterConfigSynchronization>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800354e:	f7fd ffe3 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	200002c4 	.word	0x200002c4

08003560 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	@ 0x28
 8003564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003566:	f107 0320 	add.w	r3, r7, #32
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	609a      	str	r2, [r3, #8]
 800357a:	60da      	str	r2, [r3, #12]
 800357c:	611a      	str	r2, [r3, #16]
 800357e:	615a      	str	r2, [r3, #20]
 8003580:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003582:	4b27      	ldr	r3, [pc, #156]	@ (8003620 <MX_TIM3_Init+0xc0>)
 8003584:	4a27      	ldr	r2, [pc, #156]	@ (8003624 <MX_TIM3_Init+0xc4>)
 8003586:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 8003588:	4b25      	ldr	r3, [pc, #148]	@ (8003620 <MX_TIM3_Init+0xc0>)
 800358a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800358e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003590:	4b23      	ldr	r3, [pc, #140]	@ (8003620 <MX_TIM3_Init+0xc0>)
 8003592:	2200      	movs	r2, #0
 8003594:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8003596:	4b22      	ldr	r3, [pc, #136]	@ (8003620 <MX_TIM3_Init+0xc0>)
 8003598:	2263      	movs	r2, #99	@ 0x63
 800359a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800359c:	4b20      	ldr	r3, [pc, #128]	@ (8003620 <MX_TIM3_Init+0xc0>)
 800359e:	2200      	movs	r2, #0
 80035a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003620 <MX_TIM3_Init+0xc0>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035a8:	481d      	ldr	r0, [pc, #116]	@ (8003620 <MX_TIM3_Init+0xc0>)
 80035aa:	f002 fa49 	bl	8005a40 <HAL_TIM_PWM_Init>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80035b4:	f7fd ffb0 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b8:	2300      	movs	r3, #0
 80035ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035bc:	2300      	movs	r3, #0
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035c0:	f107 0320 	add.w	r3, r7, #32
 80035c4:	4619      	mov	r1, r3
 80035c6:	4816      	ldr	r0, [pc, #88]	@ (8003620 <MX_TIM3_Init+0xc0>)
 80035c8:	f003 f8ca 	bl	8006760 <HAL_TIMEx_MasterConfigSynchronization>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80035d2:	f7fd ffa1 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035d6:	2360      	movs	r3, #96	@ 0x60
 80035d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	2200      	movs	r2, #0
 80035ea:	4619      	mov	r1, r3
 80035ec:	480c      	ldr	r0, [pc, #48]	@ (8003620 <MX_TIM3_Init+0xc0>)
 80035ee:	f002 fc2f 	bl	8005e50 <HAL_TIM_PWM_ConfigChannel>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80035f8:	f7fd ff8e 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035fc:	1d3b      	adds	r3, r7, #4
 80035fe:	2204      	movs	r2, #4
 8003600:	4619      	mov	r1, r3
 8003602:	4807      	ldr	r0, [pc, #28]	@ (8003620 <MX_TIM3_Init+0xc0>)
 8003604:	f002 fc24 	bl	8005e50 <HAL_TIM_PWM_ConfigChannel>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800360e:	f7fd ff83 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003612:	4803      	ldr	r0, [pc, #12]	@ (8003620 <MX_TIM3_Init+0xc0>)
 8003614:	f000 f8ca 	bl	80037ac <HAL_TIM_MspPostInit>

}
 8003618:	bf00      	nop
 800361a:	3728      	adds	r7, #40	@ 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	2000030c 	.word	0x2000030c
 8003624:	40000400 	.word	0x40000400

08003628 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	@ 0x28
 800362c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800362e:	f107 0320 	add.w	r3, r7, #32
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003638:	1d3b      	adds	r3, r7, #4
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	609a      	str	r2, [r3, #8]
 8003642:	60da      	str	r2, [r3, #12]
 8003644:	611a      	str	r2, [r3, #16]
 8003646:	615a      	str	r2, [r3, #20]
 8003648:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800364a:	4b27      	ldr	r3, [pc, #156]	@ (80036e8 <MX_TIM4_Init+0xc0>)
 800364c:	4a27      	ldr	r2, [pc, #156]	@ (80036ec <MX_TIM4_Init+0xc4>)
 800364e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500-1;
 8003650:	4b25      	ldr	r3, [pc, #148]	@ (80036e8 <MX_TIM4_Init+0xc0>)
 8003652:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8003656:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003658:	4b23      	ldr	r3, [pc, #140]	@ (80036e8 <MX_TIM4_Init+0xc0>)
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800365e:	4b22      	ldr	r3, [pc, #136]	@ (80036e8 <MX_TIM4_Init+0xc0>)
 8003660:	2263      	movs	r2, #99	@ 0x63
 8003662:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003664:	4b20      	ldr	r3, [pc, #128]	@ (80036e8 <MX_TIM4_Init+0xc0>)
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800366a:	4b1f      	ldr	r3, [pc, #124]	@ (80036e8 <MX_TIM4_Init+0xc0>)
 800366c:	2200      	movs	r2, #0
 800366e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003670:	481d      	ldr	r0, [pc, #116]	@ (80036e8 <MX_TIM4_Init+0xc0>)
 8003672:	f002 f9e5 	bl	8005a40 <HAL_TIM_PWM_Init>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800367c:	f7fd ff4c 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003680:	2300      	movs	r3, #0
 8003682:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003684:	2300      	movs	r3, #0
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003688:	f107 0320 	add.w	r3, r7, #32
 800368c:	4619      	mov	r1, r3
 800368e:	4816      	ldr	r0, [pc, #88]	@ (80036e8 <MX_TIM4_Init+0xc0>)
 8003690:	f003 f866 	bl	8006760 <HAL_TIMEx_MasterConfigSynchronization>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800369a:	f7fd ff3d 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800369e:	2360      	movs	r3, #96	@ 0x60
 80036a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	2200      	movs	r2, #0
 80036b2:	4619      	mov	r1, r3
 80036b4:	480c      	ldr	r0, [pc, #48]	@ (80036e8 <MX_TIM4_Init+0xc0>)
 80036b6:	f002 fbcb 	bl	8005e50 <HAL_TIM_PWM_ConfigChannel>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80036c0:	f7fd ff2a 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	2204      	movs	r2, #4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4807      	ldr	r0, [pc, #28]	@ (80036e8 <MX_TIM4_Init+0xc0>)
 80036cc:	f002 fbc0 	bl	8005e50 <HAL_TIM_PWM_ConfigChannel>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80036d6:	f7fd ff1f 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80036da:	4803      	ldr	r0, [pc, #12]	@ (80036e8 <MX_TIM4_Init+0xc0>)
 80036dc:	f000 f866 	bl	80037ac <HAL_TIM_MspPostInit>

}
 80036e0:	bf00      	nop
 80036e2:	3728      	adds	r7, #40	@ 0x28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000354 	.word	0x20000354
 80036ec:	40000800 	.word	0x40000800

080036f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003700:	d115      	bne.n	800372e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	4b0c      	ldr	r3, [pc, #48]	@ (8003738 <HAL_TIM_Base_MspInit+0x48>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	4a0b      	ldr	r2, [pc, #44]	@ (8003738 <HAL_TIM_Base_MspInit+0x48>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6413      	str	r3, [r2, #64]	@ 0x40
 8003712:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <HAL_TIM_Base_MspInit+0x48>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800371e:	2200      	movs	r2, #0
 8003720:	2100      	movs	r1, #0
 8003722:	201c      	movs	r0, #28
 8003724:	f000 fc17 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003728:	201c      	movs	r0, #28
 800372a:	f000 fc30 	bl	8003f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800

0800373c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a15      	ldr	r2, [pc, #84]	@ (80037a0 <HAL_TIM_PWM_MspInit+0x64>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10e      	bne.n	800376c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b14      	ldr	r3, [pc, #80]	@ (80037a4 <HAL_TIM_PWM_MspInit+0x68>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	4a13      	ldr	r2, [pc, #76]	@ (80037a4 <HAL_TIM_PWM_MspInit+0x68>)
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	6413      	str	r3, [r2, #64]	@ 0x40
 800375e:	4b11      	ldr	r3, [pc, #68]	@ (80037a4 <HAL_TIM_PWM_MspInit+0x68>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800376a:	e012      	b.n	8003792 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM4)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0d      	ldr	r2, [pc, #52]	@ (80037a8 <HAL_TIM_PWM_MspInit+0x6c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d10d      	bne.n	8003792 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	4b0a      	ldr	r3, [pc, #40]	@ (80037a4 <HAL_TIM_PWM_MspInit+0x68>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	4a09      	ldr	r2, [pc, #36]	@ (80037a4 <HAL_TIM_PWM_MspInit+0x68>)
 8003780:	f043 0304 	orr.w	r3, r3, #4
 8003784:	6413      	str	r3, [r2, #64]	@ 0x40
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <HAL_TIM_PWM_MspInit+0x68>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40000400 	.word	0x40000400
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40000800 	.word	0x40000800

080037ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	@ 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a24      	ldr	r2, [pc, #144]	@ (800385c <HAL_TIM_MspPostInit+0xb0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d11e      	bne.n	800380c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	4b23      	ldr	r3, [pc, #140]	@ (8003860 <HAL_TIM_MspPostInit+0xb4>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	4a22      	ldr	r2, [pc, #136]	@ (8003860 <HAL_TIM_MspPostInit+0xb4>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037de:	4b20      	ldr	r3, [pc, #128]	@ (8003860 <HAL_TIM_MspPostInit+0xb4>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037ea:	23c0      	movs	r3, #192	@ 0xc0
 80037ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ee:	2302      	movs	r3, #2
 80037f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f6:	2300      	movs	r3, #0
 80037f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037fa:	2302      	movs	r3, #2
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037fe:	f107 0314 	add.w	r3, r7, #20
 8003802:	4619      	mov	r1, r3
 8003804:	4817      	ldr	r0, [pc, #92]	@ (8003864 <HAL_TIM_MspPostInit+0xb8>)
 8003806:	f000 fc8b 	bl	8004120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800380a:	e022      	b.n	8003852 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM4)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a15      	ldr	r2, [pc, #84]	@ (8003868 <HAL_TIM_MspPostInit+0xbc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d11d      	bne.n	8003852 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	4b11      	ldr	r3, [pc, #68]	@ (8003860 <HAL_TIM_MspPostInit+0xb4>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381e:	4a10      	ldr	r2, [pc, #64]	@ (8003860 <HAL_TIM_MspPostInit+0xb4>)
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	6313      	str	r3, [r2, #48]	@ 0x30
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <HAL_TIM_MspPostInit+0xb4>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003832:	23c0      	movs	r3, #192	@ 0xc0
 8003834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003836:	2302      	movs	r3, #2
 8003838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383e:	2300      	movs	r3, #0
 8003840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003842:	2302      	movs	r3, #2
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003846:	f107 0314 	add.w	r3, r7, #20
 800384a:	4619      	mov	r1, r3
 800384c:	4807      	ldr	r0, [pc, #28]	@ (800386c <HAL_TIM_MspPostInit+0xc0>)
 800384e:	f000 fc67 	bl	8004120 <HAL_GPIO_Init>
}
 8003852:	bf00      	nop
 8003854:	3728      	adds	r7, #40	@ 0x28
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40000400 	.word	0x40000400
 8003860:	40023800 	.word	0x40023800
 8003864:	40020000 	.word	0x40020000
 8003868:	40000800 	.word	0x40000800
 800386c:	40020400 	.word	0x40020400

08003870 <tle5012_ReadAngle>:
 * Description  : ��ȡ���ԽǶ�ֵ
 * Parameters   : none
 * Returns      : none
************************************************/
float tle5012_ReadAngle(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
	/*0x4000 = -180			0x3FFF = +179.99*/
//	return (float)( tle5012_ReadValue(READ_ANGLE_VALUE) * ANG_RATIO );
	uint16_t var,res1,res2;
	float angle;

	var = READ_ANGLE_VALUE;
 8003876:	f248 0321 	movw	r3, #32801	@ 0x8021
 800387a:	817b      	strh	r3, [r7, #10]
	SPI_CS_ENABLE;
 800387c:	2200      	movs	r2, #0
 800387e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003882:	481a      	ldr	r0, [pc, #104]	@ (80038ec <tle5012_ReadAngle+0x7c>)
 8003884:	f000 fdd0 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 8003888:	f107 010a 	add.w	r1, r7, #10
 800388c:	23ff      	movs	r3, #255	@ 0xff
 800388e:	2201      	movs	r2, #1
 8003890:	4817      	ldr	r0, [pc, #92]	@ (80038f0 <tle5012_ReadAngle+0x80>)
 8003892:	f001 fb04 	bl	8004e9e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 8003896:	f107 0108 	add.w	r1, r7, #8
 800389a:	23ff      	movs	r3, #255	@ 0xff
 800389c:	2201      	movs	r2, #1
 800389e:	4814      	ldr	r0, [pc, #80]	@ (80038f0 <tle5012_ReadAngle+0x80>)
 80038a0:	f001 fc39 	bl	8005116 <HAL_SPI_Receive>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res2), 1, 0xff);
 80038a4:	1db9      	adds	r1, r7, #6
 80038a6:	23ff      	movs	r3, #255	@ 0xff
 80038a8:	2201      	movs	r2, #1
 80038aa:	4811      	ldr	r0, [pc, #68]	@ (80038f0 <tle5012_ReadAngle+0x80>)
 80038ac:	f001 fc33 	bl	8005116 <HAL_SPI_Receive>
	res1 = res1&0x7FFF;
 80038b0:	893b      	ldrh	r3, [r7, #8]
 80038b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	813b      	strh	r3, [r7, #8]
	SPI_CS_DISABLE;
 80038ba:	2201      	movs	r2, #1
 80038bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80038c0:	480a      	ldr	r0, [pc, #40]	@ (80038ec <tle5012_ReadAngle+0x7c>)
 80038c2:	f000 fdb1 	bl	8004428 <HAL_GPIO_WritePin>
	angle = (float)(res1*ANG_RATIO);
 80038c6:	893b      	ldrh	r3, [r7, #8]
 80038c8:	ee07 3a90 	vmov	s15, r3
 80038cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038d0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80038f4 <tle5012_ReadAngle+0x84>
 80038d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038d8:	edc7 7a03 	vstr	s15, [r7, #12]
	//if (angle>0) {angle=(180+angle);}
	//if (angle<0) {angle=180+(180+angle);}
	//if (angle<0) {angle=180+(180+angle);}
	//sprintf_min((char*)stringo,"rx angle: %.2f \r\n",angle);
	//HAL_UART_Transmit(&huart2,stringo,sizeof(stringo),0xff);
	return(angle);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	ee07 3a90 	vmov	s15, r3
}
 80038e2:	eeb0 0a67 	vmov.f32	s0, s15
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40020000 	.word	0x40020000
 80038f0:	2000026c 	.word	0x2000026c
 80038f4:	3c33fea0 	.word	0x3c33fea0

080038f8 <tle5012_ReadAngle2>:



void tle5012_ReadAngle2(float* angle)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	/*0x4000 = -180			0x3FFF = +179.99*/
//	return (float)( tle5012_ReadValue(READ_ANGLE_VALUE) * ANG_RATIO );
	uint16_t var,res1,res2;
	//float angle;

	var = READ_ANGLE_VALUE;
 8003900:	f248 0321 	movw	r3, #32801	@ 0x8021
 8003904:	81fb      	strh	r3, [r7, #14]
	SPI_CS_ENABLE2;
 8003906:	2200      	movs	r2, #0
 8003908:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800390c:	4819      	ldr	r0, [pc, #100]	@ (8003974 <tle5012_ReadAngle2+0x7c>)
 800390e:	f000 fd8b 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 8003912:	f107 010e 	add.w	r1, r7, #14
 8003916:	23ff      	movs	r3, #255	@ 0xff
 8003918:	2201      	movs	r2, #1
 800391a:	4817      	ldr	r0, [pc, #92]	@ (8003978 <tle5012_ReadAngle2+0x80>)
 800391c:	f001 fabf 	bl	8004e9e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 8003920:	f107 010c 	add.w	r1, r7, #12
 8003924:	23ff      	movs	r3, #255	@ 0xff
 8003926:	2201      	movs	r2, #1
 8003928:	4813      	ldr	r0, [pc, #76]	@ (8003978 <tle5012_ReadAngle2+0x80>)
 800392a:	f001 fbf4 	bl	8005116 <HAL_SPI_Receive>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res2), 1, 0xff);
 800392e:	f107 010a 	add.w	r1, r7, #10
 8003932:	23ff      	movs	r3, #255	@ 0xff
 8003934:	2201      	movs	r2, #1
 8003936:	4810      	ldr	r0, [pc, #64]	@ (8003978 <tle5012_ReadAngle2+0x80>)
 8003938:	f001 fbed 	bl	8005116 <HAL_SPI_Receive>
	res1 = res1&0x7FFF;
 800393c:	89bb      	ldrh	r3, [r7, #12]
 800393e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003942:	b29b      	uxth	r3, r3
 8003944:	81bb      	strh	r3, [r7, #12]
	SPI_CS_DISABLE2;
 8003946:	2201      	movs	r2, #1
 8003948:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800394c:	4809      	ldr	r0, [pc, #36]	@ (8003974 <tle5012_ReadAngle2+0x7c>)
 800394e:	f000 fd6b 	bl	8004428 <HAL_GPIO_WritePin>
	*angle = (float)(res1*ANG_RATIO);
 8003952:	89bb      	ldrh	r3, [r7, #12]
 8003954:	ee07 3a90 	vmov	s15, r3
 8003958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800395c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800397c <tle5012_ReadAngle2+0x84>
 8003960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	edc3 7a00 	vstr	s15, [r3]
	//sprintf_min((char*)stringo,"rx angle: %.2f \r\n",*angle);
	//HAL_UART_Transmit(&huart2,stringo,sizeof(stringo),0xff);
	//return(&angle);
}
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40020000 	.word	0x40020000
 8003978:	2000026c 	.word	0x2000026c
 800397c:	3c33fea0 	.word	0x3c33fea0

08003980 <tle5012_ReadRevol>:
 * Description  : ��ת�٣���ʱ���һ
 * Parameters   : DirΪ0������˳�� DirΪ1���෴
 * Returns      : none
************************************************/
int16_t tle5012_ReadRevol(uint8_t Dir)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
	uint16_t var,res1;
	int16_t revol;
	var = READ_RECOL_VALUE;
 800398a:	f248 0341 	movw	r3, #32833	@ 0x8041
 800398e:	81bb      	strh	r3, [r7, #12]
	SPI_CS_ENABLE;
 8003990:	2200      	movs	r2, #0
 8003992:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003996:	4822      	ldr	r0, [pc, #136]	@ (8003a20 <tle5012_ReadRevol+0xa0>)
 8003998:	f000 fd46 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 800399c:	f107 010c 	add.w	r1, r7, #12
 80039a0:	23ff      	movs	r3, #255	@ 0xff
 80039a2:	2201      	movs	r2, #1
 80039a4:	481f      	ldr	r0, [pc, #124]	@ (8003a24 <tle5012_ReadRevol+0xa4>)
 80039a6:	f001 fa7a 	bl	8004e9e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 80039aa:	f107 010a 	add.w	r1, r7, #10
 80039ae:	23ff      	movs	r3, #255	@ 0xff
 80039b0:	2201      	movs	r2, #1
 80039b2:	481c      	ldr	r0, [pc, #112]	@ (8003a24 <tle5012_ReadRevol+0xa4>)
 80039b4:	f001 fbaf 	bl	8005116 <HAL_SPI_Receive>
	res1 = res1&0x1FF;
 80039b8:	897b      	ldrh	r3, [r7, #10]
 80039ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039be:	b29b      	uxth	r3, r3
 80039c0:	817b      	strh	r3, [r7, #10]
	if(res1&0x100)			//Ϊ����
 80039c2:	897b      	ldrh	r3, [r7, #10]
 80039c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d010      	beq.n	80039ee <tle5012_ReadRevol+0x6e>
	{
		res1 = ~res1;
 80039cc:	897b      	ldrh	r3, [r7, #10]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	817b      	strh	r3, [r7, #10]
		res1 &= 0x00FF;
 80039d4:	897b      	ldrh	r3, [r7, #10]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	b29b      	uxth	r3, r3
 80039da:	817b      	strh	r3, [r7, #10]
		res1++;
 80039dc:	897b      	ldrh	r3, [r7, #10]
 80039de:	3301      	adds	r3, #1
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	817b      	strh	r3, [r7, #10]
		revol = (int16_t)(0-res1);
 80039e4:	897b      	ldrh	r3, [r7, #10]
 80039e6:	425b      	negs	r3, r3
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	81fb      	strh	r3, [r7, #14]
 80039ec:	e005      	b.n	80039fa <tle5012_ReadRevol+0x7a>
	}
	else
	{
		res1 &= 0x00FF;
 80039ee:	897b      	ldrh	r3, [r7, #10]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	817b      	strh	r3, [r7, #10]
		revol = (int16_t)res1;
 80039f6:	897b      	ldrh	r3, [r7, #10]
 80039f8:	81fb      	strh	r3, [r7, #14]
	}
	if(Dir)	revol = (int16_t)(0-revol);
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <tle5012_ReadRevol+0x88>
 8003a00:	89fb      	ldrh	r3, [r7, #14]
 8003a02:	425b      	negs	r3, r3
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	81fb      	strh	r3, [r7, #14]
	//sprintf_min((char*)stringo,"rx revol: %d \r\n",revol);
	//HAL_UART_Transmit(&huart2,stringo,sizeof(stringo),0xff);
	SPI_CS_DISABLE;
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003a0e:	4804      	ldr	r0, [pc, #16]	@ (8003a20 <tle5012_ReadRevol+0xa0>)
 8003a10:	f000 fd0a 	bl	8004428 <HAL_GPIO_WritePin>
	return(revol);
 8003a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40020000 	.word	0x40020000
 8003a24:	2000026c 	.word	0x2000026c

08003a28 <tle5012_ReadRevol2>:

int16_t tle5012_ReadRevol2(uint8_t Dir)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	71fb      	strb	r3, [r7, #7]
	uint16_t var,res1;
	int16_t revol;
	var = READ_RECOL_VALUE;
 8003a32:	f248 0341 	movw	r3, #32833	@ 0x8041
 8003a36:	81bb      	strh	r3, [r7, #12]
	SPI_CS_ENABLE2;
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a3e:	4822      	ldr	r0, [pc, #136]	@ (8003ac8 <tle5012_ReadRevol2+0xa0>)
 8003a40:	f000 fcf2 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 8003a44:	f107 010c 	add.w	r1, r7, #12
 8003a48:	23ff      	movs	r3, #255	@ 0xff
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	481f      	ldr	r0, [pc, #124]	@ (8003acc <tle5012_ReadRevol2+0xa4>)
 8003a4e:	f001 fa26 	bl	8004e9e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 8003a52:	f107 010a 	add.w	r1, r7, #10
 8003a56:	23ff      	movs	r3, #255	@ 0xff
 8003a58:	2201      	movs	r2, #1
 8003a5a:	481c      	ldr	r0, [pc, #112]	@ (8003acc <tle5012_ReadRevol2+0xa4>)
 8003a5c:	f001 fb5b 	bl	8005116 <HAL_SPI_Receive>
	res1 = res1&0x1FF;
 8003a60:	897b      	ldrh	r3, [r7, #10]
 8003a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	817b      	strh	r3, [r7, #10]
	if(res1&0x100)			//Ϊ����
 8003a6a:	897b      	ldrh	r3, [r7, #10]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d010      	beq.n	8003a96 <tle5012_ReadRevol2+0x6e>
	{
		res1 = ~res1;
 8003a74:	897b      	ldrh	r3, [r7, #10]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	817b      	strh	r3, [r7, #10]
		res1 &= 0x00FF;
 8003a7c:	897b      	ldrh	r3, [r7, #10]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	817b      	strh	r3, [r7, #10]
		res1++;
 8003a84:	897b      	ldrh	r3, [r7, #10]
 8003a86:	3301      	adds	r3, #1
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	817b      	strh	r3, [r7, #10]
		revol = (int16_t)(0-res1);
 8003a8c:	897b      	ldrh	r3, [r7, #10]
 8003a8e:	425b      	negs	r3, r3
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	81fb      	strh	r3, [r7, #14]
 8003a94:	e005      	b.n	8003aa2 <tle5012_ReadRevol2+0x7a>
	}
	else
	{
		res1 &= 0x00FF;
 8003a96:	897b      	ldrh	r3, [r7, #10]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	817b      	strh	r3, [r7, #10]
		revol = (int16_t)res1;
 8003a9e:	897b      	ldrh	r3, [r7, #10]
 8003aa0:	81fb      	strh	r3, [r7, #14]
	}
	if(Dir)	revol = (int16_t)(0-revol);
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <tle5012_ReadRevol2+0x88>
 8003aa8:	89fb      	ldrh	r3, [r7, #14]
 8003aaa:	425b      	negs	r3, r3
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	81fb      	strh	r3, [r7, #14]
	//sprintf_min((char*)stringo,"rx revol: %d \r\n",revol);
	//HAL_UART_Transmit(&huart2,stringo,sizeof(stringo),0xff);
	SPI_CS_DISABLE2;
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ab6:	4804      	ldr	r0, [pc, #16]	@ (8003ac8 <tle5012_ReadRevol2+0xa0>)
 8003ab8:	f000 fcb6 	bl	8004428 <HAL_GPIO_WritePin>
	return(revol);
 8003abc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40020000 	.word	0x40020000
 8003acc:	2000026c 	.word	0x2000026c

08003ad0 <tle5012_Rset>:
 * Parameters   : DirΪ0������˳�� DirΪ1���෴
 * Returns      : none
************************************************/
//0101 1011 1111 1110       Write:0x5BFF��λӲ��
void tle5012_Rset(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
	uint16_t var,res1;
	var = WRITE_ACSTAT_VALUE;
 8003ad6:	2311      	movs	r3, #17
 8003ad8:	80fb      	strh	r3, [r7, #6]
	SPI_CS_ENABLE;
 8003ada:	2200      	movs	r2, #0
 8003adc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ae0:	4810      	ldr	r0, [pc, #64]	@ (8003b24 <tle5012_Rset+0x54>)
 8003ae2:	f000 fca1 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 8003ae6:	1db9      	adds	r1, r7, #6
 8003ae8:	23ff      	movs	r3, #255	@ 0xff
 8003aea:	2201      	movs	r2, #1
 8003aec:	480e      	ldr	r0, [pc, #56]	@ (8003b28 <tle5012_Rset+0x58>)
 8003aee:	f001 f9d6 	bl	8004e9e <HAL_SPI_Transmit>
	var = 0x5BFF;
 8003af2:	f645 33ff 	movw	r3, #23551	@ 0x5bff
 8003af6:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&SPI_tle5012, (uint8_t *)(&var), 1, 0xff);
 8003af8:	1db9      	adds	r1, r7, #6
 8003afa:	23ff      	movs	r3, #255	@ 0xff
 8003afc:	2201      	movs	r2, #1
 8003afe:	480a      	ldr	r0, [pc, #40]	@ (8003b28 <tle5012_Rset+0x58>)
 8003b00:	f001 f9cd 	bl	8004e9e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPI_tle5012, (uint8_t *)(&res1), 1, 0xff);
 8003b04:	1d39      	adds	r1, r7, #4
 8003b06:	23ff      	movs	r3, #255	@ 0xff
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4807      	ldr	r0, [pc, #28]	@ (8003b28 <tle5012_Rset+0x58>)
 8003b0c:	f001 fb03 	bl	8005116 <HAL_SPI_Receive>
	SPI_CS_DISABLE;
 8003b10:	2201      	movs	r2, #1
 8003b12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b16:	4803      	ldr	r0, [pc, #12]	@ (8003b24 <tle5012_Rset+0x54>)
 8003b18:	f000 fc86 	bl	8004428 <HAL_GPIO_WritePin>
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40020000 	.word	0x40020000
 8003b28:	2000026c 	.word	0x2000026c

08003b2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b30:	4b11      	ldr	r3, [pc, #68]	@ (8003b78 <MX_USART2_UART_Init+0x4c>)
 8003b32:	4a12      	ldr	r2, [pc, #72]	@ (8003b7c <MX_USART2_UART_Init+0x50>)
 8003b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b36:	4b10      	ldr	r3, [pc, #64]	@ (8003b78 <MX_USART2_UART_Init+0x4c>)
 8003b38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b78 <MX_USART2_UART_Init+0x4c>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b44:	4b0c      	ldr	r3, [pc, #48]	@ (8003b78 <MX_USART2_UART_Init+0x4c>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <MX_USART2_UART_Init+0x4c>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b50:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <MX_USART2_UART_Init+0x4c>)
 8003b52:	220c      	movs	r2, #12
 8003b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b56:	4b08      	ldr	r3, [pc, #32]	@ (8003b78 <MX_USART2_UART_Init+0x4c>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b5c:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <MX_USART2_UART_Init+0x4c>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8003b62:	4805      	ldr	r0, [pc, #20]	@ (8003b78 <MX_USART2_UART_Init+0x4c>)
 8003b64:	f002 fe7e 	bl	8006864 <HAL_HalfDuplex_Init>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b6e:	f7fd fcd3 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	2000039c 	.word	0x2000039c
 8003b7c:	40004400 	.word	0x40004400

08003b80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	@ 0x28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b88:	f107 0314 	add.w	r3, r7, #20
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c14 <HAL_UART_MspInit+0x94>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d133      	bne.n	8003c0a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c18 <HAL_UART_MspInit+0x98>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	4a1b      	ldr	r2, [pc, #108]	@ (8003c18 <HAL_UART_MspInit+0x98>)
 8003bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bb2:	4b19      	ldr	r3, [pc, #100]	@ (8003c18 <HAL_UART_MspInit+0x98>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bba:	613b      	str	r3, [r7, #16]
 8003bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	4b15      	ldr	r3, [pc, #84]	@ (8003c18 <HAL_UART_MspInit+0x98>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	4a14      	ldr	r2, [pc, #80]	@ (8003c18 <HAL_UART_MspInit+0x98>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bce:	4b12      	ldr	r3, [pc, #72]	@ (8003c18 <HAL_UART_MspInit+0x98>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003bda:	2304      	movs	r3, #4
 8003bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bde:	2312      	movs	r3, #18
 8003be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be6:	2303      	movs	r3, #3
 8003be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bea:	2307      	movs	r3, #7
 8003bec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bee:	f107 0314 	add.w	r3, r7, #20
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4809      	ldr	r0, [pc, #36]	@ (8003c1c <HAL_UART_MspInit+0x9c>)
 8003bf6:	f000 fa93 	bl	8004120 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	2026      	movs	r0, #38	@ 0x26
 8003c00:	f000 f9a9 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c04:	2026      	movs	r0, #38	@ 0x26
 8003c06:	f000 f9c2 	bl	8003f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003c0a:	bf00      	nop
 8003c0c:	3728      	adds	r7, #40	@ 0x28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40004400 	.word	0x40004400
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40020000 	.word	0x40020000

08003c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c24:	480d      	ldr	r0, [pc, #52]	@ (8003c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c26:	490e      	ldr	r1, [pc, #56]	@ (8003c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c28:	4a0e      	ldr	r2, [pc, #56]	@ (8003c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c2c:	e002      	b.n	8003c34 <LoopCopyDataInit>

08003c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c32:	3304      	adds	r3, #4

08003c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c38:	d3f9      	bcc.n	8003c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c3a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c3c:	4c0b      	ldr	r4, [pc, #44]	@ (8003c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c40:	e001      	b.n	8003c46 <LoopFillZerobss>

08003c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c44:	3204      	adds	r2, #4

08003c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c48:	d3fb      	bcc.n	8003c42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c4a:	f7ff fc2b 	bl	80034a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c4e:	f003 fe97 	bl	8007980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c52:	f7fd f999 	bl	8000f88 <main>
  bx  lr    
 8003c56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c60:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8003c64:	08007ab0 	.word	0x08007ab0
  ldr r2, =_sbss
 8003c68:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8003c6c:	200003e4 	.word	0x200003e4

08003c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c70:	e7fe      	b.n	8003c70 <ADC_IRQHandler>
	...

08003c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c78:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb4 <HAL_Init+0x40>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb4 <HAL_Init+0x40>)
 8003c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c84:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <HAL_Init+0x40>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb4 <HAL_Init+0x40>)
 8003c8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c90:	4b08      	ldr	r3, [pc, #32]	@ (8003cb4 <HAL_Init+0x40>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a07      	ldr	r2, [pc, #28]	@ (8003cb4 <HAL_Init+0x40>)
 8003c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c9c:	2003      	movs	r0, #3
 8003c9e:	f000 f94f 	bl	8003f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ca2:	200f      	movs	r0, #15
 8003ca4:	f000 f808 	bl	8003cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ca8:	f7ff fb90 	bl	80033cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40023c00 	.word	0x40023c00

08003cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cc0:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <HAL_InitTick+0x54>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b12      	ldr	r3, [pc, #72]	@ (8003d10 <HAL_InitTick+0x58>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f967 	bl	8003faa <HAL_SYSTICK_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00e      	b.n	8003d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b0f      	cmp	r3, #15
 8003cea:	d80a      	bhi.n	8003d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cec:	2200      	movs	r2, #0
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	f000 f92f 	bl	8003f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cf8:	4a06      	ldr	r2, [pc, #24]	@ (8003d14 <HAL_InitTick+0x5c>)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	200000a0 	.word	0x200000a0
 8003d10:	200000a8 	.word	0x200000a8
 8003d14:	200000a4 	.word	0x200000a4

08003d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <HAL_IncTick+0x20>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_IncTick+0x24>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4413      	add	r3, r2
 8003d28:	4a04      	ldr	r2, [pc, #16]	@ (8003d3c <HAL_IncTick+0x24>)
 8003d2a:	6013      	str	r3, [r2, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	200000a8 	.word	0x200000a8
 8003d3c:	200003e0 	.word	0x200003e0

08003d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return uwTick;
 8003d44:	4b03      	ldr	r3, [pc, #12]	@ (8003d54 <HAL_GetTick+0x14>)
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	200003e0 	.word	0x200003e0

08003d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d60:	f7ff ffee 	bl	8003d40 <HAL_GetTick>
 8003d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d005      	beq.n	8003d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d72:	4b0a      	ldr	r3, [pc, #40]	@ (8003d9c <HAL_Delay+0x44>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d7e:	bf00      	nop
 8003d80:	f7ff ffde 	bl	8003d40 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d8f7      	bhi.n	8003d80 <HAL_Delay+0x28>
  {
  }
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	200000a8 	.word	0x200000a8

08003da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db0:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dd2:	4a04      	ldr	r2, [pc, #16]	@ (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	60d3      	str	r3, [r2, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dec:	4b04      	ldr	r3, [pc, #16]	@ (8003e00 <__NVIC_GetPriorityGrouping+0x18>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	f003 0307 	and.w	r3, r3, #7
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	db0b      	blt.n	8003e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	f003 021f 	and.w	r2, r3, #31
 8003e1c:	4907      	ldr	r1, [pc, #28]	@ (8003e3c <__NVIC_EnableIRQ+0x38>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	2001      	movs	r0, #1
 8003e26:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	e000e100 	.word	0xe000e100

08003e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	6039      	str	r1, [r7, #0]
 8003e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	db0a      	blt.n	8003e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	490c      	ldr	r1, [pc, #48]	@ (8003e8c <__NVIC_SetPriority+0x4c>)
 8003e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5e:	0112      	lsls	r2, r2, #4
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	440b      	add	r3, r1
 8003e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e68:	e00a      	b.n	8003e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	4908      	ldr	r1, [pc, #32]	@ (8003e90 <__NVIC_SetPriority+0x50>)
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	3b04      	subs	r3, #4
 8003e78:	0112      	lsls	r2, r2, #4
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	761a      	strb	r2, [r3, #24]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000e100 	.word	0xe000e100
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	@ 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f1c3 0307 	rsb	r3, r3, #7
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	bf28      	it	cs
 8003eb2:	2304      	movcs	r3, #4
 8003eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d902      	bls.n	8003ec4 <NVIC_EncodePriority+0x30>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3b03      	subs	r3, #3
 8003ec2:	e000      	b.n	8003ec6 <NVIC_EncodePriority+0x32>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003edc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	43d9      	mvns	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eec:	4313      	orrs	r3, r2
         );
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3724      	adds	r7, #36	@ 0x24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f0c:	d301      	bcc.n	8003f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e00f      	b.n	8003f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f12:	4a0a      	ldr	r2, [pc, #40]	@ (8003f3c <SysTick_Config+0x40>)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f1a:	210f      	movs	r1, #15
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f20:	f7ff ff8e 	bl	8003e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f24:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <SysTick_Config+0x40>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f2a:	4b04      	ldr	r3, [pc, #16]	@ (8003f3c <SysTick_Config+0x40>)
 8003f2c:	2207      	movs	r2, #7
 8003f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	e000e010 	.word	0xe000e010

08003f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff29 	bl	8003da0 <__NVIC_SetPriorityGrouping>
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b086      	sub	sp, #24
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
 8003f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f68:	f7ff ff3e 	bl	8003de8 <__NVIC_GetPriorityGrouping>
 8003f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	6978      	ldr	r0, [r7, #20]
 8003f74:	f7ff ff8e 	bl	8003e94 <NVIC_EncodePriority>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff ff5d 	bl	8003e40 <__NVIC_SetPriority>
}
 8003f86:	bf00      	nop
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	4603      	mov	r3, r0
 8003f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff31 	bl	8003e04 <__NVIC_EnableIRQ>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff ffa2 	bl	8003efc <SysTick_Config>
 8003fb8:	4603      	mov	r3, r0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e00e      	b.n	8003ff2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	795b      	ldrb	r3, [r3, #5]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d105      	bne.n	8003fea <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7fc ff21 	bl	8000e2c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004006:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004008:	f7ff fe9a 	bl	8003d40 <HAL_GetTick>
 800400c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d008      	beq.n	800402c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2280      	movs	r2, #128	@ 0x80
 800401e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e052      	b.n	80040d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0216 	bic.w	r2, r2, #22
 800403a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800404a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d103      	bne.n	800405c <HAL_DMA_Abort+0x62>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0208 	bic.w	r2, r2, #8
 800406a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0201 	bic.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800407c:	e013      	b.n	80040a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800407e:	f7ff fe5f 	bl	8003d40 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b05      	cmp	r3, #5
 800408a:	d90c      	bls.n	80040a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2203      	movs	r2, #3
 8004096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e015      	b.n	80040d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e4      	bne.n	800407e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b8:	223f      	movs	r2, #63	@ 0x3f
 80040ba:	409a      	lsls	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d004      	beq.n	80040f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2280      	movs	r2, #128	@ 0x80
 80040f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e00c      	b.n	8004112 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2205      	movs	r2, #5
 80040fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004120:	b480      	push	{r7}
 8004122:	b089      	sub	sp, #36	@ 0x24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	e159      	b.n	80043f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800413c:	2201      	movs	r2, #1
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	429a      	cmp	r2, r3
 8004156:	f040 8148 	bne.w	80043ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d005      	beq.n	8004172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800416e:	2b02      	cmp	r3, #2
 8004170:	d130      	bne.n	80041d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	2203      	movs	r2, #3
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041a8:	2201      	movs	r2, #1
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4013      	ands	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 0201 	and.w	r2, r3, #1
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d017      	beq.n	8004210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	2203      	movs	r2, #3
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d123      	bne.n	8004264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	08da      	lsrs	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3208      	adds	r2, #8
 8004224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	220f      	movs	r2, #15
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	43db      	mvns	r3, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4313      	orrs	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	08da      	lsrs	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3208      	adds	r2, #8
 800425e:	69b9      	ldr	r1, [r7, #24]
 8004260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	2203      	movs	r2, #3
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0203 	and.w	r2, r3, #3
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80a2 	beq.w	80043ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	4b57      	ldr	r3, [pc, #348]	@ (8004408 <HAL_GPIO_Init+0x2e8>)
 80042ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ae:	4a56      	ldr	r2, [pc, #344]	@ (8004408 <HAL_GPIO_Init+0x2e8>)
 80042b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80042b6:	4b54      	ldr	r3, [pc, #336]	@ (8004408 <HAL_GPIO_Init+0x2e8>)
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042c2:	4a52      	ldr	r2, [pc, #328]	@ (800440c <HAL_GPIO_Init+0x2ec>)
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	089b      	lsrs	r3, r3, #2
 80042c8:	3302      	adds	r3, #2
 80042ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	220f      	movs	r2, #15
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a49      	ldr	r2, [pc, #292]	@ (8004410 <HAL_GPIO_Init+0x2f0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d019      	beq.n	8004322 <HAL_GPIO_Init+0x202>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a48      	ldr	r2, [pc, #288]	@ (8004414 <HAL_GPIO_Init+0x2f4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_GPIO_Init+0x1fe>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a47      	ldr	r2, [pc, #284]	@ (8004418 <HAL_GPIO_Init+0x2f8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00d      	beq.n	800431a <HAL_GPIO_Init+0x1fa>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a46      	ldr	r2, [pc, #280]	@ (800441c <HAL_GPIO_Init+0x2fc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <HAL_GPIO_Init+0x1f6>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a45      	ldr	r2, [pc, #276]	@ (8004420 <HAL_GPIO_Init+0x300>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <HAL_GPIO_Init+0x1f2>
 800430e:	2304      	movs	r3, #4
 8004310:	e008      	b.n	8004324 <HAL_GPIO_Init+0x204>
 8004312:	2307      	movs	r3, #7
 8004314:	e006      	b.n	8004324 <HAL_GPIO_Init+0x204>
 8004316:	2303      	movs	r3, #3
 8004318:	e004      	b.n	8004324 <HAL_GPIO_Init+0x204>
 800431a:	2302      	movs	r3, #2
 800431c:	e002      	b.n	8004324 <HAL_GPIO_Init+0x204>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <HAL_GPIO_Init+0x204>
 8004322:	2300      	movs	r3, #0
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	f002 0203 	and.w	r2, r2, #3
 800432a:	0092      	lsls	r2, r2, #2
 800432c:	4093      	lsls	r3, r2
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004334:	4935      	ldr	r1, [pc, #212]	@ (800440c <HAL_GPIO_Init+0x2ec>)
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	089b      	lsrs	r3, r3, #2
 800433a:	3302      	adds	r3, #2
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004342:	4b38      	ldr	r3, [pc, #224]	@ (8004424 <HAL_GPIO_Init+0x304>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	43db      	mvns	r3, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4013      	ands	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004366:	4a2f      	ldr	r2, [pc, #188]	@ (8004424 <HAL_GPIO_Init+0x304>)
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800436c:	4b2d      	ldr	r3, [pc, #180]	@ (8004424 <HAL_GPIO_Init+0x304>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	43db      	mvns	r3, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004390:	4a24      	ldr	r2, [pc, #144]	@ (8004424 <HAL_GPIO_Init+0x304>)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004396:	4b23      	ldr	r3, [pc, #140]	@ (8004424 <HAL_GPIO_Init+0x304>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	43db      	mvns	r3, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4013      	ands	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004424 <HAL_GPIO_Init+0x304>)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043c0:	4b18      	ldr	r3, [pc, #96]	@ (8004424 <HAL_GPIO_Init+0x304>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004424 <HAL_GPIO_Init+0x304>)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3301      	adds	r3, #1
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2b0f      	cmp	r3, #15
 80043f4:	f67f aea2 	bls.w	800413c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	3724      	adds	r7, #36	@ 0x24
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800
 800440c:	40013800 	.word	0x40013800
 8004410:	40020000 	.word	0x40020000
 8004414:	40020400 	.word	0x40020400
 8004418:	40020800 	.word	0x40020800
 800441c:	40020c00 	.word	0x40020c00
 8004420:	40021000 	.word	0x40021000
 8004424:	40013c00 	.word	0x40013c00

08004428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	807b      	strh	r3, [r7, #2]
 8004434:	4613      	mov	r3, r2
 8004436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004438:	787b      	ldrb	r3, [r7, #1]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800443e:	887a      	ldrh	r2, [r7, #2]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004444:	e003      	b.n	800444e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004446:	887b      	ldrh	r3, [r7, #2]
 8004448:	041a      	lsls	r2, r3, #16
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	619a      	str	r2, [r3, #24]
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e267      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d075      	beq.n	8004566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800447a:	4b88      	ldr	r3, [pc, #544]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
 8004482:	2b04      	cmp	r3, #4
 8004484:	d00c      	beq.n	80044a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004486:	4b85      	ldr	r3, [pc, #532]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800448e:	2b08      	cmp	r3, #8
 8004490:	d112      	bne.n	80044b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004492:	4b82      	ldr	r3, [pc, #520]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800449a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800449e:	d10b      	bne.n	80044b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	4b7e      	ldr	r3, [pc, #504]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d05b      	beq.n	8004564 <HAL_RCC_OscConfig+0x108>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d157      	bne.n	8004564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e242      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c0:	d106      	bne.n	80044d0 <HAL_RCC_OscConfig+0x74>
 80044c2:	4b76      	ldr	r3, [pc, #472]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a75      	ldr	r2, [pc, #468]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e01d      	b.n	800450c <HAL_RCC_OscConfig+0xb0>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCC_OscConfig+0x98>
 80044da:	4b70      	ldr	r3, [pc, #448]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a6f      	ldr	r2, [pc, #444]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	4b6d      	ldr	r3, [pc, #436]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a6c      	ldr	r2, [pc, #432]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	e00b      	b.n	800450c <HAL_RCC_OscConfig+0xb0>
 80044f4:	4b69      	ldr	r3, [pc, #420]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a68      	ldr	r2, [pc, #416]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80044fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	4b66      	ldr	r3, [pc, #408]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a65      	ldr	r2, [pc, #404]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800450a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d013      	beq.n	800453c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7ff fc14 	bl	8003d40 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800451c:	f7ff fc10 	bl	8003d40 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	@ 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e207      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452e:	4b5b      	ldr	r3, [pc, #364]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0xc0>
 800453a:	e014      	b.n	8004566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7ff fc00 	bl	8003d40 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004544:	f7ff fbfc 	bl	8003d40 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b64      	cmp	r3, #100	@ 0x64
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e1f3      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004556:	4b51      	ldr	r3, [pc, #324]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0xe8>
 8004562:	e000      	b.n	8004566 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d063      	beq.n	800463a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004572:	4b4a      	ldr	r3, [pc, #296]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800457e:	4b47      	ldr	r3, [pc, #284]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004586:	2b08      	cmp	r3, #8
 8004588:	d11c      	bne.n	80045c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800458a:	4b44      	ldr	r3, [pc, #272]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d116      	bne.n	80045c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004596:	4b41      	ldr	r3, [pc, #260]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_RCC_OscConfig+0x152>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d001      	beq.n	80045ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e1c7      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ae:	4b3b      	ldr	r3, [pc, #236]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4937      	ldr	r1, [pc, #220]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c2:	e03a      	b.n	800463a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d020      	beq.n	800460e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045cc:	4b34      	ldr	r3, [pc, #208]	@ (80046a0 <HAL_RCC_OscConfig+0x244>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d2:	f7ff fbb5 	bl	8003d40 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045da:	f7ff fbb1 	bl	8003d40 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e1a8      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ec:	4b2b      	ldr	r3, [pc, #172]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f8:	4b28      	ldr	r3, [pc, #160]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4925      	ldr	r1, [pc, #148]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004608:	4313      	orrs	r3, r2
 800460a:	600b      	str	r3, [r1, #0]
 800460c:	e015      	b.n	800463a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800460e:	4b24      	ldr	r3, [pc, #144]	@ (80046a0 <HAL_RCC_OscConfig+0x244>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7ff fb94 	bl	8003d40 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800461c:	f7ff fb90 	bl	8003d40 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e187      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462e:	4b1b      	ldr	r3, [pc, #108]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d036      	beq.n	80046b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d016      	beq.n	800467c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800464e:	4b15      	ldr	r3, [pc, #84]	@ (80046a4 <HAL_RCC_OscConfig+0x248>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004654:	f7ff fb74 	bl	8003d40 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465c:	f7ff fb70 	bl	8003d40 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e167      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466e:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <HAL_RCC_OscConfig+0x240>)
 8004670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x200>
 800467a:	e01b      	b.n	80046b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800467c:	4b09      	ldr	r3, [pc, #36]	@ (80046a4 <HAL_RCC_OscConfig+0x248>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004682:	f7ff fb5d 	bl	8003d40 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	e00e      	b.n	80046a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800468a:	f7ff fb59 	bl	8003d40 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d907      	bls.n	80046a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e150      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
 800469c:	40023800 	.word	0x40023800
 80046a0:	42470000 	.word	0x42470000
 80046a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a8:	4b88      	ldr	r3, [pc, #544]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80046aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1ea      	bne.n	800468a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8097 	beq.w	80047f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c6:	4b81      	ldr	r3, [pc, #516]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10f      	bne.n	80046f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	4b7d      	ldr	r3, [pc, #500]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	4a7c      	ldr	r2, [pc, #496]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80046dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046e2:	4b7a      	ldr	r3, [pc, #488]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ee:	2301      	movs	r3, #1
 80046f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f2:	4b77      	ldr	r3, [pc, #476]	@ (80048d0 <HAL_RCC_OscConfig+0x474>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d118      	bne.n	8004730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fe:	4b74      	ldr	r3, [pc, #464]	@ (80048d0 <HAL_RCC_OscConfig+0x474>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a73      	ldr	r2, [pc, #460]	@ (80048d0 <HAL_RCC_OscConfig+0x474>)
 8004704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800470a:	f7ff fb19 	bl	8003d40 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004712:	f7ff fb15 	bl	8003d40 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e10c      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	4b6a      	ldr	r3, [pc, #424]	@ (80048d0 <HAL_RCC_OscConfig+0x474>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d106      	bne.n	8004746 <HAL_RCC_OscConfig+0x2ea>
 8004738:	4b64      	ldr	r3, [pc, #400]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473c:	4a63      	ldr	r2, [pc, #396]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	6713      	str	r3, [r2, #112]	@ 0x70
 8004744:	e01c      	b.n	8004780 <HAL_RCC_OscConfig+0x324>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b05      	cmp	r3, #5
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0x30c>
 800474e:	4b5f      	ldr	r3, [pc, #380]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004752:	4a5e      	ldr	r2, [pc, #376]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 8004754:	f043 0304 	orr.w	r3, r3, #4
 8004758:	6713      	str	r3, [r2, #112]	@ 0x70
 800475a:	4b5c      	ldr	r3, [pc, #368]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475e:	4a5b      	ldr	r2, [pc, #364]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	6713      	str	r3, [r2, #112]	@ 0x70
 8004766:	e00b      	b.n	8004780 <HAL_RCC_OscConfig+0x324>
 8004768:	4b58      	ldr	r3, [pc, #352]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476c:	4a57      	ldr	r2, [pc, #348]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	6713      	str	r3, [r2, #112]	@ 0x70
 8004774:	4b55      	ldr	r3, [pc, #340]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004778:	4a54      	ldr	r2, [pc, #336]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 800477a:	f023 0304 	bic.w	r3, r3, #4
 800477e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7ff fada 	bl	8003d40 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004790:	f7ff fad6 	bl	8003d40 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e0cb      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a6:	4b49      	ldr	r3, [pc, #292]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0ee      	beq.n	8004790 <HAL_RCC_OscConfig+0x334>
 80047b2:	e014      	b.n	80047de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b4:	f7ff fac4 	bl	8003d40 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ba:	e00a      	b.n	80047d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047bc:	f7ff fac0 	bl	8003d40 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e0b5      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d2:	4b3e      	ldr	r3, [pc, #248]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1ee      	bne.n	80047bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047de:	7dfb      	ldrb	r3, [r7, #23]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d105      	bne.n	80047f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e4:	4b39      	ldr	r3, [pc, #228]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80047e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e8:	4a38      	ldr	r2, [pc, #224]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80047ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80a1 	beq.w	800493c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047fa:	4b34      	ldr	r3, [pc, #208]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	2b08      	cmp	r3, #8
 8004804:	d05c      	beq.n	80048c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d141      	bne.n	8004892 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480e:	4b31      	ldr	r3, [pc, #196]	@ (80048d4 <HAL_RCC_OscConfig+0x478>)
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004814:	f7ff fa94 	bl	8003d40 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800481c:	f7ff fa90 	bl	8003d40 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e087      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482e:	4b27      	ldr	r3, [pc, #156]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	3b01      	subs	r3, #1
 8004854:	041b      	lsls	r3, r3, #16
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	491b      	ldr	r1, [pc, #108]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004864:	4b1b      	ldr	r3, [pc, #108]	@ (80048d4 <HAL_RCC_OscConfig+0x478>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7ff fa69 	bl	8003d40 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004872:	f7ff fa65 	bl	8003d40 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e05c      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004884:	4b11      	ldr	r3, [pc, #68]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x416>
 8004890:	e054      	b.n	800493c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004892:	4b10      	ldr	r3, [pc, #64]	@ (80048d4 <HAL_RCC_OscConfig+0x478>)
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004898:	f7ff fa52 	bl	8003d40 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a0:	f7ff fa4e 	bl	8003d40 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e045      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b2:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <HAL_RCC_OscConfig+0x470>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x444>
 80048be:	e03d      	b.n	800493c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d107      	bne.n	80048d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e038      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40007000 	.word	0x40007000
 80048d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004948 <HAL_RCC_OscConfig+0x4ec>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d028      	beq.n	8004938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d121      	bne.n	8004938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d11a      	bne.n	8004938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004908:	4013      	ands	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800490e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004910:	4293      	cmp	r3, r2
 8004912:	d111      	bne.n	8004938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	3b01      	subs	r3, #1
 8004922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d107      	bne.n	8004938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800

0800494c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0cc      	b.n	8004afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004960:	4b68      	ldr	r3, [pc, #416]	@ (8004b04 <HAL_RCC_ClockConfig+0x1b8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d90c      	bls.n	8004988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496e:	4b65      	ldr	r3, [pc, #404]	@ (8004b04 <HAL_RCC_ClockConfig+0x1b8>)
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004976:	4b63      	ldr	r3, [pc, #396]	@ (8004b04 <HAL_RCC_ClockConfig+0x1b8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d001      	beq.n	8004988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e0b8      	b.n	8004afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d020      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a0:	4b59      	ldr	r3, [pc, #356]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	4a58      	ldr	r2, [pc, #352]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0308 	and.w	r3, r3, #8
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049b8:	4b53      	ldr	r3, [pc, #332]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4a52      	ldr	r2, [pc, #328]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c4:	4b50      	ldr	r3, [pc, #320]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	494d      	ldr	r1, [pc, #308]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d044      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d107      	bne.n	80049fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	4b47      	ldr	r3, [pc, #284]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d119      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e07f      	b.n	8004afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d003      	beq.n	8004a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d107      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e06f      	b.n	8004afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e067      	b.n	8004afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2a:	4b37      	ldr	r3, [pc, #220]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f023 0203 	bic.w	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4934      	ldr	r1, [pc, #208]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a3c:	f7ff f980 	bl	8003d40 <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	e00a      	b.n	8004a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a44:	f7ff f97c 	bl	8003d40 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e04f      	b.n	8004afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 020c 	and.w	r2, r3, #12
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d1eb      	bne.n	8004a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6c:	4b25      	ldr	r3, [pc, #148]	@ (8004b04 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d20c      	bcs.n	8004a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7a:	4b22      	ldr	r3, [pc, #136]	@ (8004b04 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a82:	4b20      	ldr	r3, [pc, #128]	@ (8004b04 <HAL_RCC_ClockConfig+0x1b8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e032      	b.n	8004afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa0:	4b19      	ldr	r3, [pc, #100]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4916      	ldr	r1, [pc, #88]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004abe:	4b12      	ldr	r3, [pc, #72]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	490e      	ldr	r1, [pc, #56]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ad2:	f000 f821 	bl	8004b18 <HAL_RCC_GetSysClockFreq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	091b      	lsrs	r3, r3, #4
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	490a      	ldr	r1, [pc, #40]	@ (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004ae4:	5ccb      	ldrb	r3, [r1, r3]
 8004ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aea:	4a09      	ldr	r2, [pc, #36]	@ (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004aee:	4b09      	ldr	r3, [pc, #36]	@ (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff f8e0 	bl	8003cb8 <HAL_InitTick>

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40023c00 	.word	0x40023c00
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	08007a88 	.word	0x08007a88
 8004b10:	200000a0 	.word	0x200000a0
 8004b14:	200000a4 	.word	0x200000a4

08004b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b1c:	b094      	sub	sp, #80	@ 0x50
 8004b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b24:	2300      	movs	r3, #0
 8004b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b28:	2300      	movs	r3, #0
 8004b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b30:	4b79      	ldr	r3, [pc, #484]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d00d      	beq.n	8004b58 <HAL_RCC_GetSysClockFreq+0x40>
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	f200 80e1 	bhi.w	8004d04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_RCC_GetSysClockFreq+0x34>
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d003      	beq.n	8004b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b4a:	e0db      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b4c:	4b73      	ldr	r3, [pc, #460]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004b50:	e0db      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b52:	4b73      	ldr	r3, [pc, #460]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b56:	e0d8      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b58:	4b6f      	ldr	r3, [pc, #444]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b60:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b62:	4b6d      	ldr	r3, [pc, #436]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d063      	beq.n	8004c36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	099b      	lsrs	r3, r3, #6
 8004b74:	2200      	movs	r2, #0
 8004b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b82:	2300      	movs	r3, #0
 8004b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	462b      	mov	r3, r5
 8004b8e:	f04f 0000 	mov.w	r0, #0
 8004b92:	f04f 0100 	mov.w	r1, #0
 8004b96:	0159      	lsls	r1, r3, #5
 8004b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b9c:	0150      	lsls	r0, r2, #5
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	1a51      	subs	r1, r2, r1
 8004ba6:	6139      	str	r1, [r7, #16]
 8004ba8:	4629      	mov	r1, r5
 8004baa:	eb63 0301 	sbc.w	r3, r3, r1
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bbc:	4659      	mov	r1, fp
 8004bbe:	018b      	lsls	r3, r1, #6
 8004bc0:	4651      	mov	r1, sl
 8004bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bc6:	4651      	mov	r1, sl
 8004bc8:	018a      	lsls	r2, r1, #6
 8004bca:	4651      	mov	r1, sl
 8004bcc:	ebb2 0801 	subs.w	r8, r2, r1
 8004bd0:	4659      	mov	r1, fp
 8004bd2:	eb63 0901 	sbc.w	r9, r3, r1
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bea:	4690      	mov	r8, r2
 8004bec:	4699      	mov	r9, r3
 8004bee:	4623      	mov	r3, r4
 8004bf0:	eb18 0303 	adds.w	r3, r8, r3
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	462b      	mov	r3, r5
 8004bf8:	eb49 0303 	adc.w	r3, r9, r3
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	024b      	lsls	r3, r1, #9
 8004c0e:	4621      	mov	r1, r4
 8004c10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c14:	4621      	mov	r1, r4
 8004c16:	024a      	lsls	r2, r1, #9
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c1e:	2200      	movs	r2, #0
 8004c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c28:	f7fb ff74 	bl	8000b14 <__aeabi_uldivmod>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4613      	mov	r3, r2
 8004c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c34:	e058      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c36:	4b38      	ldr	r3, [pc, #224]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	099b      	lsrs	r3, r3, #6
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	4611      	mov	r1, r2
 8004c42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c46:	623b      	str	r3, [r7, #32]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c50:	4642      	mov	r2, r8
 8004c52:	464b      	mov	r3, r9
 8004c54:	f04f 0000 	mov.w	r0, #0
 8004c58:	f04f 0100 	mov.w	r1, #0
 8004c5c:	0159      	lsls	r1, r3, #5
 8004c5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c62:	0150      	lsls	r0, r2, #5
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4641      	mov	r1, r8
 8004c6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c6e:	4649      	mov	r1, r9
 8004c70:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c88:	ebb2 040a 	subs.w	r4, r2, sl
 8004c8c:	eb63 050b 	sbc.w	r5, r3, fp
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	00eb      	lsls	r3, r5, #3
 8004c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c9e:	00e2      	lsls	r2, r4, #3
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	461d      	mov	r5, r3
 8004ca4:	4643      	mov	r3, r8
 8004ca6:	18e3      	adds	r3, r4, r3
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	464b      	mov	r3, r9
 8004cac:	eb45 0303 	adc.w	r3, r5, r3
 8004cb0:	607b      	str	r3, [r7, #4]
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	028b      	lsls	r3, r1, #10
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cc8:	4621      	mov	r1, r4
 8004cca:	028a      	lsls	r2, r1, #10
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	61bb      	str	r3, [r7, #24]
 8004cd6:	61fa      	str	r2, [r7, #28]
 8004cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cdc:	f7fb ff1a 	bl	8000b14 <__aeabi_uldivmod>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004cf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d02:	e002      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d04:	4b05      	ldr	r3, [pc, #20]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3750      	adds	r7, #80	@ 0x50
 8004d10:	46bd      	mov	sp, r7
 8004d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d16:	bf00      	nop
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	00f42400 	.word	0x00f42400
 8004d20:	007a1200 	.word	0x007a1200

08004d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d28:	4b03      	ldr	r3, [pc, #12]	@ (8004d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	200000a0 	.word	0x200000a0

08004d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d40:	f7ff fff0 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d44:	4602      	mov	r2, r0
 8004d46:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	0a9b      	lsrs	r3, r3, #10
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	4903      	ldr	r1, [pc, #12]	@ (8004d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d52:	5ccb      	ldrb	r3, [r1, r3]
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	08007a98 	.word	0x08007a98

08004d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d68:	f7ff ffdc 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	4b05      	ldr	r3, [pc, #20]	@ (8004d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	0b5b      	lsrs	r3, r3, #13
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	4903      	ldr	r1, [pc, #12]	@ (8004d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d7a:	5ccb      	ldrb	r3, [r1, r3]
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40023800 	.word	0x40023800
 8004d88:	08007a98 	.word	0x08007a98

08004d8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e07b      	b.n	8004e96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d108      	bne.n	8004db8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dae:	d009      	beq.n	8004dc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	61da      	str	r2, [r3, #28]
 8004db6:	e005      	b.n	8004dc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fe faac 	bl	800333c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e48:	ea42 0103 	orr.w	r1, r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	0c1b      	lsrs	r3, r3, #16
 8004e62:	f003 0104 	and.w	r1, r3, #4
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6a:	f003 0210 	and.w	r2, r3, #16
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b088      	sub	sp, #32
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_SPI_Transmit+0x22>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e126      	b.n	800510e <HAL_SPI_Transmit+0x270>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ec8:	f7fe ff3a 	bl	8003d40 <HAL_GetTick>
 8004ecc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d002      	beq.n	8004ee4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ee2:	e10b      	b.n	80050fc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_SPI_Transmit+0x52>
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ef4:	e102      	b.n	80050fc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2203      	movs	r2, #3
 8004efa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	88fa      	ldrh	r2, [r7, #6]
 8004f0e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	88fa      	ldrh	r2, [r7, #6]
 8004f14:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f3c:	d10f      	bne.n	8004f5e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f68:	2b40      	cmp	r3, #64	@ 0x40
 8004f6a:	d007      	beq.n	8004f7c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f84:	d14b      	bne.n	800501e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_SPI_Transmit+0xf6>
 8004f8e:	8afb      	ldrh	r3, [r7, #22]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d13e      	bne.n	8005012 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f98:	881a      	ldrh	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa4:	1c9a      	adds	r2, r3, #2
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fb8:	e02b      	b.n	8005012 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d112      	bne.n	8004fee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fcc:	881a      	ldrh	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd8:	1c9a      	adds	r2, r3, #2
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004fec:	e011      	b.n	8005012 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fee:	f7fe fea7 	bl	8003d40 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d803      	bhi.n	8005006 <HAL_SPI_Transmit+0x168>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d102      	bne.n	800500c <HAL_SPI_Transmit+0x16e>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005010:	e074      	b.n	80050fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1ce      	bne.n	8004fba <HAL_SPI_Transmit+0x11c>
 800501c:	e04c      	b.n	80050b8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_SPI_Transmit+0x18e>
 8005026:	8afb      	ldrh	r3, [r7, #22]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d140      	bne.n	80050ae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	330c      	adds	r3, #12
 8005036:	7812      	ldrb	r2, [r2, #0]
 8005038:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005052:	e02c      	b.n	80050ae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b02      	cmp	r3, #2
 8005060:	d113      	bne.n	800508a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	330c      	adds	r3, #12
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005088:	e011      	b.n	80050ae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800508a:	f7fe fe59 	bl	8003d40 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d803      	bhi.n	80050a2 <HAL_SPI_Transmit+0x204>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a0:	d102      	bne.n	80050a8 <HAL_SPI_Transmit+0x20a>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050ac:	e026      	b.n	80050fc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1cd      	bne.n	8005054 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	6839      	ldr	r1, [r7, #0]
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 fbcb 	bl	8005858 <SPI_EndRxTxTransaction>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050d6:	2300      	movs	r3, #0
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e000      	b.n	80050fc <HAL_SPI_Transmit+0x25e>
  }

error:
 80050fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800510c:	7ffb      	ldrb	r3, [r7, #31]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b088      	sub	sp, #32
 800511a:	af02      	add	r7, sp, #8
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	4613      	mov	r3, r2
 8005124:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005132:	d112      	bne.n	800515a <HAL_SPI_Receive+0x44>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10e      	bne.n	800515a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2204      	movs	r2, #4
 8005140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005144:	88fa      	ldrh	r2, [r7, #6]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	4613      	mov	r3, r2
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f8f1 	bl	8005338 <HAL_SPI_TransmitReceive>
 8005156:	4603      	mov	r3, r0
 8005158:	e0ea      	b.n	8005330 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_SPI_Receive+0x52>
 8005164:	2302      	movs	r3, #2
 8005166:	e0e3      	b.n	8005330 <HAL_SPI_Receive+0x21a>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005170:	f7fe fde6 	bl	8003d40 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b01      	cmp	r3, #1
 8005180:	d002      	beq.n	8005188 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005182:	2302      	movs	r3, #2
 8005184:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005186:	e0ca      	b.n	800531e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_SPI_Receive+0x7e>
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005198:	e0c1      	b.n	800531e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2204      	movs	r2, #4
 800519e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	88fa      	ldrh	r2, [r7, #6]
 80051b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	88fa      	ldrh	r2, [r7, #6]
 80051b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051e0:	d10f      	bne.n	8005202 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005200:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800520c:	2b40      	cmp	r3, #64	@ 0x40
 800520e:	d007      	beq.n	8005220 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800521e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d162      	bne.n	80052ee <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005228:	e02e      	b.n	8005288 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b01      	cmp	r3, #1
 8005236:	d115      	bne.n	8005264 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f103 020c 	add.w	r2, r3, #12
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005244:	7812      	ldrb	r2, [r2, #0]
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005262:	e011      	b.n	8005288 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005264:	f7fe fd6c 	bl	8003d40 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d803      	bhi.n	800527c <HAL_SPI_Receive+0x166>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527a:	d102      	bne.n	8005282 <HAL_SPI_Receive+0x16c>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d102      	bne.n	8005288 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005286:	e04a      	b.n	800531e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1cb      	bne.n	800522a <HAL_SPI_Receive+0x114>
 8005292:	e031      	b.n	80052f8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d113      	bne.n	80052ca <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ac:	b292      	uxth	r2, r2
 80052ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b4:	1c9a      	adds	r2, r3, #2
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052c8:	e011      	b.n	80052ee <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052ca:	f7fe fd39 	bl	8003d40 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d803      	bhi.n	80052e2 <HAL_SPI_Receive+0x1cc>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e0:	d102      	bne.n	80052e8 <HAL_SPI_Receive+0x1d2>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80052ec:	e017      	b.n	800531e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1cd      	bne.n	8005294 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 fa45 	bl	800578c <SPI_EndRxTransaction>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	75fb      	strb	r3, [r7, #23]
 800531a:	e000      	b.n	800531e <HAL_SPI_Receive+0x208>
  }

error :
 800531c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800532e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08c      	sub	sp, #48	@ 0x30
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005346:	2301      	movs	r3, #1
 8005348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005356:	2b01      	cmp	r3, #1
 8005358:	d101      	bne.n	800535e <HAL_SPI_TransmitReceive+0x26>
 800535a:	2302      	movs	r3, #2
 800535c:	e18a      	b.n	8005674 <HAL_SPI_TransmitReceive+0x33c>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005366:	f7fe fceb 	bl	8003d40 <HAL_GetTick>
 800536a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800537c:	887b      	ldrh	r3, [r7, #2]
 800537e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005380:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005384:	2b01      	cmp	r3, #1
 8005386:	d00f      	beq.n	80053a8 <HAL_SPI_TransmitReceive+0x70>
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800538e:	d107      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d103      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x68>
 8005398:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800539c:	2b04      	cmp	r3, #4
 800539e:	d003      	beq.n	80053a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80053a0:	2302      	movs	r3, #2
 80053a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80053a6:	e15b      	b.n	8005660 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_SPI_TransmitReceive+0x82>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HAL_SPI_TransmitReceive+0x82>
 80053b4:	887b      	ldrh	r3, [r7, #2]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80053c0:	e14e      	b.n	8005660 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d003      	beq.n	80053d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2205      	movs	r2, #5
 80053d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	887a      	ldrh	r2, [r7, #2]
 80053e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	887a      	ldrh	r2, [r7, #2]
 80053ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	887a      	ldrh	r2, [r7, #2]
 80053f8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	887a      	ldrh	r2, [r7, #2]
 80053fe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005416:	2b40      	cmp	r3, #64	@ 0x40
 8005418:	d007      	beq.n	800542a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005428:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005432:	d178      	bne.n	8005526 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_SPI_TransmitReceive+0x10a>
 800543c:	8b7b      	ldrh	r3, [r7, #26]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d166      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005446:	881a      	ldrh	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005452:	1c9a      	adds	r2, r3, #2
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005466:	e053      	b.n	8005510 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b02      	cmp	r3, #2
 8005474:	d11b      	bne.n	80054ae <HAL_SPI_TransmitReceive+0x176>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d016      	beq.n	80054ae <HAL_SPI_TransmitReceive+0x176>
 8005480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005482:	2b01      	cmp	r3, #1
 8005484:	d113      	bne.n	80054ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548a:	881a      	ldrh	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	1c9a      	adds	r2, r3, #2
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d119      	bne.n	80054f0 <HAL_SPI_TransmitReceive+0x1b8>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d014      	beq.n	80054f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d0:	b292      	uxth	r2, r2
 80054d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d8:	1c9a      	adds	r2, r3, #2
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054ec:	2301      	movs	r3, #1
 80054ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054f0:	f7fe fc26 	bl	8003d40 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d807      	bhi.n	8005510 <HAL_SPI_TransmitReceive+0x1d8>
 8005500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d003      	beq.n	8005510 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800550e:	e0a7      	b.n	8005660 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1a6      	bne.n	8005468 <HAL_SPI_TransmitReceive+0x130>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1a1      	bne.n	8005468 <HAL_SPI_TransmitReceive+0x130>
 8005524:	e07c      	b.n	8005620 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <HAL_SPI_TransmitReceive+0x1fc>
 800552e:	8b7b      	ldrh	r3, [r7, #26]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d16b      	bne.n	800560c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	7812      	ldrb	r2, [r2, #0]
 8005540:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005550:	b29b      	uxth	r3, r3
 8005552:	3b01      	subs	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800555a:	e057      	b.n	800560c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b02      	cmp	r3, #2
 8005568:	d11c      	bne.n	80055a4 <HAL_SPI_TransmitReceive+0x26c>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d017      	beq.n	80055a4 <HAL_SPI_TransmitReceive+0x26c>
 8005574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005576:	2b01      	cmp	r3, #1
 8005578:	d114      	bne.n	80055a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	330c      	adds	r3, #12
 8005584:	7812      	ldrb	r2, [r2, #0]
 8005586:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d119      	bne.n	80055e6 <HAL_SPI_TransmitReceive+0x2ae>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d014      	beq.n	80055e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055d8:	b29b      	uxth	r3, r3
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055e2:	2301      	movs	r3, #1
 80055e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055e6:	f7fe fbab 	bl	8003d40 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d803      	bhi.n	80055fe <HAL_SPI_TransmitReceive+0x2c6>
 80055f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d102      	bne.n	8005604 <HAL_SPI_TransmitReceive+0x2cc>
 80055fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005600:	2b00      	cmp	r3, #0
 8005602:	d103      	bne.n	800560c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800560a:	e029      	b.n	8005660 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1a2      	bne.n	800555c <HAL_SPI_TransmitReceive+0x224>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800561a:	b29b      	uxth	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d19d      	bne.n	800555c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005622:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f917 	bl	8005858 <SPI_EndRxTxTransaction>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d006      	beq.n	800563e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2220      	movs	r2, #32
 800563a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800563c:	e010      	b.n	8005660 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10b      	bne.n	800565e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	e000      	b.n	8005660 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800565e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005670:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005674:	4618      	mov	r0, r3
 8005676:	3730      	adds	r7, #48	@ 0x30
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800568c:	f7fe fb58 	bl	8003d40 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	4413      	add	r3, r2
 800569a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800569c:	f7fe fb50 	bl	8003d40 <HAL_GetTick>
 80056a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056a2:	4b39      	ldr	r3, [pc, #228]	@ (8005788 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	015b      	lsls	r3, r3, #5
 80056a8:	0d1b      	lsrs	r3, r3, #20
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	fb02 f303 	mul.w	r3, r2, r3
 80056b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056b2:	e054      	b.n	800575e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ba:	d050      	beq.n	800575e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056bc:	f7fe fb40 	bl	8003d40 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d902      	bls.n	80056d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d13d      	bne.n	800574e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056ea:	d111      	bne.n	8005710 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056f4:	d004      	beq.n	8005700 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056fe:	d107      	bne.n	8005710 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800570e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005718:	d10f      	bne.n	800573a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005738:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e017      	b.n	800577e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	3b01      	subs	r3, #1
 800575c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4013      	ands	r3, r2
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	429a      	cmp	r2, r3
 800576c:	bf0c      	ite	eq
 800576e:	2301      	moveq	r3, #1
 8005770:	2300      	movne	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	429a      	cmp	r2, r3
 800577a:	d19b      	bne.n	80056b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	200000a0 	.word	0x200000a0

0800578c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057a0:	d111      	bne.n	80057c6 <SPI_EndRxTransaction+0x3a>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057aa:	d004      	beq.n	80057b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057b4:	d107      	bne.n	80057c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057ce:	d12a      	bne.n	8005826 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d8:	d012      	beq.n	8005800 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2180      	movs	r1, #128	@ 0x80
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f7ff ff49 	bl	800567c <SPI_WaitFlagStateUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d02d      	beq.n	800584c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f4:	f043 0220 	orr.w	r2, r3, #32
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e026      	b.n	800584e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2200      	movs	r2, #0
 8005808:	2101      	movs	r1, #1
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7ff ff36 	bl	800567c <SPI_WaitFlagStateUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01a      	beq.n	800584c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581a:	f043 0220 	orr.w	r2, r3, #32
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e013      	b.n	800584e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2200      	movs	r2, #0
 800582e:	2101      	movs	r1, #1
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7ff ff23 	bl	800567c <SPI_WaitFlagStateUntilTimeout>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d007      	beq.n	800584c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005840:	f043 0220 	orr.w	r2, r3, #32
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e000      	b.n	800584e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af02      	add	r7, sp, #8
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005864:	4b1b      	ldr	r3, [pc, #108]	@ (80058d4 <SPI_EndRxTxTransaction+0x7c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1b      	ldr	r2, [pc, #108]	@ (80058d8 <SPI_EndRxTxTransaction+0x80>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	0d5b      	lsrs	r3, r3, #21
 8005870:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005874:	fb02 f303 	mul.w	r3, r2, r3
 8005878:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005882:	d112      	bne.n	80058aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2200      	movs	r2, #0
 800588c:	2180      	movs	r1, #128	@ 0x80
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f7ff fef4 	bl	800567c <SPI_WaitFlagStateUntilTimeout>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d016      	beq.n	80058c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589e:	f043 0220 	orr.w	r2, r3, #32
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e00f      	b.n	80058ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c0:	2b80      	cmp	r3, #128	@ 0x80
 80058c2:	d0f2      	beq.n	80058aa <SPI_EndRxTxTransaction+0x52>
 80058c4:	e000      	b.n	80058c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80058c6:	bf00      	nop
  }

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	200000a0 	.word	0x200000a0
 80058d8:	165e9f81 	.word	0x165e9f81

080058dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e041      	b.n	8005972 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7fd fef4 	bl	80036f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3304      	adds	r3, #4
 8005918:	4619      	mov	r1, r3
 800591a:	4610      	mov	r0, r2
 800591c:	f000 fc54 	bl	80061c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b01      	cmp	r3, #1
 800598e:	d001      	beq.n	8005994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e044      	b.n	8005a1e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a2c <HAL_TIM_Base_Start_IT+0xb0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d018      	beq.n	80059e8 <HAL_TIM_Base_Start_IT+0x6c>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059be:	d013      	beq.n	80059e8 <HAL_TIM_Base_Start_IT+0x6c>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a30 <HAL_TIM_Base_Start_IT+0xb4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00e      	beq.n	80059e8 <HAL_TIM_Base_Start_IT+0x6c>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a19      	ldr	r2, [pc, #100]	@ (8005a34 <HAL_TIM_Base_Start_IT+0xb8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d009      	beq.n	80059e8 <HAL_TIM_Base_Start_IT+0x6c>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a17      	ldr	r2, [pc, #92]	@ (8005a38 <HAL_TIM_Base_Start_IT+0xbc>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <HAL_TIM_Base_Start_IT+0x6c>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a16      	ldr	r2, [pc, #88]	@ (8005a3c <HAL_TIM_Base_Start_IT+0xc0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d111      	bne.n	8005a0c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b06      	cmp	r3, #6
 80059f8:	d010      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0201 	orr.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0a:	e007      	b.n	8005a1c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800
 8005a38:	40000c00 	.word	0x40000c00
 8005a3c:	40014000 	.word	0x40014000

08005a40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e041      	b.n	8005ad6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fd fe68 	bl	800373c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	f000 fba2 	bl	80061c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d109      	bne.n	8005b04 <HAL_TIM_PWM_Start+0x24>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	bf14      	ite	ne
 8005afc:	2301      	movne	r3, #1
 8005afe:	2300      	moveq	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	e022      	b.n	8005b4a <HAL_TIM_PWM_Start+0x6a>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d109      	bne.n	8005b1e <HAL_TIM_PWM_Start+0x3e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	bf14      	ite	ne
 8005b16:	2301      	movne	r3, #1
 8005b18:	2300      	moveq	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	e015      	b.n	8005b4a <HAL_TIM_PWM_Start+0x6a>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d109      	bne.n	8005b38 <HAL_TIM_PWM_Start+0x58>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	bf14      	ite	ne
 8005b30:	2301      	movne	r3, #1
 8005b32:	2300      	moveq	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	e008      	b.n	8005b4a <HAL_TIM_PWM_Start+0x6a>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	bf14      	ite	ne
 8005b44:	2301      	movne	r3, #1
 8005b46:	2300      	moveq	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e068      	b.n	8005c24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d104      	bne.n	8005b62 <HAL_TIM_PWM_Start+0x82>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b60:	e013      	b.n	8005b8a <HAL_TIM_PWM_Start+0xaa>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d104      	bne.n	8005b72 <HAL_TIM_PWM_Start+0x92>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b70:	e00b      	b.n	8005b8a <HAL_TIM_PWM_Start+0xaa>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d104      	bne.n	8005b82 <HAL_TIM_PWM_Start+0xa2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b80:	e003      	b.n	8005b8a <HAL_TIM_PWM_Start+0xaa>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fdbe 	bl	8006714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a23      	ldr	r2, [pc, #140]	@ (8005c2c <HAL_TIM_PWM_Start+0x14c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d107      	bne.n	8005bb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8005c2c <HAL_TIM_PWM_Start+0x14c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d018      	beq.n	8005bee <HAL_TIM_PWM_Start+0x10e>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bc4:	d013      	beq.n	8005bee <HAL_TIM_PWM_Start+0x10e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a19      	ldr	r2, [pc, #100]	@ (8005c30 <HAL_TIM_PWM_Start+0x150>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00e      	beq.n	8005bee <HAL_TIM_PWM_Start+0x10e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a17      	ldr	r2, [pc, #92]	@ (8005c34 <HAL_TIM_PWM_Start+0x154>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d009      	beq.n	8005bee <HAL_TIM_PWM_Start+0x10e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a16      	ldr	r2, [pc, #88]	@ (8005c38 <HAL_TIM_PWM_Start+0x158>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_TIM_PWM_Start+0x10e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a14      	ldr	r2, [pc, #80]	@ (8005c3c <HAL_TIM_PWM_Start+0x15c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d111      	bne.n	8005c12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b06      	cmp	r3, #6
 8005bfe:	d010      	beq.n	8005c22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c10:	e007      	b.n	8005c22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0201 	orr.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40000800 	.word	0x40000800
 8005c38:	40000c00 	.word	0x40000c00
 8005c3c:	40014000 	.word	0x40014000

08005c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d122      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d11b      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0202 	mvn.w	r2, #2
 8005c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fa81 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005c88:	e005      	b.n	8005c96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fa73 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fa84 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d122      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0204 	mvn.w	r2, #4
 8005cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fa57 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa49 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fa5a 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d122      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d11b      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0208 	mvn.w	r2, #8
 8005d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2204      	movs	r2, #4
 8005d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fa2d 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fa1f 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fa30 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	2b10      	cmp	r3, #16
 8005d50:	d122      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0310 	and.w	r3, r3, #16
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	d11b      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0210 	mvn.w	r2, #16
 8005d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2208      	movs	r2, #8
 8005d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fa03 	bl	800618a <HAL_TIM_IC_CaptureCallback>
 8005d84:	e005      	b.n	8005d92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f9f5 	bl	8006176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fa06 	bl	800619e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d10e      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d107      	bne.n	8005dc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0201 	mvn.w	r2, #1
 8005dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f9cf 	bl	8006162 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dce:	2b80      	cmp	r3, #128	@ 0x80
 8005dd0:	d10e      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ddc:	2b80      	cmp	r3, #128	@ 0x80
 8005dde:	d107      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fd30 	bl	8006850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dfa:	2b40      	cmp	r3, #64	@ 0x40
 8005dfc:	d10e      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e08:	2b40      	cmp	r3, #64	@ 0x40
 8005e0a:	d107      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f9cb 	bl	80061b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	d10e      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d107      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0220 	mvn.w	r2, #32
 8005e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fcfa 	bl	800683c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e48:	bf00      	nop
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d101      	bne.n	8005e6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e0ae      	b.n	8005fcc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b0c      	cmp	r3, #12
 8005e7a:	f200 809f 	bhi.w	8005fbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005eb9 	.word	0x08005eb9
 8005e88:	08005fbd 	.word	0x08005fbd
 8005e8c:	08005fbd 	.word	0x08005fbd
 8005e90:	08005fbd 	.word	0x08005fbd
 8005e94:	08005ef9 	.word	0x08005ef9
 8005e98:	08005fbd 	.word	0x08005fbd
 8005e9c:	08005fbd 	.word	0x08005fbd
 8005ea0:	08005fbd 	.word	0x08005fbd
 8005ea4:	08005f3b 	.word	0x08005f3b
 8005ea8:	08005fbd 	.word	0x08005fbd
 8005eac:	08005fbd 	.word	0x08005fbd
 8005eb0:	08005fbd 	.word	0x08005fbd
 8005eb4:	08005f7b 	.word	0x08005f7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fa02 	bl	80062c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0208 	orr.w	r2, r2, #8
 8005ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0204 	bic.w	r2, r2, #4
 8005ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6999      	ldr	r1, [r3, #24]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691a      	ldr	r2, [r3, #16]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	619a      	str	r2, [r3, #24]
      break;
 8005ef6:	e064      	b.n	8005fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fa48 	bl	8006394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699a      	ldr	r2, [r3, #24]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6999      	ldr	r1, [r3, #24]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	021a      	lsls	r2, r3, #8
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	619a      	str	r2, [r3, #24]
      break;
 8005f38:	e043      	b.n	8005fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fa93 	bl	800646c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69da      	ldr	r2, [r3, #28]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f042 0208 	orr.w	r2, r2, #8
 8005f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69da      	ldr	r2, [r3, #28]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0204 	bic.w	r2, r2, #4
 8005f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69d9      	ldr	r1, [r3, #28]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	691a      	ldr	r2, [r3, #16]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	61da      	str	r2, [r3, #28]
      break;
 8005f78:	e023      	b.n	8005fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68b9      	ldr	r1, [r7, #8]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fadd 	bl	8006540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69da      	ldr	r2, [r3, #28]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69da      	ldr	r2, [r3, #28]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69d9      	ldr	r1, [r3, #28]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	021a      	lsls	r2, r3, #8
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	61da      	str	r2, [r3, #28]
      break;
 8005fba:	e002      	b.n	8005fc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005fc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_TIM_ConfigClockSource+0x1c>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e0b4      	b.n	800615a <HAL_TIM_ConfigClockSource+0x186>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800600e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006028:	d03e      	beq.n	80060a8 <HAL_TIM_ConfigClockSource+0xd4>
 800602a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800602e:	f200 8087 	bhi.w	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006036:	f000 8086 	beq.w	8006146 <HAL_TIM_ConfigClockSource+0x172>
 800603a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800603e:	d87f      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006040:	2b70      	cmp	r3, #112	@ 0x70
 8006042:	d01a      	beq.n	800607a <HAL_TIM_ConfigClockSource+0xa6>
 8006044:	2b70      	cmp	r3, #112	@ 0x70
 8006046:	d87b      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006048:	2b60      	cmp	r3, #96	@ 0x60
 800604a:	d050      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0x11a>
 800604c:	2b60      	cmp	r3, #96	@ 0x60
 800604e:	d877      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006050:	2b50      	cmp	r3, #80	@ 0x50
 8006052:	d03c      	beq.n	80060ce <HAL_TIM_ConfigClockSource+0xfa>
 8006054:	2b50      	cmp	r3, #80	@ 0x50
 8006056:	d873      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006058:	2b40      	cmp	r3, #64	@ 0x40
 800605a:	d058      	beq.n	800610e <HAL_TIM_ConfigClockSource+0x13a>
 800605c:	2b40      	cmp	r3, #64	@ 0x40
 800605e:	d86f      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006060:	2b30      	cmp	r3, #48	@ 0x30
 8006062:	d064      	beq.n	800612e <HAL_TIM_ConfigClockSource+0x15a>
 8006064:	2b30      	cmp	r3, #48	@ 0x30
 8006066:	d86b      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006068:	2b20      	cmp	r3, #32
 800606a:	d060      	beq.n	800612e <HAL_TIM_ConfigClockSource+0x15a>
 800606c:	2b20      	cmp	r3, #32
 800606e:	d867      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d05c      	beq.n	800612e <HAL_TIM_ConfigClockSource+0x15a>
 8006074:	2b10      	cmp	r3, #16
 8006076:	d05a      	beq.n	800612e <HAL_TIM_ConfigClockSource+0x15a>
 8006078:	e062      	b.n	8006140 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6899      	ldr	r1, [r3, #8]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f000 fb23 	bl	80066d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800609c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	609a      	str	r2, [r3, #8]
      break;
 80060a6:	e04f      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6818      	ldr	r0, [r3, #0]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	6899      	ldr	r1, [r3, #8]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f000 fb0c 	bl	80066d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060ca:	609a      	str	r2, [r3, #8]
      break;
 80060cc:	e03c      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	6859      	ldr	r1, [r3, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	461a      	mov	r2, r3
 80060dc:	f000 fa80 	bl	80065e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2150      	movs	r1, #80	@ 0x50
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fad9 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 80060ec:	e02c      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	6859      	ldr	r1, [r3, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f000 fa9f 	bl	800663e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2160      	movs	r1, #96	@ 0x60
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fac9 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 800610c:	e01c      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	6859      	ldr	r1, [r3, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	461a      	mov	r2, r3
 800611c:	f000 fa60 	bl	80065e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2140      	movs	r1, #64	@ 0x40
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fab9 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 800612c:	e00c      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4619      	mov	r1, r3
 8006138:	4610      	mov	r0, r2
 800613a:	f000 fab0 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 800613e:	e003      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	73fb      	strb	r3, [r7, #15]
      break;
 8006144:	e000      	b.n	8006148 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006158:	7bfb      	ldrb	r3, [r7, #15]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a34      	ldr	r2, [pc, #208]	@ (80062ac <TIM_Base_SetConfig+0xe4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00f      	beq.n	8006200 <TIM_Base_SetConfig+0x38>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e6:	d00b      	beq.n	8006200 <TIM_Base_SetConfig+0x38>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a31      	ldr	r2, [pc, #196]	@ (80062b0 <TIM_Base_SetConfig+0xe8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d007      	beq.n	8006200 <TIM_Base_SetConfig+0x38>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a30      	ldr	r2, [pc, #192]	@ (80062b4 <TIM_Base_SetConfig+0xec>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d003      	beq.n	8006200 <TIM_Base_SetConfig+0x38>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a2f      	ldr	r2, [pc, #188]	@ (80062b8 <TIM_Base_SetConfig+0xf0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d108      	bne.n	8006212 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a25      	ldr	r2, [pc, #148]	@ (80062ac <TIM_Base_SetConfig+0xe4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d01b      	beq.n	8006252 <TIM_Base_SetConfig+0x8a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006220:	d017      	beq.n	8006252 <TIM_Base_SetConfig+0x8a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a22      	ldr	r2, [pc, #136]	@ (80062b0 <TIM_Base_SetConfig+0xe8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <TIM_Base_SetConfig+0x8a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a21      	ldr	r2, [pc, #132]	@ (80062b4 <TIM_Base_SetConfig+0xec>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00f      	beq.n	8006252 <TIM_Base_SetConfig+0x8a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a20      	ldr	r2, [pc, #128]	@ (80062b8 <TIM_Base_SetConfig+0xf0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00b      	beq.n	8006252 <TIM_Base_SetConfig+0x8a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a1f      	ldr	r2, [pc, #124]	@ (80062bc <TIM_Base_SetConfig+0xf4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d007      	beq.n	8006252 <TIM_Base_SetConfig+0x8a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a1e      	ldr	r2, [pc, #120]	@ (80062c0 <TIM_Base_SetConfig+0xf8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d003      	beq.n	8006252 <TIM_Base_SetConfig+0x8a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a1d      	ldr	r2, [pc, #116]	@ (80062c4 <TIM_Base_SetConfig+0xfc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d108      	bne.n	8006264 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a08      	ldr	r2, [pc, #32]	@ (80062ac <TIM_Base_SetConfig+0xe4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d103      	bne.n	8006298 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	691a      	ldr	r2, [r3, #16]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	615a      	str	r2, [r3, #20]
}
 800629e:	bf00      	nop
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40014000 	.word	0x40014000
 80062c0:	40014400 	.word	0x40014400
 80062c4:	40014800 	.word	0x40014800

080062c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f023 0201 	bic.w	r2, r3, #1
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0303 	bic.w	r3, r3, #3
 80062fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f023 0302 	bic.w	r3, r3, #2
 8006310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a1c      	ldr	r2, [pc, #112]	@ (8006390 <TIM_OC1_SetConfig+0xc8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d10c      	bne.n	800633e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f023 0308 	bic.w	r3, r3, #8
 800632a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f023 0304 	bic.w	r3, r3, #4
 800633c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a13      	ldr	r2, [pc, #76]	@ (8006390 <TIM_OC1_SetConfig+0xc8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d111      	bne.n	800636a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800634c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	621a      	str	r2, [r3, #32]
}
 8006384:	bf00      	nop
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	40010000 	.word	0x40010000

08006394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	f023 0210 	bic.w	r2, r3, #16
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f023 0320 	bic.w	r3, r3, #32
 80063de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006468 <TIM_OC2_SetConfig+0xd4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d10d      	bne.n	8006410 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800640e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a15      	ldr	r2, [pc, #84]	@ (8006468 <TIM_OC2_SetConfig+0xd4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d113      	bne.n	8006440 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800641e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40010000 	.word	0x40010000

0800646c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0303 	bic.w	r3, r3, #3
 80064a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a1d      	ldr	r2, [pc, #116]	@ (800653c <TIM_OC3_SetConfig+0xd0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d10d      	bne.n	80064e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	021b      	lsls	r3, r3, #8
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a14      	ldr	r2, [pc, #80]	@ (800653c <TIM_OC3_SetConfig+0xd0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d113      	bne.n	8006516 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4313      	orrs	r3, r2
 8006508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	621a      	str	r2, [r3, #32]
}
 8006530:	bf00      	nop
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	40010000 	.word	0x40010000

08006540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800656e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800658a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	031b      	lsls	r3, r3, #12
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a10      	ldr	r2, [pc, #64]	@ (80065dc <TIM_OC4_SetConfig+0x9c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d109      	bne.n	80065b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	019b      	lsls	r3, r3, #6
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	621a      	str	r2, [r3, #32]
}
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40010000 	.word	0x40010000

080065e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	f023 0201 	bic.w	r2, r3, #1
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800660a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4313      	orrs	r3, r2
 8006614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f023 030a 	bic.w	r3, r3, #10
 800661c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	621a      	str	r2, [r3, #32]
}
 8006632:	bf00      	nop
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800663e:	b480      	push	{r7}
 8006640:	b087      	sub	sp, #28
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f023 0210 	bic.w	r2, r3, #16
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	031b      	lsls	r3, r3, #12
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800667a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	621a      	str	r2, [r3, #32]
}
 8006692:	bf00      	nop
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	f043 0307 	orr.w	r3, r3, #7
 80066c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	609a      	str	r2, [r3, #8]
}
 80066c8:	bf00      	nop
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	021a      	lsls	r2, r3, #8
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	431a      	orrs	r2, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	609a      	str	r2, [r3, #8]
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f003 031f 	and.w	r3, r3, #31
 8006726:	2201      	movs	r2, #1
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a1a      	ldr	r2, [r3, #32]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	43db      	mvns	r3, r3
 8006736:	401a      	ands	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a1a      	ldr	r2, [r3, #32]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	fa01 f303 	lsl.w	r3, r1, r3
 800674c:	431a      	orrs	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
	...

08006760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006774:	2302      	movs	r3, #2
 8006776:	e050      	b.n	800681a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800679e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006828 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d018      	beq.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c4:	d013      	beq.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a18      	ldr	r2, [pc, #96]	@ (800682c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00e      	beq.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a16      	ldr	r2, [pc, #88]	@ (8006830 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d009      	beq.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a15      	ldr	r2, [pc, #84]	@ (8006834 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d004      	beq.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a13      	ldr	r2, [pc, #76]	@ (8006838 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d10c      	bne.n	8006808 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40010000 	.word	0x40010000
 800682c:	40000400 	.word	0x40000400
 8006830:	40000800 	.word	0x40000800
 8006834:	40000c00 	.word	0x40000c00
 8006838:	40014000 	.word	0x40014000

0800683c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e047      	b.n	8006906 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7fd f978 	bl	8003b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2224      	movs	r2, #36	@ 0x24
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fded 	bl	8007488 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695a      	ldr	r2, [r3, #20]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80068cc:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	695a      	ldr	r2, [r3, #20]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 0208 	orr.w	r2, r2, #8
 80068dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b08a      	sub	sp, #40	@ 0x28
 8006912:	af02      	add	r7, sp, #8
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	603b      	str	r3, [r7, #0]
 800691a:	4613      	mov	r3, r2
 800691c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b20      	cmp	r3, #32
 800692c:	d17c      	bne.n	8006a28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <HAL_UART_Transmit+0x2c>
 8006934:	88fb      	ldrh	r3, [r7, #6]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e075      	b.n	8006a2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006944:	2b01      	cmp	r3, #1
 8006946:	d101      	bne.n	800694c <HAL_UART_Transmit+0x3e>
 8006948:	2302      	movs	r3, #2
 800694a:	e06e      	b.n	8006a2a <HAL_UART_Transmit+0x11c>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2221      	movs	r2, #33	@ 0x21
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006962:	f7fd f9ed 	bl	8003d40 <HAL_GetTick>
 8006966:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	88fa      	ldrh	r2, [r7, #6]
 800696c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	88fa      	ldrh	r2, [r7, #6]
 8006972:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800697c:	d108      	bne.n	8006990 <HAL_UART_Transmit+0x82>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d104      	bne.n	8006990 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006986:	2300      	movs	r3, #0
 8006988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	e003      	b.n	8006998 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006994:	2300      	movs	r3, #0
 8006996:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80069a0:	e02a      	b.n	80069f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2200      	movs	r2, #0
 80069aa:	2180      	movs	r1, #128	@ 0x80
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 fb29 	bl	8007004 <UART_WaitOnFlagUntilTimeout>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e036      	b.n	8006a2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10b      	bne.n	80069da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	3302      	adds	r3, #2
 80069d6:	61bb      	str	r3, [r7, #24]
 80069d8:	e007      	b.n	80069ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	3301      	adds	r3, #1
 80069e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1cf      	bne.n	80069a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2140      	movs	r1, #64	@ 0x40
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 faf9 	bl	8007004 <UART_WaitOnFlagUntilTimeout>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e006      	b.n	8006a2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	e000      	b.n	8006a2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a28:	2302      	movs	r3, #2
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3720      	adds	r7, #32
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d11d      	bne.n	8006a88 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <HAL_UART_Receive_IT+0x26>
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e016      	b.n	8006a8a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_UART_Receive_IT+0x38>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e00f      	b.n	8006a8a <HAL_UART_Receive_IT+0x58>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a78:	88fb      	ldrh	r3, [r7, #6]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fb2e 	bl	80070e0 <UART_Start_Receive_IT>
 8006a84:	4603      	mov	r3, r0
 8006a86:	e000      	b.n	8006a8a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006a88:	2302      	movs	r3, #2
  }
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b0ba      	sub	sp, #232	@ 0xe8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006ad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10f      	bne.n	8006afa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d009      	beq.n	8006afa <HAL_UART_IRQHandler+0x66>
 8006ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fc0d 	bl	8007312 <UART_Receive_IT>
      return;
 8006af8:	e256      	b.n	8006fa8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 80de 	beq.w	8006cc0 <HAL_UART_IRQHandler+0x22c>
 8006b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d106      	bne.n	8006b1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b14:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 80d1 	beq.w	8006cc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <HAL_UART_IRQHandler+0xae>
 8006b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3a:	f043 0201 	orr.w	r2, r3, #1
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00b      	beq.n	8006b66 <HAL_UART_IRQHandler+0xd2>
 8006b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5e:	f043 0202 	orr.w	r2, r3, #2
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00b      	beq.n	8006b8a <HAL_UART_IRQHandler+0xf6>
 8006b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d005      	beq.n	8006b8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b82:	f043 0204 	orr.w	r2, r3, #4
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b8e:	f003 0308 	and.w	r3, r3, #8
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d011      	beq.n	8006bba <HAL_UART_IRQHandler+0x126>
 8006b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d105      	bne.n	8006bae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb2:	f043 0208 	orr.w	r2, r3, #8
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 81ed 	beq.w	8006f9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bc8:	f003 0320 	and.w	r3, r3, #32
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d008      	beq.n	8006be2 <HAL_UART_IRQHandler+0x14e>
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bd4:	f003 0320 	and.w	r3, r3, #32
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fb98 	bl	8007312 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bec:	2b40      	cmp	r3, #64	@ 0x40
 8006bee:	bf0c      	ite	eq
 8006bf0:	2301      	moveq	r3, #1
 8006bf2:	2300      	movne	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d103      	bne.n	8006c0e <HAL_UART_IRQHandler+0x17a>
 8006c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d04f      	beq.n	8006cae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 faa0 	bl	8007154 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c1e:	2b40      	cmp	r3, #64	@ 0x40
 8006c20:	d141      	bne.n	8006ca6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3314      	adds	r3, #20
 8006c28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3314      	adds	r3, #20
 8006c4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1d9      	bne.n	8006c22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d013      	beq.n	8006c9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7a:	4a7d      	ldr	r2, [pc, #500]	@ (8006e70 <HAL_UART_IRQHandler+0x3dc>)
 8006c7c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fd fa29 	bl	80040da <HAL_DMA_Abort_IT>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d016      	beq.n	8006cbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9c:	e00e      	b.n	8006cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f99a 	bl	8006fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca4:	e00a      	b.n	8006cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f996 	bl	8006fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cac:	e006      	b.n	8006cbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f992 	bl	8006fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006cba:	e170      	b.n	8006f9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cbc:	bf00      	nop
    return;
 8006cbe:	e16e      	b.n	8006f9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	f040 814a 	bne.w	8006f5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cce:	f003 0310 	and.w	r3, r3, #16
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 8143 	beq.w	8006f5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cdc:	f003 0310 	and.w	r3, r3, #16
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 813c 	beq.w	8006f5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60bb      	str	r3, [r7, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60bb      	str	r3, [r7, #8]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	60bb      	str	r3, [r7, #8]
 8006cfa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d06:	2b40      	cmp	r3, #64	@ 0x40
 8006d08:	f040 80b4 	bne.w	8006e74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 8140 	beq.w	8006fa2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	f080 8139 	bcs.w	8006fa2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d36:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d42:	f000 8088 	beq.w	8006e56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	330c      	adds	r3, #12
 8006d4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	330c      	adds	r3, #12
 8006d6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006d72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1d9      	bne.n	8006d46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3314      	adds	r3, #20
 8006d98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006da2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006da4:	f023 0301 	bic.w	r3, r3, #1
 8006da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3314      	adds	r3, #20
 8006db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006db6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006dba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006dbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006dc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e1      	bne.n	8006d92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3314      	adds	r3, #20
 8006dd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006dde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006de4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3314      	adds	r3, #20
 8006dee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006df2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006df4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006df8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e3      	bne.n	8006dce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	330c      	adds	r3, #12
 8006e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e26:	f023 0310 	bic.w	r3, r3, #16
 8006e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	330c      	adds	r3, #12
 8006e34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006e38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e3a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e3      	bne.n	8006e14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fd f8d2 	bl	8003ffa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f8c0 	bl	8006fec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e6c:	e099      	b.n	8006fa2 <HAL_UART_IRQHandler+0x50e>
 8006e6e:	bf00      	nop
 8006e70:	0800721b 	.word	0x0800721b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 808b 	beq.w	8006fa6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006e90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8086 	beq.w	8006fa6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	330c      	adds	r3, #12
 8006ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006ebe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ec0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ec4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e3      	bne.n	8006e9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3314      	adds	r3, #20
 8006ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3314      	adds	r3, #20
 8006ef2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ef6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006efc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006efe:	e841 2300 	strex	r3, r2, [r1]
 8006f02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1e3      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	330c      	adds	r3, #12
 8006f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0310 	bic.w	r3, r3, #16
 8006f2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	330c      	adds	r3, #12
 8006f38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006f3c:	61fa      	str	r2, [r7, #28]
 8006f3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	69b9      	ldr	r1, [r7, #24]
 8006f42:	69fa      	ldr	r2, [r7, #28]
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	617b      	str	r3, [r7, #20]
   return(result);
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e3      	bne.n	8006f18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f848 	bl	8006fec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f5c:	e023      	b.n	8006fa6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d009      	beq.n	8006f7e <HAL_UART_IRQHandler+0x4ea>
 8006f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f963 	bl	8007242 <UART_Transmit_IT>
    return;
 8006f7c:	e014      	b.n	8006fa8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00e      	beq.n	8006fa8 <HAL_UART_IRQHandler+0x514>
 8006f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d008      	beq.n	8006fa8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f9a3 	bl	80072e2 <UART_EndTransmit_IT>
    return;
 8006f9c:	e004      	b.n	8006fa8 <HAL_UART_IRQHandler+0x514>
    return;
 8006f9e:	bf00      	nop
 8006fa0:	e002      	b.n	8006fa8 <HAL_UART_IRQHandler+0x514>
      return;
 8006fa2:	bf00      	nop
 8006fa4:	e000      	b.n	8006fa8 <HAL_UART_IRQHandler+0x514>
      return;
 8006fa6:	bf00      	nop
  }
}
 8006fa8:	37e8      	adds	r7, #232	@ 0xe8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop

08006fb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b090      	sub	sp, #64	@ 0x40
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	603b      	str	r3, [r7, #0]
 8007010:	4613      	mov	r3, r2
 8007012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007014:	e050      	b.n	80070b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d04c      	beq.n	80070b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800701e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007020:	2b00      	cmp	r3, #0
 8007022:	d007      	beq.n	8007034 <UART_WaitOnFlagUntilTimeout+0x30>
 8007024:	f7fc fe8c 	bl	8003d40 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007030:	429a      	cmp	r2, r3
 8007032:	d241      	bcs.n	80070b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	330c      	adds	r3, #12
 800703a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703e:	e853 3f00 	ldrex	r3, [r3]
 8007042:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007046:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800704a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	330c      	adds	r3, #12
 8007052:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007054:	637a      	str	r2, [r7, #52]	@ 0x34
 8007056:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800705a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e5      	bne.n	8007034 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3314      	adds	r3, #20
 800706e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	613b      	str	r3, [r7, #16]
   return(result);
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f023 0301 	bic.w	r3, r3, #1
 800707e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3314      	adds	r3, #20
 8007086:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007088:	623a      	str	r2, [r7, #32]
 800708a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	69f9      	ldr	r1, [r7, #28]
 800708e:	6a3a      	ldr	r2, [r7, #32]
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	61bb      	str	r3, [r7, #24]
   return(result);
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e5      	bne.n	8007068 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e00f      	b.n	80070d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	4013      	ands	r3, r2
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	bf0c      	ite	eq
 80070c8:	2301      	moveq	r3, #1
 80070ca:	2300      	movne	r3, #0
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	461a      	mov	r2, r3
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d09f      	beq.n	8007016 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3740      	adds	r7, #64	@ 0x40
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	4613      	mov	r3, r2
 80070ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	88fa      	ldrh	r2, [r7, #6]
 80070f8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	88fa      	ldrh	r2, [r7, #6]
 80070fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2222      	movs	r2, #34	@ 0x22
 800710a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007124:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	695a      	ldr	r2, [r3, #20]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f042 0201 	orr.w	r2, r2, #1
 8007134:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0220 	orr.w	r2, r2, #32
 8007144:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007154:	b480      	push	{r7}
 8007156:	b095      	sub	sp, #84	@ 0x54
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	330c      	adds	r3, #12
 8007162:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007166:	e853 3f00 	ldrex	r3, [r3]
 800716a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800716c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	330c      	adds	r3, #12
 800717a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800717c:	643a      	str	r2, [r7, #64]	@ 0x40
 800717e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007180:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007182:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007184:	e841 2300 	strex	r3, r2, [r1]
 8007188:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800718a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1e5      	bne.n	800715c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3314      	adds	r3, #20
 8007196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	e853 3f00 	ldrex	r3, [r3]
 800719e:	61fb      	str	r3, [r7, #28]
   return(result);
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	f023 0301 	bic.w	r3, r3, #1
 80071a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3314      	adds	r3, #20
 80071ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e5      	bne.n	8007190 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d119      	bne.n	8007200 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	330c      	adds	r3, #12
 80071d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	e853 3f00 	ldrex	r3, [r3]
 80071da:	60bb      	str	r3, [r7, #8]
   return(result);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f023 0310 	bic.w	r3, r3, #16
 80071e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	330c      	adds	r3, #12
 80071ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071ec:	61ba      	str	r2, [r7, #24]
 80071ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6979      	ldr	r1, [r7, #20]
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	613b      	str	r3, [r7, #16]
   return(result);
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e5      	bne.n	80071cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2220      	movs	r2, #32
 8007204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800720e:	bf00      	nop
 8007210:	3754      	adds	r7, #84	@ 0x54
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b084      	sub	sp, #16
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007226:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f7ff fecf 	bl	8006fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800723a:	bf00      	nop
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007242:	b480      	push	{r7}
 8007244:	b085      	sub	sp, #20
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b21      	cmp	r3, #33	@ 0x21
 8007254:	d13e      	bne.n	80072d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800725e:	d114      	bne.n	800728a <UART_Transmit_IT+0x48>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d110      	bne.n	800728a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800727c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	1c9a      	adds	r2, r3, #2
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	621a      	str	r2, [r3, #32]
 8007288:	e008      	b.n	800729c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	1c59      	adds	r1, r3, #1
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6211      	str	r1, [r2, #32]
 8007294:	781a      	ldrb	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	4619      	mov	r1, r3
 80072aa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10f      	bne.n	80072d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	e000      	b.n	80072d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072d4:	2302      	movs	r3, #2
  }
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b082      	sub	sp, #8
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff fe54 	bl	8006fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b08c      	sub	sp, #48	@ 0x30
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b22      	cmp	r3, #34	@ 0x22
 8007324:	f040 80ab 	bne.w	800747e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007330:	d117      	bne.n	8007362 <UART_Receive_IT+0x50>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d113      	bne.n	8007362 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800733a:	2300      	movs	r3, #0
 800733c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007342:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	b29b      	uxth	r3, r3
 800734c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007350:	b29a      	uxth	r2, r3
 8007352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007354:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800735a:	1c9a      	adds	r2, r3, #2
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007360:	e026      	b.n	80073b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007366:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007368:	2300      	movs	r3, #0
 800736a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007374:	d007      	beq.n	8007386 <UART_Receive_IT+0x74>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10a      	bne.n	8007394 <UART_Receive_IT+0x82>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d106      	bne.n	8007394 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	b2da      	uxtb	r2, r3
 800738e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007390:	701a      	strb	r2, [r3, #0]
 8007392:	e008      	b.n	80073a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	4619      	mov	r1, r3
 80073be:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d15a      	bne.n	800747a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 0220 	bic.w	r2, r2, #32
 80073d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	695a      	ldr	r2, [r3, #20]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0201 	bic.w	r2, r2, #1
 80073f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007400:	2b01      	cmp	r3, #1
 8007402:	d135      	bne.n	8007470 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	330c      	adds	r3, #12
 8007410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	613b      	str	r3, [r7, #16]
   return(result);
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f023 0310 	bic.w	r3, r3, #16
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	330c      	adds	r3, #12
 8007428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800742a:	623a      	str	r2, [r7, #32]
 800742c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	69f9      	ldr	r1, [r7, #28]
 8007430:	6a3a      	ldr	r2, [r7, #32]
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	61bb      	str	r3, [r7, #24]
   return(result);
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e5      	bne.n	800740a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b10      	cmp	r3, #16
 800744a:	d10a      	bne.n	8007462 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff fdbf 	bl	8006fec <HAL_UARTEx_RxEventCallback>
 800746e:	e002      	b.n	8007476 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff fda7 	bl	8006fc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	e002      	b.n	8007480 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	e000      	b.n	8007480 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800747e:	2302      	movs	r3, #2
  }
}
 8007480:	4618      	mov	r0, r3
 8007482:	3730      	adds	r7, #48	@ 0x30
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800748c:	b0c0      	sub	sp, #256	@ 0x100
 800748e:	af00      	add	r7, sp, #0
 8007490:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80074a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a4:	68d9      	ldr	r1, [r3, #12]
 80074a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	ea40 0301 	orr.w	r3, r0, r1
 80074b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	431a      	orrs	r2, r3
 80074c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	431a      	orrs	r2, r3
 80074c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80074e0:	f021 010c 	bic.w	r1, r1, #12
 80074e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80074ee:	430b      	orrs	r3, r1
 80074f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80074fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007502:	6999      	ldr	r1, [r3, #24]
 8007504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	ea40 0301 	orr.w	r3, r0, r1
 800750e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	4b8f      	ldr	r3, [pc, #572]	@ (8007754 <UART_SetConfig+0x2cc>)
 8007518:	429a      	cmp	r2, r3
 800751a:	d005      	beq.n	8007528 <UART_SetConfig+0xa0>
 800751c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4b8d      	ldr	r3, [pc, #564]	@ (8007758 <UART_SetConfig+0x2d0>)
 8007524:	429a      	cmp	r2, r3
 8007526:	d104      	bne.n	8007532 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007528:	f7fd fc1c 	bl	8004d64 <HAL_RCC_GetPCLK2Freq>
 800752c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007530:	e003      	b.n	800753a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007532:	f7fd fc03 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 8007536:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800753a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007544:	f040 810c 	bne.w	8007760 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800754c:	2200      	movs	r2, #0
 800754e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007552:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007556:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800755a:	4622      	mov	r2, r4
 800755c:	462b      	mov	r3, r5
 800755e:	1891      	adds	r1, r2, r2
 8007560:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007562:	415b      	adcs	r3, r3
 8007564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007566:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800756a:	4621      	mov	r1, r4
 800756c:	eb12 0801 	adds.w	r8, r2, r1
 8007570:	4629      	mov	r1, r5
 8007572:	eb43 0901 	adc.w	r9, r3, r1
 8007576:	f04f 0200 	mov.w	r2, #0
 800757a:	f04f 0300 	mov.w	r3, #0
 800757e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800758a:	4690      	mov	r8, r2
 800758c:	4699      	mov	r9, r3
 800758e:	4623      	mov	r3, r4
 8007590:	eb18 0303 	adds.w	r3, r8, r3
 8007594:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007598:	462b      	mov	r3, r5
 800759a:	eb49 0303 	adc.w	r3, r9, r3
 800759e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80075b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075b6:	460b      	mov	r3, r1
 80075b8:	18db      	adds	r3, r3, r3
 80075ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80075bc:	4613      	mov	r3, r2
 80075be:	eb42 0303 	adc.w	r3, r2, r3
 80075c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80075c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80075c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80075cc:	f7f9 faa2 	bl	8000b14 <__aeabi_uldivmod>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4b61      	ldr	r3, [pc, #388]	@ (800775c <UART_SetConfig+0x2d4>)
 80075d6:	fba3 2302 	umull	r2, r3, r3, r2
 80075da:	095b      	lsrs	r3, r3, #5
 80075dc:	011c      	lsls	r4, r3, #4
 80075de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80075ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80075f0:	4642      	mov	r2, r8
 80075f2:	464b      	mov	r3, r9
 80075f4:	1891      	adds	r1, r2, r2
 80075f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80075f8:	415b      	adcs	r3, r3
 80075fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007600:	4641      	mov	r1, r8
 8007602:	eb12 0a01 	adds.w	sl, r2, r1
 8007606:	4649      	mov	r1, r9
 8007608:	eb43 0b01 	adc.w	fp, r3, r1
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	f04f 0300 	mov.w	r3, #0
 8007614:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007618:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800761c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007620:	4692      	mov	sl, r2
 8007622:	469b      	mov	fp, r3
 8007624:	4643      	mov	r3, r8
 8007626:	eb1a 0303 	adds.w	r3, sl, r3
 800762a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800762e:	464b      	mov	r3, r9
 8007630:	eb4b 0303 	adc.w	r3, fp, r3
 8007634:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007644:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007648:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800764c:	460b      	mov	r3, r1
 800764e:	18db      	adds	r3, r3, r3
 8007650:	643b      	str	r3, [r7, #64]	@ 0x40
 8007652:	4613      	mov	r3, r2
 8007654:	eb42 0303 	adc.w	r3, r2, r3
 8007658:	647b      	str	r3, [r7, #68]	@ 0x44
 800765a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800765e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007662:	f7f9 fa57 	bl	8000b14 <__aeabi_uldivmod>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4611      	mov	r1, r2
 800766c:	4b3b      	ldr	r3, [pc, #236]	@ (800775c <UART_SetConfig+0x2d4>)
 800766e:	fba3 2301 	umull	r2, r3, r3, r1
 8007672:	095b      	lsrs	r3, r3, #5
 8007674:	2264      	movs	r2, #100	@ 0x64
 8007676:	fb02 f303 	mul.w	r3, r2, r3
 800767a:	1acb      	subs	r3, r1, r3
 800767c:	00db      	lsls	r3, r3, #3
 800767e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007682:	4b36      	ldr	r3, [pc, #216]	@ (800775c <UART_SetConfig+0x2d4>)
 8007684:	fba3 2302 	umull	r2, r3, r3, r2
 8007688:	095b      	lsrs	r3, r3, #5
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007690:	441c      	add	r4, r3
 8007692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007696:	2200      	movs	r2, #0
 8007698:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800769c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80076a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80076a4:	4642      	mov	r2, r8
 80076a6:	464b      	mov	r3, r9
 80076a8:	1891      	adds	r1, r2, r2
 80076aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80076ac:	415b      	adcs	r3, r3
 80076ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80076b4:	4641      	mov	r1, r8
 80076b6:	1851      	adds	r1, r2, r1
 80076b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80076ba:	4649      	mov	r1, r9
 80076bc:	414b      	adcs	r3, r1
 80076be:	637b      	str	r3, [r7, #52]	@ 0x34
 80076c0:	f04f 0200 	mov.w	r2, #0
 80076c4:	f04f 0300 	mov.w	r3, #0
 80076c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80076cc:	4659      	mov	r1, fp
 80076ce:	00cb      	lsls	r3, r1, #3
 80076d0:	4651      	mov	r1, sl
 80076d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076d6:	4651      	mov	r1, sl
 80076d8:	00ca      	lsls	r2, r1, #3
 80076da:	4610      	mov	r0, r2
 80076dc:	4619      	mov	r1, r3
 80076de:	4603      	mov	r3, r0
 80076e0:	4642      	mov	r2, r8
 80076e2:	189b      	adds	r3, r3, r2
 80076e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076e8:	464b      	mov	r3, r9
 80076ea:	460a      	mov	r2, r1
 80076ec:	eb42 0303 	adc.w	r3, r2, r3
 80076f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007700:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007704:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007708:	460b      	mov	r3, r1
 800770a:	18db      	adds	r3, r3, r3
 800770c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800770e:	4613      	mov	r3, r2
 8007710:	eb42 0303 	adc.w	r3, r2, r3
 8007714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007716:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800771a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800771e:	f7f9 f9f9 	bl	8000b14 <__aeabi_uldivmod>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4b0d      	ldr	r3, [pc, #52]	@ (800775c <UART_SetConfig+0x2d4>)
 8007728:	fba3 1302 	umull	r1, r3, r3, r2
 800772c:	095b      	lsrs	r3, r3, #5
 800772e:	2164      	movs	r1, #100	@ 0x64
 8007730:	fb01 f303 	mul.w	r3, r1, r3
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	3332      	adds	r3, #50	@ 0x32
 800773a:	4a08      	ldr	r2, [pc, #32]	@ (800775c <UART_SetConfig+0x2d4>)
 800773c:	fba2 2303 	umull	r2, r3, r2, r3
 8007740:	095b      	lsrs	r3, r3, #5
 8007742:	f003 0207 	and.w	r2, r3, #7
 8007746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4422      	add	r2, r4
 800774e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007750:	e106      	b.n	8007960 <UART_SetConfig+0x4d8>
 8007752:	bf00      	nop
 8007754:	40011000 	.word	0x40011000
 8007758:	40011400 	.word	0x40011400
 800775c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007764:	2200      	movs	r2, #0
 8007766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800776a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800776e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007772:	4642      	mov	r2, r8
 8007774:	464b      	mov	r3, r9
 8007776:	1891      	adds	r1, r2, r2
 8007778:	6239      	str	r1, [r7, #32]
 800777a:	415b      	adcs	r3, r3
 800777c:	627b      	str	r3, [r7, #36]	@ 0x24
 800777e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007782:	4641      	mov	r1, r8
 8007784:	1854      	adds	r4, r2, r1
 8007786:	4649      	mov	r1, r9
 8007788:	eb43 0501 	adc.w	r5, r3, r1
 800778c:	f04f 0200 	mov.w	r2, #0
 8007790:	f04f 0300 	mov.w	r3, #0
 8007794:	00eb      	lsls	r3, r5, #3
 8007796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800779a:	00e2      	lsls	r2, r4, #3
 800779c:	4614      	mov	r4, r2
 800779e:	461d      	mov	r5, r3
 80077a0:	4643      	mov	r3, r8
 80077a2:	18e3      	adds	r3, r4, r3
 80077a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077a8:	464b      	mov	r3, r9
 80077aa:	eb45 0303 	adc.w	r3, r5, r3
 80077ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80077c2:	f04f 0200 	mov.w	r2, #0
 80077c6:	f04f 0300 	mov.w	r3, #0
 80077ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80077ce:	4629      	mov	r1, r5
 80077d0:	008b      	lsls	r3, r1, #2
 80077d2:	4621      	mov	r1, r4
 80077d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077d8:	4621      	mov	r1, r4
 80077da:	008a      	lsls	r2, r1, #2
 80077dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80077e0:	f7f9 f998 	bl	8000b14 <__aeabi_uldivmod>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4b60      	ldr	r3, [pc, #384]	@ (800796c <UART_SetConfig+0x4e4>)
 80077ea:	fba3 2302 	umull	r2, r3, r3, r2
 80077ee:	095b      	lsrs	r3, r3, #5
 80077f0:	011c      	lsls	r4, r3, #4
 80077f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007800:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007804:	4642      	mov	r2, r8
 8007806:	464b      	mov	r3, r9
 8007808:	1891      	adds	r1, r2, r2
 800780a:	61b9      	str	r1, [r7, #24]
 800780c:	415b      	adcs	r3, r3
 800780e:	61fb      	str	r3, [r7, #28]
 8007810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007814:	4641      	mov	r1, r8
 8007816:	1851      	adds	r1, r2, r1
 8007818:	6139      	str	r1, [r7, #16]
 800781a:	4649      	mov	r1, r9
 800781c:	414b      	adcs	r3, r1
 800781e:	617b      	str	r3, [r7, #20]
 8007820:	f04f 0200 	mov.w	r2, #0
 8007824:	f04f 0300 	mov.w	r3, #0
 8007828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800782c:	4659      	mov	r1, fp
 800782e:	00cb      	lsls	r3, r1, #3
 8007830:	4651      	mov	r1, sl
 8007832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007836:	4651      	mov	r1, sl
 8007838:	00ca      	lsls	r2, r1, #3
 800783a:	4610      	mov	r0, r2
 800783c:	4619      	mov	r1, r3
 800783e:	4603      	mov	r3, r0
 8007840:	4642      	mov	r2, r8
 8007842:	189b      	adds	r3, r3, r2
 8007844:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007848:	464b      	mov	r3, r9
 800784a:	460a      	mov	r2, r1
 800784c:	eb42 0303 	adc.w	r3, r2, r3
 8007850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800785e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007860:	f04f 0200 	mov.w	r2, #0
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800786c:	4649      	mov	r1, r9
 800786e:	008b      	lsls	r3, r1, #2
 8007870:	4641      	mov	r1, r8
 8007872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007876:	4641      	mov	r1, r8
 8007878:	008a      	lsls	r2, r1, #2
 800787a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800787e:	f7f9 f949 	bl	8000b14 <__aeabi_uldivmod>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4611      	mov	r1, r2
 8007888:	4b38      	ldr	r3, [pc, #224]	@ (800796c <UART_SetConfig+0x4e4>)
 800788a:	fba3 2301 	umull	r2, r3, r3, r1
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	2264      	movs	r2, #100	@ 0x64
 8007892:	fb02 f303 	mul.w	r3, r2, r3
 8007896:	1acb      	subs	r3, r1, r3
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	3332      	adds	r3, #50	@ 0x32
 800789c:	4a33      	ldr	r2, [pc, #204]	@ (800796c <UART_SetConfig+0x4e4>)
 800789e:	fba2 2303 	umull	r2, r3, r2, r3
 80078a2:	095b      	lsrs	r3, r3, #5
 80078a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80078a8:	441c      	add	r4, r3
 80078aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078ae:	2200      	movs	r2, #0
 80078b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80078b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80078b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80078b8:	4642      	mov	r2, r8
 80078ba:	464b      	mov	r3, r9
 80078bc:	1891      	adds	r1, r2, r2
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	415b      	adcs	r3, r3
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078c8:	4641      	mov	r1, r8
 80078ca:	1851      	adds	r1, r2, r1
 80078cc:	6039      	str	r1, [r7, #0]
 80078ce:	4649      	mov	r1, r9
 80078d0:	414b      	adcs	r3, r1
 80078d2:	607b      	str	r3, [r7, #4]
 80078d4:	f04f 0200 	mov.w	r2, #0
 80078d8:	f04f 0300 	mov.w	r3, #0
 80078dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078e0:	4659      	mov	r1, fp
 80078e2:	00cb      	lsls	r3, r1, #3
 80078e4:	4651      	mov	r1, sl
 80078e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078ea:	4651      	mov	r1, sl
 80078ec:	00ca      	lsls	r2, r1, #3
 80078ee:	4610      	mov	r0, r2
 80078f0:	4619      	mov	r1, r3
 80078f2:	4603      	mov	r3, r0
 80078f4:	4642      	mov	r2, r8
 80078f6:	189b      	adds	r3, r3, r2
 80078f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078fa:	464b      	mov	r3, r9
 80078fc:	460a      	mov	r2, r1
 80078fe:	eb42 0303 	adc.w	r3, r2, r3
 8007902:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	663b      	str	r3, [r7, #96]	@ 0x60
 800790e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800791c:	4649      	mov	r1, r9
 800791e:	008b      	lsls	r3, r1, #2
 8007920:	4641      	mov	r1, r8
 8007922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007926:	4641      	mov	r1, r8
 8007928:	008a      	lsls	r2, r1, #2
 800792a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800792e:	f7f9 f8f1 	bl	8000b14 <__aeabi_uldivmod>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4b0d      	ldr	r3, [pc, #52]	@ (800796c <UART_SetConfig+0x4e4>)
 8007938:	fba3 1302 	umull	r1, r3, r3, r2
 800793c:	095b      	lsrs	r3, r3, #5
 800793e:	2164      	movs	r1, #100	@ 0x64
 8007940:	fb01 f303 	mul.w	r3, r1, r3
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	3332      	adds	r3, #50	@ 0x32
 800794a:	4a08      	ldr	r2, [pc, #32]	@ (800796c <UART_SetConfig+0x4e4>)
 800794c:	fba2 2303 	umull	r2, r3, r2, r3
 8007950:	095b      	lsrs	r3, r3, #5
 8007952:	f003 020f 	and.w	r2, r3, #15
 8007956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4422      	add	r2, r4
 800795e:	609a      	str	r2, [r3, #8]
}
 8007960:	bf00      	nop
 8007962:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007966:	46bd      	mov	sp, r7
 8007968:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800796c:	51eb851f 	.word	0x51eb851f

08007970 <memset>:
 8007970:	4402      	add	r2, r0
 8007972:	4603      	mov	r3, r0
 8007974:	4293      	cmp	r3, r2
 8007976:	d100      	bne.n	800797a <memset+0xa>
 8007978:	4770      	bx	lr
 800797a:	f803 1b01 	strb.w	r1, [r3], #1
 800797e:	e7f9      	b.n	8007974 <memset+0x4>

08007980 <__libc_init_array>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	4d0d      	ldr	r5, [pc, #52]	@ (80079b8 <__libc_init_array+0x38>)
 8007984:	4c0d      	ldr	r4, [pc, #52]	@ (80079bc <__libc_init_array+0x3c>)
 8007986:	1b64      	subs	r4, r4, r5
 8007988:	10a4      	asrs	r4, r4, #2
 800798a:	2600      	movs	r6, #0
 800798c:	42a6      	cmp	r6, r4
 800798e:	d109      	bne.n	80079a4 <__libc_init_array+0x24>
 8007990:	4d0b      	ldr	r5, [pc, #44]	@ (80079c0 <__libc_init_array+0x40>)
 8007992:	4c0c      	ldr	r4, [pc, #48]	@ (80079c4 <__libc_init_array+0x44>)
 8007994:	f000 f818 	bl	80079c8 <_init>
 8007998:	1b64      	subs	r4, r4, r5
 800799a:	10a4      	asrs	r4, r4, #2
 800799c:	2600      	movs	r6, #0
 800799e:	42a6      	cmp	r6, r4
 80079a0:	d105      	bne.n	80079ae <__libc_init_array+0x2e>
 80079a2:	bd70      	pop	{r4, r5, r6, pc}
 80079a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a8:	4798      	blx	r3
 80079aa:	3601      	adds	r6, #1
 80079ac:	e7ee      	b.n	800798c <__libc_init_array+0xc>
 80079ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b2:	4798      	blx	r3
 80079b4:	3601      	adds	r6, #1
 80079b6:	e7f2      	b.n	800799e <__libc_init_array+0x1e>
 80079b8:	08007aa8 	.word	0x08007aa8
 80079bc:	08007aa8 	.word	0x08007aa8
 80079c0:	08007aa8 	.word	0x08007aa8
 80079c4:	08007aac 	.word	0x08007aac

080079c8 <_init>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	bf00      	nop
 80079cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ce:	bc08      	pop	{r3}
 80079d0:	469e      	mov	lr, r3
 80079d2:	4770      	bx	lr

080079d4 <_fini>:
 80079d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d6:	bf00      	nop
 80079d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079da:	bc08      	pop	{r3}
 80079dc:	469e      	mov	lr, r3
 80079de:	4770      	bx	lr
